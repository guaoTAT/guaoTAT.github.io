<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6</title>
    <url>/2021/07/31/ES6/</url>
    <content><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="1、ES6简介"><a href="#1、ES6简介" class="headerlink" title="1、ES6简介"></a>1、ES6简介</h2><h2 id="2、var、let、const的区别"><a href="#2、var、let、const的区别" class="headerlink" title="2、var、let、const的区别"></a>2、var、let、const的区别</h2><ul>
<li>var<ul>
<li>可以重复声明，没有报错从和jingg</li>
<li>无法限制修改</li>
<li>没有作用域，定义以后哪里都能调用</li>
</ul>
</li>
<li>let<ul>
<li>不能重复声明</li>
<li>有块级作用域，{}内声明，块外无效</li>
<li>let是变量，可以修改</li>
</ul>
</li>
<li>const<ul>
<li>常量，不可修改</li>
</ul>
</li>
</ul>
<h2 id="3、箭头函数"><a href="#3、箭头函数" class="headerlink" title="3、箭头函数"></a>3、箭头函数</h2><p>箭头函数式ES6的新特性用于简化函数</p>
<ul>
<li>如果是有一个参数，()可以省</li>
<li>如果只有一个返回值，{}可以省</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//未使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用箭头函数</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123; <span class="keyword">return</span> a * <span class="number">3</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、函数-参数"><a href="#4、函数-参数" class="headerlink" title="4、函数-参数"></a>4、函数-参数</h2><p>1、ES6新添加了可变长参数，需要放在参数最后,会使用数组装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function">(<span class="params">a, b, ...c</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>2、ES6参数还添加了默认值，如果不传参数则会使用默认值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function">(<span class="params">a, b, c = <span class="number">5</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test(1, 2); 这种情况c默认为5</span></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>);<span class="comment">//因为赋值了，所以c为10</span></span><br></pre></td></tr></table></figure>

<h2 id="5、解构赋值"><a href="#5、解构赋值" class="headerlink" title="5、解构赋值"></a>5、解构赋值</h2><p>一次性给多个变量赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; x, y, z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [json, arr, num, str, boolean] = [&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],<span class="number">1</span>, <span class="string">&quot;干饭&quot;</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>左右结构必须要一样</p>
<h2 id="6、数组"><a href="#6、数组" class="headerlink" title="6、数组"></a>6、数组</h2><p>ES6新添加了4个方法</p>
<h3 id="1、map-映射"><a href="#1、map-映射" class="headerlink" title="1、map 映射"></a>1、map 映射</h3><p><strong>例：</strong>将数组内的值乘以2在重新映射入数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">41</span>, <span class="number">50</span>, <span class="number">61</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2、reduce-汇总"><a href="#2、reduce-汇总" class="headerlink" title="2、reduce  汇总"></a>2、reduce  汇总</h3><p>通常用于求和、平均数等</p>
<p><strong>例：</strong>获取数组的平均数</p>
<p><strong>参数介绍：</strong></p>
<ul>
<li>tmp：上次返回的值</li>
<li>item：现在迭代的值</li>
<li>index:  下标</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">41</span>, <span class="number">50</span>, <span class="number">61</span>];</span><br><span class="line"><span class="keyword">let</span> result =arr.reduce(<span class="function">(<span class="params">tmp,item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">    	<span class="keyword">return</span> tmp+item;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> (item+tmp)/arr.length;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3、filter-过滤器"><a href="#3、filter-过滤器" class="headerlink" title="3、filter 过滤器"></a>3、filter 过滤器</h3><p>只保留为true的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">41</span>, <span class="number">50</span>, <span class="number">61</span>];</span><br><span class="line"><span class="keyword">let</span> rersult = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> (item % <span class="number">2</span> === <span class="number">1</span>) ? <span class="literal">true</span> : <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4、forEach-迭代"><a href="#4、forEach-迭代" class="headerlink" title="4、forEach 迭代"></a>4、forEach 迭代</h3><p>循环迭代</p>
<p><strong>参数介绍：</strong></p>
<ul>
<li>value: 当前的值</li>
<li>index: 当前下标</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">41</span>, <span class="number">50</span>, <span class="number">61</span>];</span><br><span class="line"><span class="keyword">let</span> rersult=arr.forEach(<span class="function">(<span class="params">value,index</span>)=&gt;</span><span class="built_in">console</span>.log(value,index))</span><br></pre></td></tr></table></figure>

<h2 id="7、字符串"><a href="#7、字符串" class="headerlink" title="7、字符串"></a>7、字符串</h2><h3 id="1、新添加了俩个字符串方法"><a href="#1、新添加了俩个字符串方法" class="headerlink" title="1、新添加了俩个字符串方法"></a>1、新添加了俩个字符串方法</h3><ul>
<li>startsWith() 获取开头</li>
<li>endsWith() 获取结尾</li>
</ul>
<p><strong>例:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(url.startsWith(<span class="string">&#x27;http&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(url.endsWith(<span class="string">&#x27;com&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2、新添加了字符串模板"><a href="#2、新添加了字符串模板" class="headerlink" title="2、新添加了字符串模板"></a>2、新添加了字符串模板</h3><ul>
<li>反引号``(数字1旁边)</li>
<li>可以通过${}注入值</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;标题&#x27;</span></span><br><span class="line"><span class="keyword">let</span> content = <span class="string">&#x27;内容&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">	&lt;h1&gt;<span class="subst">$&#123;title&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">	&lt;p&gt;<span class="subst">$&#123;content&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<h2 id="8、面向对象"><a href="#8、面向对象" class="headerlink" title="8、面向对象"></a>8、面向对象</h2><p>ES6为我们提供了新版的面向对象</p>
<ul>
<li>新版面向对象<ul>
<li>有了 class 关键字、构造器</li>
<li>class 里面直接加方法</li>
<li>继承，super 超类==父类</li>
</ul>
</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> me=<span class="keyword">new</span> Man(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(name,age);</span><br><span class="line">    <span class="built_in">this</span>.gender=gender</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">getGender</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.gender;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user=<span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">99</span>)</span><br><span class="line"><span class="built_in">console</span>.log(user.getName(),user.getAge(),user.getGender());</span><br></pre></td></tr></table></figure>

<h2 id="9、JSON"><a href="#9、JSON" class="headerlink" title="9、JSON"></a>9、JSON</h2><h3 id="1、json与字符串转换的方法"><a href="#1、json与字符串转换的方法" class="headerlink" title="1、json与字符串转换的方法"></a>1、json与字符串转换的方法</h3><ul>
<li>JSON.parse(string)  转换为js对象，json格式</li>
<li>JSON.stringify(string)  转换为字符串</li>
</ul>
<p>注:string是需要转换的字符串(或json)</p>
<h3 id="2、简写"><a href="#2、简写" class="headerlink" title="2、简写"></a>2、简写</h3><p>当key与变量名一模一样的时候，即可简写</p>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aa=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bb=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> jsons=&#123;aa,bb&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="10、Promise-同步异步"><a href="#10、Promise-同步异步" class="headerlink" title="10、Promise 同步异步"></a>10、Promise 同步异步</h2><p>封装ajax</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getJson = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url,</span><br><span class="line">            type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            success: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123; resolve(data) &#125;,</span><br><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getJson(url地址).then(</span><br><span class="line">    <span class="comment">//成功进入第一个</span></span><br><span class="line">    respone =&gt; &#123;<span class="built_in">console</span>.log(error)&#125;,</span><br><span class="line">    <span class="comment">//报错进入第二个</span></span><br><span class="line">    error =&gt; (<span class="built_in">console</span>.log(error))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="11、generator-生成器函数"><a href="#11、generator-生成器函数" class="headerlink" title="11、generator-生成器函数"></a>11、generator-生成器函数</h2><ul>
<li>generator 生成器函数<ul>
<li>中间可以停，到哪停呢，用 yield 配合，交出执行权</li>
<li>yield 有 放弃、退让、退位的意思</li>
<li>需要调用next()方法启动执行，需要遇到 yield 停, 踹一脚走一步</li>
<li>generator函数前面加一个 <code>*</code> 两边可以有空格，或靠近函数或<code>function</code></li>
</ul>
</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">500</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test=test();</span><br><span class="line"><span class="keyword">var</span> testValue=test.next()</span><br><span class="line"><span class="built_in">console</span>.log(testValue);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    test.next();</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>-ES</tag>
      </tags>
  </entry>
  <entry>
    <title>Css搭建工作</title>
    <url>/2021/07/31/CSS%E5%91%BD%E5%90%8D%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h3 id="项目搭建工作"><a href="#项目搭建工作" class="headerlink" title="项目搭建工作"></a>项目搭建工作</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>项目文件夹</td>
<td>shoping</td>
</tr>
<tr>
<td>样式类图片文件夹</td>
<td>images</td>
</tr>
<tr>
<td>样式文件夹</td>
<td>css</td>
</tr>
<tr>
<td>产品类图片文件夹</td>
<td>upload</td>
</tr>
<tr>
<td>字体类文件夹</td>
<td>fonts</td>
</tr>
<tr>
<td>脚本文件夹</td>
<td>js</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>首页</td>
<td>index.html</td>
</tr>
<tr>
<td>CSS初始化样式文件</td>
<td>base.css</td>
</tr>
<tr>
<td>CSS公共样式文件</td>
<td>common.css</td>
</tr>
</tbody></table>
<h3 id="CSS命名"><a href="#CSS命名" class="headerlink" title="CSS命名"></a>CSS命名</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>快捷导航栏</td>
<td>shortcut</td>
</tr>
<tr>
<td>头部</td>
<td>header</td>
</tr>
<tr>
<td>标志</td>
<td>logo</td>
</tr>
<tr>
<td>购物车</td>
<td>shopcar</td>
</tr>
<tr>
<td>搜索</td>
<td>search</td>
</tr>
<tr>
<td>热点词</td>
<td>hotwrods</td>
</tr>
<tr>
<td>导航</td>
<td>nav</td>
</tr>
<tr>
<td>导航左侧</td>
<td>dropdown 包含。dd .dt</td>
</tr>
<tr>
<td>导航右侧</td>
<td>navitems</td>
</tr>
<tr>
<td>页面底部</td>
<td>footer</td>
</tr>
<tr>
<td>页面底部服务模块</td>
<td>mod_service</td>
</tr>
<tr>
<td>页面底部帮助模块</td>
<td>mod_help</td>
</tr>
<tr>
<td>页面底部版权模块</td>
<td>mod_copyright</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>-Css</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpClient</title>
    <url>/2021/07/31/HttpClient/</url>
    <content><![CDATA[<h1 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>HttpClient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持 HTTP 协议的<strong>客户端编程工具包</strong>，并且它支持 HTTP 协议最新的版本和建议。</p>
<h2 id="2、功能介绍"><a href="#2、功能介绍" class="headerlink" title="2、功能介绍"></a>2、功能介绍</h2><ul>
<li>实现了所有 HTTP 的方法（GET,POST,PUT,HEAD 等）</li>
<li>支持自动转向</li>
<li>支持 HTTPS 协议</li>
<li>支持代理服务器等</li>
<li>HttpClient官方网站是: <a href="http://hc.apache.org/">http://hc.apache.org/</a></li>
</ul>
<h2 id="3、get请求例"><a href="#3、get请求例" class="headerlink" title="3、get请求例"></a>3、get请求例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFUALT_GETURL=<span class="string">&quot;http://www.glxy.com//glxy-manage/textList?id=1&amp;name=张三&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建httpclient对象，等价于打开一个浏览器</span></span><br><span class="line">CloseableHttpClient httpClient=HttpClients.createDefault();</span><br><span class="line"><span class="comment">//输入get请求与网址</span></span><br><span class="line">HttpGet get=<span class="keyword">new</span> HttpGet(DEFUALT_GETURL);</span><br><span class="line"><span class="comment">//设置请求超时时间</span></span><br><span class="line">RequestConfig.custom().setConnectionRequestTimeout(<span class="number">2000</span>).setSocketTimeout(<span class="number">2000</span>).build();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(get);<span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">int</span> statusCold = response.getStatusLine().getStatusCode();<span class="comment">//获取请求后打的状态码</span></span><br><span class="line">    <span class="keyword">if</span> (statusCold!=HttpStatus.SC_OK) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HttpEntity heEntity=response.getEntity();<span class="comment">//获取响应的实体</span></span><br><span class="line">    String s = EntityUtils.toString(heEntity);<span class="comment">//获取请求结果值</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、post请求例"><a href="#4、post请求例" class="headerlink" title="4、post请求例"></a>4、post请求例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFUALT_POSTURL=<span class="string">&quot;http://www.glxy.com//glxy-manage/textList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建httpclient对象，等价于打开一个浏览器</span></span><br><span class="line">CloseableHttpClient httpClient=HttpClients.createDefault();</span><br><span class="line"><span class="comment">//输入get请求与网址</span></span><br><span class="line">HttpPost post=<span class="keyword">new</span> HttpPost(DEFUALT_POSTURL);</span><br><span class="line"><span class="comment">//设置请求超时时间</span></span><br><span class="line">RequestConfig reConfig = RequestConfig.custom().setConnectionRequestTimeout(<span class="number">2000</span>).setSocketTimeout(<span class="number">2000</span>).build();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//设置传值</span></span><br><span class="line">    List&lt;NameValuePair&gt; pairs=<span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">    pairs.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;10085&quot;</span>));</span><br><span class="line">    pairs.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;测试post传值&quot;</span>));</span><br><span class="line">    <span class="comment">//传输值，并且设置编码格式</span></span><br><span class="line">    UrlEncodedFormEntity entity = <span class="keyword">new</span> UrlEncodedFormEntity(pairs,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    post.setConfig(reConfig);</span><br><span class="line">    post.setEntity(entity);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    CloseableHttpResponse response = httpClient.execute(post);<span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">int</span> statusCold = response.getStatusLine().getStatusCode();<span class="comment">//获取请求后打的状态码</span></span><br><span class="line">    <span class="keyword">if</span> (statusCold!=HttpStatus.SC_OK) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HttpEntity heEntity=response.getEntity();<span class="comment">//获取响应的实体</span></span><br><span class="line">    String s = EntityUtils.toString(heEntity);<span class="comment">//获取请求结果值</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具包</category>
      </categories>
      <tags>
        <tag>-HttpClient</tag>
      </tags>
  </entry>
  <entry>
    <title>Hessian</title>
    <url>/2021/07/31/Hessian/</url>
    <content><![CDATA[<h1 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h1><h2 id="1、Hessian简介"><a href="#1、Hessian简介" class="headerlink" title="1、Hessian简介"></a>1、Hessian简介</h2><ul>
<li>Hessian是一个轻量级的remoting on http工具，使用简单的方法提供了RMI（Remote Method Invocation）的功能</li>
<li>Hessian通过Servlet提供远程服务。需要将匹配某个模式的请求映射到Hessian服务。Spring的DispatcherServlet可以完成该功能，DispatcherServlet可将匹配模式的请求转发到Hessian服务。Hessian的server端提供一个servlet基类, 用来处理发送的请求，而Hessian的这个远程过程调用，完全使用动态代理来实现的,，推荐采用面向接口编程，因此，Hessian服务建议通过接口暴露</li>
</ul>
<h2 id="2、Hessian处理过程"><a href="#2、Hessian处理过程" class="headerlink" title="2、Hessian处理过程"></a>2、Hessian处理过程</h2><p>客户端——&gt;序列化写到输出流——&gt;远程方法（服务器端）——&gt;序列化写到输出流 ——&gt;客户端读取输入流</p>
<p>——&gt;输出结果</p>
<h2 id="3、使用Hessian开发"><a href="#3、使用Hessian开发" class="headerlink" title="3、使用Hessian开发"></a>3、使用Hessian开发</h2><h3 id="1、需要导入架包"><a href="#1、需要导入架包" class="headerlink" title="1、需要导入架包"></a>1、需要导入架包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、定义接口"><a href="#2、定义接口" class="headerlink" title="2、定义接口"></a>2、定义接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String text)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、定义实现类"><a href="#3、定义实现类" class="headerlink" title="3、定义实现类"></a>3、定义实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello hessian: &quot;</span> + text;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;zhangshan&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> users;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、配置hessian接口服务"><a href="#4、配置hessian接口服务" class="headerlink" title="4、配置hessian接口服务"></a>4、配置hessian接口服务</h3><p>方法一：在web.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- hessian提供的servlet --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.caucho.hessian.server.HessianServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>home-class<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 服务接口的实现类 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.znsd.hessian.service.impl.UserServiceImpl<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>home-api<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 服务接口 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.znsd.api.service.UserSevice<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法二：零配置文件(web版本需要3.0以上)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;/userService&quot;)</span></span><br><span class="line">	<span class="comment">//参数为实现列</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> HessianExporter <span class="title">userServcice</span><span class="params">(UserServiceImpl userServiceImpl)</span> </span>&#123;</span><br><span class="line">		HessianServiceExporter hessianServiceExporter = <span class="keyword">new</span> HessianServiceExporter();</span><br><span class="line">		hessianServiceExporter.setService(userServiceImpl);</span><br><span class="line">        <span class="comment">//接口.class</span></span><br><span class="line">		hessianServiceExporter.setServiceInterface(UserService.class);</span><br><span class="line">		<span class="keyword">return</span> hessianServiceExporter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、整合spring使用"><a href="#5、整合spring使用" class="headerlink" title="5、整合spring使用"></a>5、整合spring使用</h3><p>方法一：xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用HessianServiceExporter 将普通bean导出成Hessian服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.remoting.caucho.HessianServiceExporter&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 需要导出的目标bean --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Hessian服务的接口 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.znsd.hessian.service.UserService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法二：零配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HessianProxyFactoryBean <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HessianProxyFactoryBean hessianProxyFactoryBean=<span class="keyword">new</span> HessianProxyFactoryBean();</span><br><span class="line">    hessianProxyFactoryBean.setServiceUrl(<span class="string">&quot;http://www.glxy.com/glxy-server/userService&quot;</span>);</span><br><span class="line">    hessianProxyFactoryBean.setServiceInterface(UserService.class);</span><br><span class="line">    <span class="keyword">return</span> hessianProxyFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、优点与缺点"><a href="#4、优点与缺点" class="headerlink" title="4、优点与缺点"></a>4、优点与缺点</h2><p><strong>优点：</strong></p>
<ol>
<li>简单易用，面向接口，通过接口暴露服务，jar包只有200、300k，不需要配置防火墙</li>
<li>效率高，复杂对象序列化速度仅次于RMI，简单对象序列化优于RMI，二进制传输</li>
<li>多语言支持：wiki、Java、Flash/Flex、Python、C++、.NET C#、PHP、Ruby、Objective-C</li>
<li>可与spring集成，配置简单，使用HessianServiceExporter提供bean服务</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>缺乏安全机制，传输没有加密处理</li>
<li>异常机制不完善，总是报一些错误，错误原因也是千奇百怪，提示信息不足</li>
<li>事务处理欠缺</li>
<li>版本问题，spring 2.5.6对照3.1.3版，spring 3对照4.0及以上版本，需要使用spring MVC部分内容</li>
</ol>
]]></content>
      <categories>
        <category>工具包</category>
      </categories>
      <tags>
        <tag>-Hessian</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2021/07/31/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>nginx是常见的web服务器</p>
<p>Nginx 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器</p>
<h2 id="1、为什么要使用nginx"><a href="#1、为什么要使用nginx" class="headerlink" title="1、为什么要使用nginx"></a>1、为什么要使用nginx</h2><p>Nginx 是一个高性能Web和反向代理服务器, 它具有有很多非常优越的特性:</p>
<ul>
<li><strong>在高连接并发的情况下，Nginx是Apache服务器不错的替代品</strong> Nginx在美国是做虚拟主机生意的老板们经常选择的软件平台之一. 能够支持高达 50,000 个并发连接数的响应</li>
<li><strong>Nginx作为负载均衡服务器</strong></li>
<li><strong>作为邮件代理服务器</strong> Nginx 同时也是一个非常优秀的邮件代理服务器</li>
<li><strong>Nginx 是一个安装</strong> 非常的简单, 配置文件 非常简洁（还能够支持perl语法）, Bugs 非常少的服务器: Nginx 启动特别容易, 并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动. 你还能够 不间断服务的情况下进行软件版本的升级.</li>
</ul>
<p>下载</p>
<p>官网:<a href="http://nginx.org/">http://nginx.org/</a></p>
<p>官方文档:<a href="http://nginx.org/en/docs/">http://nginx.org/en/docs/</a></p>
<p>下载:<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
<h2 id="2、常用指令"><a href="#2、常用指令" class="headerlink" title="2、常用指令"></a>2、常用指令</h2><p>cmd进入nginx安装的目录</p>
<p>1、nginx.exe -t  测试nginx是否有错误</p>
<p>2、nginx -s stop 快速关闭nginx，可能不保存相关信息</p>
<p>3、nginx -s reload 该变配置后，重新加载</p>
<p>4、nginx -s reopen  重新打开日志文件</p>
<h2 id="3、http反向代理配置"><a href="#3、http反向代理配置" class="headerlink" title="3、http反向代理配置"></a>3、http反向代理配置</h2><p>进入nginx安装目录中的conf中的nginx.conf</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/nginx1.png" alt="Snipaste_2021-06-05_16-12-16"></p>
<p>在#gzip  on后输入</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设定实际的服务器列表 </span></span><br><span class="line">	<span class="attribute">upstream</span> my_server&#123;</span><br><span class="line">    	<span class="comment">#运行8080端口时候进入</span></span><br><span class="line">	    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">#如果需要配置多个项目，则粘贴上面代码，改变名字，端口号</span></span><br><span class="line">	<span class="comment">#http虚拟主机服务器配置</span></span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">	    <span class="comment">#监听80端口，80端口是知名端口号，用于HTTP协议</span></span><br><span class="line">	    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">#定义使用www.xx.com访问</span></span><br><span class="line">	    <span class="attribute">server_name</span>  www.glxy.com;</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">#首页</span></span><br><span class="line">	    <span class="attribute">index</span> index.html</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">#编码格式</span></span><br><span class="line">	    charset utf-<span class="number">8</span>;</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">#代理配置参数</span></span><br><span class="line">	    <span class="attribute">proxy_connect_timeout</span> <span class="number">180</span>;</span><br><span class="line">	    <span class="attribute">proxy_send_timeout</span> <span class="number">180</span>;</span><br><span class="line">	    <span class="attribute">proxy_read_timeout</span> <span class="number">180</span>;</span><br><span class="line">	    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">	    <span class="attribute">proxy_set_header</span> X-Forwarder-For $remote_addr;</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">#反向代理的路径（和upstream绑定），location 后面设置映射的路径</span></span><br><span class="line">	    <span class="attribute">location</span> / &#123;</span><br><span class="line">	        <span class="attribute">proxy_pass</span> http://my_server;</span><br><span class="line">	    &#125; </span><br><span class="line">    	<span class="comment">#多个则需要粘贴多个方向代理路径</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 所有静态文件由nginx直接读取不经过tomcat</span></span><br><span class="line">		    <span class="attribute">location</span> <span class="regexp">~ .*\.(js|bbb|txt|jpg)</span>&#123;</span><br><span class="line">          		<span class="comment">#项目在tomcat的地址</span></span><br><span class="line">		        <span class="attribute">root</span> E:\服务器\apache-tomcat-<span class="number">9</span>.<span class="number">0</span>.<span class="number">41</span>\webapps\glxy-web;</span><br><span class="line">		        <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">		    &#125;</span><br><span class="line">    	<span class="comment">#有web项母，该web项目内含有静态资源则需要引入静态资源</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>如果你是没有域名则可以去C:\Windows\System32\drivers\etc添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">127.0.0.1  www.glxy.com</span><br></pre></td></tr></table></figure>

<p>你访问<a href="http://www.glxy.com则会返回127.0.0.1/">www.glxy.com则会返回127.0.0.1</a></p>
<h2 id="4、静态资源虚拟主机配置"><a href="#4、静态资源虚拟主机配置" class="headerlink" title="4、静态资源虚拟主机配置"></a>4、静态资源虚拟主机配置</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span>  &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  static.test.com;<span class="comment">#这个为静态资源网址</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf|js|css|ico|svg|json|html)$</span> &#123;</span><br><span class="line">            <span class="comment">#请求的根文档</span></span><br><span class="line">            <span class="attribute">root</span> D:/static;<span class="comment">#你静态资源存放的地址</span></span><br><span class="line">            <span class="comment">#过期时间</span></span><br><span class="line">            <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、负载资源配置"><a href="#5、负载资源配置" class="headerlink" title="5、负载资源配置"></a>5、负载资源配置</h2><h3 id="1、轮询-常用"><a href="#1、轮询-常用" class="headerlink" title="1、轮询(常用)"></a>1、轮询(常用)</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> my_server &#123;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.101:8888</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.102:8888</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.103:8888</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这样配置则需要修改</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>不修改，则一旦有一个服务器server未开启，则会浪费你大量时间等待响应</p>
<p>这种形式为，如果三个服务器一起启动，则轮流每个进一次</p>
<h3 id="2、weight（常用）"><a href="#2、weight（常用）" class="headerlink" title="2、weight（常用）"></a>2、weight（常用）</h3><p>轮询的加强版，添加了权重</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.101</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.102</span> weight=<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.103</span> weight=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>则6分之一的sever进第一个请求，3分之一的server进第二个，2分之一的server进第三个请求</p>
<h3 id="3、ip-hash"><a href="#3、ip-hash" class="headerlink" title="3、ip_hash"></a>3、ip_hash</h3><p>每个请求按照访问ip进入请求，这样子每个访客辉固定访问一个server服务器‘</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.101:7777</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.102:8888</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.103:9999</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、fair"><a href="#4、fair" class="headerlink" title="4、fair"></a>4、fair</h3><p>fair顾名思义，公平地按照后端服务器的响应时间（rt）来分配请求，响应时间短即rt小的后端服务器优先分配请求。如果需要使用这种调度算法，必须下载Nginx的upstr_fair模块。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.102</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.103</span>;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、url-hash"><a href="#5、url-hash" class="headerlink" title="5、url_hash"></a>5、url_hash</h3><p>目前用consistent_hash替代url_hash 与ip_hash类似，但是按照访问url的hash结果来分配请求，使得每个url定向到同一个后端服务器，主要应用于后端服务器为缓存时的场景下。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.102</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.103</span>;</span><br><span class="line">    <span class="attribute">hash</span> $request_uri;</span><br><span class="line">    <span class="attribute">hash_method</span> crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>-Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Java命名规范</title>
    <url>/2021/07/31/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h1><ol>
<li>项目名全部小写</li>
<li>包名全部小写</li>
<li>类名首字母大写,其余组成词首字母依次大写</li>
<li>变量名,方法名首字母小写,如果名称由多个单词组成,除首字母外的每个单词的首字母都要大写.</li>
<li>常量名全部大写</li>
<li>所有命名规则必须遵循以下规则<ul>
<li>名称只能由字母、数字、下划线、$符号组成</li>
<li>不能以数字开头</li>
<li>名称不能使用Java中的关键字</li>
<li>坚决不允许出现中文及拼音命名</li>
<li>不要使用不正规的英文缩写</li>
</ul>
</li>
</ol>
<h2 id="1、Java包名命名规范"><a href="#1、Java包名命名规范" class="headerlink" title="1、Java包名命名规范"></a>1、Java包名命名规范</h2><p>常见的包名命名规范：com.公司名.模块</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>-Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/07/31/git/</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="1、git简介"><a href="#1、git简介" class="headerlink" title="1、git简介"></a>1、git简介</h2><ul>
<li>Git 是目前世界上被最广泛使用一款免费、<code>开源的分布式版本控制系统</code></li>
<li>Git可以有效、高速的处理从很小到非常大的项目版本管理。</li>
<li>Git最初由 Linux 之父 Linus Trovalds（林纳斯·托瓦兹） 开发，用作Linux内核代码的管理。</li>
<li>Git 使用分散式架构，是分散式版本管理，相较于例如 CVS 或者 Subversion 等集中式版本管理软件，Git 并不是将代码的所有修改历史保存在中心服务器中的。</li>
</ul>
<h2 id="2、git下载"><a href="#2、git下载" class="headerlink" title="2、git下载"></a>2、git下载</h2><p>下载地址：<a href="https://git-scm.com/">Git (git-scm.com)</a></p>
<p>下载后安装完则需要告诉git你是谁</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;名字&quot;</span><br><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure>

<p>你也可以通过指令设置别名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global alias.别名 指令</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure>

<p>如果要调用status，你则可以  git st</p>
<h2 id="3、git的常用指令"><a href="#3、git的常用指令" class="headerlink" title="3、git的常用指令"></a>3、git的常用指令</h2><p>touch 名字 创建一个文件</p>
<h3 id="1、克隆"><a href="#1、克隆" class="headerlink" title="1、克隆"></a>1、克隆</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 远程仓库http地址   	根据远程仓库http地址克隆</span><br><span class="line">git clone 远程仓库SSH地址	 	根据远程仓库ssh地址克隆</span><br><span class="line">git clone 本地仓库路径		 	根据本地仓库路径克隆</span><br><span class="line">git clone 远程仓库地址 目录名 	  在本地仓库创建一个目录存放远程仓库克隆下来的文件</span><br></pre></td></tr></table></figure>

<h3 id="2、创建新仓库"><a href="#2、创建新仓库" class="headerlink" title="2、创建新仓库"></a>2、创建新仓库</h3><p>1、将当前目录转换为git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>2、在当前目录创建一个git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init 仓库名</span><br></pre></td></tr></table></figure>

<p>执行git init 即可以创建成git仓库</p>
<h3 id="3、添加与提交"><a href="#3、添加与提交" class="headerlink" title="3、添加与提交"></a>3、添加与提交</h3><p>1、添加至<strong>缓存区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 改动的文件   将一个改动文件添加到缓存区</span><br><span class="line">git add *   	   将所有的改动文件添加到缓存区</span><br></pre></td></tr></table></figure>

<p>2、添加到<strong>本地仓库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &#x27;提交信息&#x27;   提交到本地仓库</span><br></pre></td></tr></table></figure>

<p>添加到本地仓库则可以提交到远程服务器了</p>
<p>3、添加到<strong>远程仓库</strong></p>
<p>如果你是第一次将你的仓库连接远程服务器，则需要</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add 别名 远程服务器http地址</span><br></pre></td></tr></table></figure>

<p>提交到远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote 连接远程仓库的别名 分支名</span><br><span class="line">git push 上传</span><br></pre></td></tr></table></figure>

<p>如果没添加分支名，则默认master</p>
<h3 id="4、创建远程仓库连接"><a href="#4、创建远程仓库连接" class="headerlink" title="4、创建远程仓库连接"></a>4、创建远程仓库连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote   列出所有的远程连接</span><br><span class="line">git remote -v  列出所有的远程连接并且显示url</span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt; 创建一个远程连接，name为自定义 url为远程连接的http的地址</span><br><span class="line">git remote rm &lt;name&gt;	删除一个远程连接</span><br><span class="line">git remote rename &lt;old-name&gt; &lt;new-name&gt;	重命名远程连接名</span><br></pre></td></tr></table></figure>

<h3 id="5、查看状态"><a href="#5、查看状态" class="headerlink" title="5、查看状态"></a>5、查看状态</h3><p>可以通过git status 列出已缓存、未缓存、未追踪的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E6%8F%90%E7%A4%BA.png" alt="新添加文件"></p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-20_16-13-14.png" alt="修改文件"></p>
<p>例 git add bbb  mit -am ‘改变信息’     提交到本地仓库</p>
<h3 id="6、查看日志"><a href="#6、查看日志" class="headerlink" title="6、查看日志"></a>6、查看日志</h3><p>1、查看所有的完整日志，超过一屏幕则可以通过空格滚动，按q退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>2、指定显示几个日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log -n 数量</span><br></pre></td></tr></table></figure>

<p>3、将每个日志压缩成一行显示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure>

<p>4、搜索某个人的所有提交记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --grep=&#x27;字符串或者正则表达式&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="7、更新"><a href="#7、更新" class="headerlink" title="7、更新"></a>7、更新</h3><p>更新应该是我们用的最多的标签，因为多人项目开发的时候，需要更新数据后才能提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h2 id="4、忽略文件"><a href="#4、忽略文件" class="headerlink" title="4、忽略文件"></a>4、忽略文件</h2><p>如果你有一些东西不需要提交，那么你需要在目录下添加.gitignore这个文件需要用git创建，然后在里面填写的上传则会忽略</p>
<p>多人项目需要忽略的文件.project  .classpath  target .settings</p>
<h2 id="5、分支（重点）"><a href="#5、分支（重点）" class="headerlink" title="5、分支（重点）"></a>5、分支（重点）</h2><p>通常企业中开发，不会动master的，等于备份一份，防止代码损坏</p>
<p>通常创建分支开发，开发完成，测试完成后才会跟master合并</p>
<p><strong>分支常用标签</strong></p>
<p>创建分支：git branch 分支名  </p>
<p>你在那个分支创建的则拥有那个分支的所有文件</p>
<p>查看所有分支，绿色的代表当前分支：git branch  </p>
<p>切换分支：git checkout 分支名  </p>
<p>切换分支以后，新添加文件修改，然后提交，则master中的文件不存在</p>
<p>合并分支：git merge 分支名 </p>
<h2 id="6、冲突问题"><a href="#6、冲突问题" class="headerlink" title="6、冲突问题"></a>6、冲突问题</h2><p>如果团队开发中俩个人一起提交，则会出现冲突问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/textya.png" alt="冲突"></p>
<p>这个时候你则需要将代码更新下来</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E5%86%B2%E7%AA%812.png" alt="冲突2"></p>
<p>更新下来后，则会俩个版本进行冲突，你则需要跟上一个上传的人共同解决后</p>
<p>直接git push上传即可</p>
<h2 id="7、版本回退"><a href="#7、版本回退" class="headerlink" title="7、版本回退"></a>7、版本回退</h2><h3 id="1、git-revert"><a href="#1、git-revert" class="headerlink" title="1、git revert"></a>1、git revert</h3><p>这个指令，用于版本回退，会保留回退前的版本，避免丢失历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git revert 版本号</span><br></pre></td></tr></table></figure>

<h3 id="2、git-reset"><a href="#2、git-reset" class="headerlink" title="2、git reset"></a>2、git reset</h3><p>这个指令在开发过程中，可能永远的用不上，因为这个太过于危险，一旦回退成功后，则不会保存任何记录，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitreset 版本号</span><br></pre></td></tr></table></figure>

<h2 id="8、Eclipse使用git"><a href="#8、Eclipse使用git" class="headerlink" title="8、Eclipse使用git"></a>8、Eclipse使用git</h2><p>eclipse给我们自带了git,所以我们只需要打开即可</p>
<h3 id="1、找到git"><a href="#1、找到git" class="headerlink" title="1、找到git"></a>1、找到git</h3><p><strong>打开方式1</strong></p>
<p>ctrl+3 搜索git</p>
<p><strong>打开方式2</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-20-02.png" alt="Snipaste_2021-05-21_16-20-02"></p>
<h3 id="2、打开git"><a href="#2、打开git" class="headerlink" title="2、打开git"></a>2、打开git</h3><p>搜索git ,然后选择git Repositories(Git)</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-22-44.png" alt="Snipaste_2021-05-21_16-20-02"></p>
<h3 id="3、出现的git模板"><a href="#3、出现的git模板" class="headerlink" title="3、出现的git模板"></a>3、出现的git模板</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-26-10.png" alt="Snipaste_2021-05-21_16-26-10"></p>
<h3 id="4、将现有项目导入远程仓库"><a href="#4、将现有项目导入远程仓库" class="headerlink" title="4、将现有项目导入远程仓库"></a>4、将现有项目导入远程仓库</h3><p>右击项目,选择Team 点击share project</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-29-21.png" alt="将现有项目导入远程仓库1"></p>
<p>然后选择git</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-30-38.png" alt="将现有项目导入远程仓库2"></p>
<p>然后选择将单选框全部选中，如果stud不能选中，则单击创建为git仓库即可，然后下一步结束</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-33-54.png" alt="将现有项目导入远程仓库3"></p>
<p>然后进入该文件夹创建.gitignore文件，忽略这些文件上传，因为每个项目创建的都不一样</p>
<p>拦截.class则是因为，运行java代码则会自动生成，则没必要浪费空间</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-40-26.png" alt="将现有项目导入远程仓库4"></p>
<p>然后在git下既可以看到</p>
<p>如果未拦截成功，则F5刷新一下</p>
<p>然后提交到本地仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-55-03.png" alt="Snipaste_2021-05-21_16-55-03"></p>
<p>5、右击要导入的项目，选择</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_16-59-01.png" alt="Snipaste_2021-05-21_16-59-01"></p>
<p>6、然后粘贴远程仓库地址，输入账号密码，勾选Store in Secure Store,然后下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_17-01-07.png" alt=" "></p>
<p>7、提交至那个分支</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_21-54-09.png" alt="Snipaste_2021-05-21_21-54-09"></p>
<p>点击后</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_21-57-51.png" alt="Snipaste_2021-05-21_21-57-51"></p>
<p>不推荐强制提交，会影响工作，下一步可以直接结束</p>
<p>下一步是</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-02-11.png" alt="Snipaste_2021-05-21_22-02-11"></p>
<p>然后则上传至远程仓库了</p>
<h3 id="5、克隆一个项目"><a href="#5、克隆一个项目" class="headerlink" title="5、克隆一个项目"></a>5、克隆一个项目</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-14-11.png" alt="Snipaste_2021-05-21_22-14-11"></p>
<p>然后输入需要克隆的远程仓库地址，输入用户名密码，下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-15-33.png" alt="Snipaste_2021-05-21_22-15-33"></p>
<p>选择需要克隆的分支，然后下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-18-25.png" alt="Snipaste_2021-05-21_22-18-25"></p>
<p>将本地的那个地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-20-03.png" alt="Snipaste_2021-05-21_22-20-03"></p>
<p>然后则克隆成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-20-33.png" alt="Snipaste_2021-05-21_22-20-33"></p>
<p>然后将项目导入至eclipse</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-21-29.png" alt="Snipaste_2021-05-21_22-21-29"></p>
<p>搜索maven,选择第二个，然后下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-22-04.png" alt="Snipaste_2021-05-21_22-22-04"></p>
<p>选择需要导入的本地仓库中的项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-21_22-23-25.png" alt="Snipaste_2021-05-21_22-23-25"></p>
<p>然后刷新则导入成功</p>
<h3 id="6、使用eclipse提交"><a href="#6、使用eclipse提交" class="headerlink" title="6、使用eclipse提交"></a>6、使用eclipse提交</h3><p>你可以右击你刚刚修改的文件提交，也可以右键项目提交所有修改文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-22_08-41-18.png" alt="Snipaste_2021-05-22_08-41-18"></p>
<p>然后则提交成功</p>
<h3 id="7、更新数据"><a href="#7、更新数据" class="headerlink" title="7、更新数据"></a>7、更新数据</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-22_08-46-52.png" alt="Snipaste_2021-05-22_08-46-52"></p>
<p>然后下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-22_09-10-36.png" alt="Snipaste_2021-05-22_09-10-36"></p>
<p>然后更新成功</p>
<h2 id="9、idea使用git"><a href="#9、idea使用git" class="headerlink" title="9、idea使用git"></a>9、idea使用git</h2><h3 id="1、将目录初始化为git目录"><a href="#1、将目录初始化为git目录" class="headerlink" title="1、将目录初始化为git目录"></a>1、将目录初始化为git目录</h3><p>选中需要初始化的项目确定</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/1.png" alt="1"></p>
<h3 id="2、git一级目录解析"><a href="#2、git一级目录解析" class="headerlink" title="2、git一级目录解析"></a>2、git一级目录解析</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90.png" alt="一级目录解析"></p>
<ul>
<li><p>提交至本地仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/5.png" alt="5"></p>
</li>
</ul>
<h3 id="3、三级菜单解析"><a href="#3、三级菜单解析" class="headerlink" title="3、三级菜单解析"></a>3、三级菜单解析</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90.png" alt="二级目录解析"></p>
<ul>
<li><strong>关于克隆</strong><ul>
<li>可以自定义到那个文件夹，但是必须要项目名为文件夹名</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/3.png" alt="3"></p>
<h3 id="4、注意"><a href="#4、注意" class="headerlink" title="4、注意"></a>4、注意</h3><p><strong>1、需要先更新在提交否则可能会引发这个问题</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E5%BC%95%E5%8F%91%E9%97%AE%E9%A2%98.png" alt="引发问题"></p>
<p>暂时对idea的git理解，有新的理解会更新</p>
<h2 id="10、配置自动提交"><a href="#10、配置自动提交" class="headerlink" title="10、配置自动提交"></a>10、配置自动提交</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>合作开发工具</category>
      </categories>
      <tags>
        <tag>-Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5新特性</title>
    <url>/2021/07/31/spring5%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Spring5新特性"><a href="#Spring5新特性" class="headerlink" title="Spring5新特性"></a>Spring5新特性</h1><h2 id="1、通过实现接口配置StringMVC的web-xml"><a href="#1、通过实现接口配置StringMVC的web-xml" class="headerlink" title="1、通过实现接口配置StringMVC的web.xml"></a>1、通过实现接口配置StringMVC的web.xml</h2><h3 id="第一步：导入包"><a href="#第一步：导入包" class="headerlink" title="第一步：导入包"></a>第一步：导入包</h3><ul>
<li>commons-logging-1.2.jar</li>
<li>spring-aop-5.2.13.RELEASE.jar</li>
<li>spring-aspects-5.2.13.RELEASE.jar</li>
<li>spring-beans-5.2.13.RELEASE.jar</li>
<li>spring-context-5.2.13.RELEASE.jar</li>
<li>spring-context-support-5.2.13.RELEASE.jar</li>
<li>spring-core-5.2.13.RELEASE.jar</li>
<li>spring-expression-5.2.13.RELEASE.jar</li>
<li>spring-jdbc-5.2.13.RELEASE.jar</li>
<li>spring-tx-5.2.13.RELEASE.jar</li>
<li>spring-web-5.2.13.RELEASE.jar</li>
<li>spring-webmvc-5.2.13.RELEASE.jar</li>
</ul>
<h3 id="第二步：实现接口WebApplicationInitializer"><a href="#第二步：实现接口WebApplicationInitializer" class="headerlink" title="第二步：实现接口WebApplicationInitializer"></a>第二步：实现接口WebApplicationInitializer</h3><p>重写onStartup方法</p>
<h3 id="第三步：写入代码"><a href="#第三步：写入代码" class="headerlink" title="第三步：写入代码"></a>第三步：写入代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册配置文件</span></span><br><span class="line">AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">context.register(AppConfig.class);</span><br><span class="line"><span class="comment">//将注册好的配置文件加载入DispatcherServlet</span></span><br><span class="line">DispatcherServlet servlet = <span class="keyword">new</span> DispatcherServlet(context);</span><br><span class="line"><span class="comment">//将配置文件加载入tomcat</span></span><br><span class="line">ServletRegistration.Dynamic registration = servletContext.addServlet(<span class="string">&quot;springmvc&quot;</span>, servlet);</span><br><span class="line"><span class="comment">//设置优先级</span></span><br><span class="line">registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">registration.addMapping(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="第四步：配置springMVC配置文件"><a href="#第四步：配置springMVC配置文件" class="headerlink" title="第四步：配置springMVC配置文件"></a>第四步：配置springMVC配置文件</h3><p>这是一个普通的配置springMVC,后面会有一个详细的零配置整合SSM</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例:AppConfig.java</span><br><span class="line"><span class="meta">@Configuration</span> 	<span class="comment">//标志为配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web&quot;)</span> <span class="comment">//扫描web包下的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置一个bean往里面注入值 类似于</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ViewResolver <span class="title">internalResourceViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置视图解析</span></span><br><span class="line">		InternalResourceViewResolver viewResolver=<span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">		viewResolver.setPrefix(<span class="string">&quot;/WEB-INF/views/&quot;</span>);</span><br><span class="line">		viewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> viewResolver;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、通过实现接口配置web-xml原理"><a href="#2、通过实现接口配置web-xml原理" class="headerlink" title="2、通过实现接口配置web.xml原理"></a>2、通过实现接口配置web.xml原理</h2><h3 id="1、分析"><a href="#1、分析" class="headerlink" title="1、分析"></a>1、分析</h3><p>1、tomcat在启动的时候会扫描所有jar下的*.jar\MATE-INF\services\javax.servlet.ServletContainerInitializer文件</p>
<p>2、进入javax.servlet.ServletContainerInitializer文件中的类</p>
<p>3、然后那个文件里面的类又实现了ServletContainerInitializer</p>
<p>3、根据servlet3.0的新特性，tomcat在启动的时候会获取@HandlesTypes(WebApplicationInitializer.class)注解值的所有实现类，注入onStartup方法中的Set集合中</p>
<p>4、然后调用onStartup方法，循环Set集合，判断实现类不能是接口，不能是抽象类</p>
<p>5、通过实现接口配置web.xml也实现了WebAPPlicationInitializer接口，所以就会在toncat启动就完成了</p>
<h3 id="2、通过自己写一个架包看结果"><a href="#2、通过自己写一个架包看结果" class="headerlink" title="2、通过自己写一个架包看结果"></a>2、通过自己写一个架包看结果</h3><p>1、创建java项目</p>
<p>2、在src下面创建META-INF目录</p>
<p>3、在META-INF目录下创建services目录</p>
<p>4、在services目录下创建file文件，文件名为javax.servlet.ServletContainerInitializer</p>
<p>5、创建一个包 servlet.newfeature（包名随意）</p>
<p>6、在包下创建一个接口 MyWebApplicationInitializer（接口名随意）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyWebApplicationInitializer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onStartup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、需要导入架包 servlet-api.jar</p>
<p>8、在包下创建一个类，实现接口，继承方法，并且在方法内随便输入语句，证明进来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializerImpl</span> <span class="keyword">implements</span> <span class="title">MyWebApplicationInitializer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;进入了MyWebApplicationInitializerImpl.onStartup&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9、在包下创建一个类myServlet（类名随便），实现ServletContainerInitializer，继承方法，并且加上注解                   @HandlesTypes(MyWebApplicationInitializer.class) 注解内是你的接口.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes(MyWebApplicationInitializer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myServlet</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; arg0, ServletContext arg1)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; class1 : arg0) &#123;</span><br><span class="line">            <span class="comment">//输出当前是哪个实体类</span></span><br><span class="line">			System.out.println(<span class="string">&quot;class1------&quot;</span>+class1);</span><br><span class="line">            <span class="comment">//调用实体类中的onStartup方法</span></span><br><span class="line">            Object newInstanse = class1.newInstance();</span><br><span class="line">			Method method = class1.getMethod(<span class="string">&quot;onStartup&quot;</span>, ServletContext.class);</span><br><span class="line">			method.invoke(newInstanse,servletContext);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>10、在javax.servlet.ServletContainerInitializer文件类输入第8步类的完整路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">servlet.newfeature.myServlet</span><br></pre></td></tr></table></figure>

<p>11、导出架包</p>
<p>eclipse：导出形成jar架包    右击项目选择Export，选择JAR file，进入后点击Browse…选择导入后的地址，命名，然后Finish结束</p>
<p>12、测试</p>
<p>将架包随便导入一个web项目，然后启动服务器则可以看到您输出的输出语句了</p>
<h2 id="3、通过注解配置SpringMVC"><a href="#3、通过注解配置SpringMVC" class="headerlink" title="3、通过注解配置SpringMVC"></a>3、通过注解配置SpringMVC</h2><h3 id="1、-Configuration注解的作用"><a href="#1、-Configuration注解的作用" class="headerlink" title="1、@Configuration注解的作用"></a>1、@Configuration注解的作用</h3><ul>
<li>从Spring3.0，@Configuration用于定义配置类，可替换xml配置文件</li>
<li>@Configuration注解的配置类有如下要求：<ol>
<li>@Configuration不可以是final类型；</li>
<li>@Configuration不可以是匿名类；</li>
<li>嵌套的configuration必须是静态类。</li>
</ol>
</li>
</ul>
<h3 id="2、-ComponentScan注解的作用"><a href="#2、-ComponentScan注解的作用" class="headerlink" title="2、@ComponentScan注解的作用"></a>2、@ComponentScan注解的作用</h3><ul>
<li>用于类或接口上主要是指定扫描路径，spring会把指定路径下带有指定注解的类自动装配到bean容器里。会被自动装配的注解包括@Controller、@Service、@Component、@Repository等</li>
<li>扫描单个包@ComponentScan(“web”)</li>
<li>扫多个包@ComponentScan({“web”,”text”})</li>
<li>等价于利用xml配置中的&lt;context:component-scan base-package=”controller” /&gt;</li>
</ul>
<h3 id="3、-EnableWebMvc"><a href="#3、-EnableWebMvc" class="headerlink" title="3、@EnableWebMvc"></a>3、@EnableWebMvc</h3><ul>
<li>暂时不了解</li>
<li>类似于&lt;mvc:annotation-driven /&gt;</li>
</ul>
<h3 id="4、实现接口-WebMvcConfigurer中的方法"><a href="#4、实现接口-WebMvcConfigurer中的方法" class="headerlink" title="4、实现接口 WebMvcConfigurer中的方法"></a>4、实现接口 WebMvcConfigurer中的方法</h3><p>重写里面的方法</p>
<h4 id="1、addViewControllers-视图跳转控制器"><a href="#1、addViewControllers-视图跳转控制器" class="headerlink" title="1、addViewControllers 视图跳转控制器"></a>1、addViewControllers 视图跳转控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addViewController(<span class="string">&quot;add&quot;</span>).setViewName(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于在springmvc.xml中配置&lt;mvc:view-controller path=”/add” view-name=”text”/&gt;</p>
<h4 id="2、addInterceptors-拦截器"><a href="#2、addInterceptors-拦截器" class="headerlink" title="2、addInterceptors  拦截器"></a>2、addInterceptors  拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.addInterceptor(<span class="keyword">new</span> TestInterceptor()).addPathPatterns(<span class="string">&quot;/*&quot;</span>).excludePathPatterns(<span class="string">&quot;/text&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/text&quot;</span> /&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;interceptor.TestInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、addResourceHandlers-静态资源"><a href="#3、addResourceHandlers-静态资源" class="headerlink" title="3、addResourceHandlers 静态资源"></a>3、addResourceHandlers 静态资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">	configurer.enable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、-RestController"><a href="#5、-RestController" class="headerlink" title="5、@RestController"></a>5、@RestController</h3><p>标识这是一个返回数据的控制器类，等于每个方法上都添加了个@ResponseBody注解</p>
<p>你点进这个注解则可以看到，这个注解上面添加了@Controller注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController222</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/text1111&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">text222</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;test22&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">json</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;id&quot;</span>, <span class="number">1001</span>);</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、-RequestHeaer注解"><a href="#6、-RequestHeaer注解" class="headerlink" title="6、@RequestHeaer注解"></a>6、@RequestHeaer注解</h3><p>可以获取浏览器内Request Headers中的内容，通过键值对获取</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-14_15-48-43.png" alt="Snipaste_2021-05-14_15-48-43"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/text1111&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">text222</span><span class="params">(<span class="meta">@RequestHeader(&quot;Sec-Fetch-Mode&quot;)</span> String s)</span> </span>&#123;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;test22&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、零配置整合SSM"><a href="#4、零配置整合SSM" class="headerlink" title="4、零配置整合SSM"></a>4、零配置整合SSM</h2><h3 id="1、导入需要的架包"><a href="#1、导入需要的架包" class="headerlink" title="1、导入需要的架包"></a>1、导入需要的架包</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-08_17-22-07.png" alt="架包"></p>
<h3 id="2、通过实现接口配置web-xml"><a href="#2、通过实现接口配置web-xml" class="headerlink" title="2、通过实现接口配置web.xml"></a>2、通过实现接口配置web.xml</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">结果</span><br><span class="line">   例：MyWebApplicationInitializer.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="comment">//注册配置文件</span></span><br><span class="line">		AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        context.register(AppConfig.class);</span><br><span class="line">        <span class="comment">//将注册好的配置文件加载入DispatcherServlet</span></span><br><span class="line">        DispatcherServlet servlet = <span class="keyword">new</span> DispatcherServlet(context);</span><br><span class="line">        <span class="comment">//将配置文件加载入tomcat</span></span><br><span class="line">        ServletRegistration.Dynamic registration = servletContext.addServlet(<span class="string">&quot;springmvc&quot;</span>, servlet);</span><br><span class="line">        <span class="comment">//设置优先级</span></span><br><span class="line">        registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registration.addMapping(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、通过实现接口WebMvcConfigurer配置springMVC-xml"><a href="#3、通过实现接口WebMvcConfigurer配置springMVC-xml" class="headerlink" title="3、通过实现接口WebMvcConfigurer配置springMVC.xml"></a>3、通过实现接口WebMvcConfigurer配置springMVC.xml</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>    <span class="comment">//标识这个是一个配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;config&quot;&#125;)</span>  <span class="comment">//扫描架包</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">//类似于&lt;mvc:annotation-driven /&gt;</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span> <span class="comment">//类似于&lt;import resource=&quot;&quot; /&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="comment">//配置视图解析器</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ViewResolver <span class="title">internalResourceViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		InternalResourceViewResolver viewResolver=<span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">		viewResolver.setPrefix(<span class="string">&quot;/WEB-INF/views/&quot;</span>);</span><br><span class="line">		viewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> viewResolver;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//视图跳转控制器</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输入add的时候，跳转到text.jsp</span></span><br><span class="line">		registry.addViewController(<span class="string">&quot;add&quot;</span>).setViewName(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拦截一级，除了请求text，其他的全部进TestInterceptor方法</span></span><br><span class="line">        <span class="comment">//http://localhost/Spirng5-validator/ 这个为最基本的根目录</span></span><br><span class="line">        <span class="comment">//则该拦截器只能拦截User/userListJson/User 这个层次，然后在后面继续/则不进行拦截</span></span><br><span class="line">        <span class="comment">//如果要拦截多级，则/**</span></span><br><span class="line">		registry.addInterceptor(<span class="keyword">new</span> TestInterceptor()).addPathPatterns(<span class="string">&quot;/*&quot;</span>).excludePathPatterns(<span class="string">&quot;/text&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个为最基本的springMVC配置，如果需要了解更多，请访问官网，本人在以后有时间了，则继续更新</p>
<h3 id="4、配置Spring核心配置文件"><a href="#4、配置Spring核心配置文件" class="headerlink" title="4、配置Spring核心配置文件"></a>4、配置Spring核心配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>	<span class="comment">//标识这个是一个配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;modules&quot;,&quot;config&quot;,&quot;text&quot;&#125;)</span> <span class="comment">// 扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span>  <span class="comment">//配置数据源</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(JdbcConfigProperties jdbcConfigProperties)</span> </span>&#123;</span><br><span class="line">		DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">		dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">		dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/user&quot;</span>);</span><br><span class="line">		dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">		dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//扫描xml,配置SqlSessionFactoryBean</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">		SqlSessionFactoryBean sessionFactoryBean=<span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">		sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Resource[] s= <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">&quot;classpath:/mapper/*.xml&quot;</span>);</span><br><span class="line">			sessionFactoryBean.setMapperLocations(s);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sessionFactoryBean;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*类似于xml中的这个配置，本人不太辽解，不好解释</span></span><br><span class="line"><span class="comment">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span></span><br><span class="line"><span class="comment">    	&lt;!-- 扫描dao层 --&gt;</span></span><br><span class="line"><span class="comment">    	&lt;property name=&quot;basePackage&quot; value=&quot;modules&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    	&lt;!-- 识别dao层接口的Repository注解 --&gt;</span></span><br><span class="line"><span class="comment">    	&lt;property name=&quot;annotationClass&quot; value=&quot;org.springframework.stereotype.Repository&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    	&lt;!-- 注入SqlSessionFactoryBean --&gt;</span></span><br><span class="line"><span class="comment">    	&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		MapperScannerConfigurer configurer=<span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">		configurer.setSqlSessionFactoryBeanName(<span class="string">&quot;sqlSessionFactoryBean&quot;</span>);</span><br><span class="line">		configurer.setBasePackage(<span class="string">&quot;modules&quot;</span>);</span><br><span class="line">		configurer.setAnnotationClass(Repository.class);</span><br><span class="line">		<span class="keyword">return</span> configurer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、其他配置则跟通过xml配置的一样，如果报错，请仔细检查包是否导入正确</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>-Spring5</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql</title>
    <url>/2021/07/31/mysql/</url>
    <content><![CDATA[<h1 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h1><h2 id="1、结构化查询语句分类"><a href="#1、结构化查询语句分类" class="headerlink" title="1、结构化查询语句分类"></a>1、结构化查询语句分类</h2><table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>DDL(数据定义语言)</td>
<td>定义和管理数据对象，如数据库，数据表等</td>
<td>CREATE、DROP、ALTER</td>
</tr>
<tr>
<td>DML(数据操作语言)</td>
<td>用于操作数据库对象中所包含的数据</td>
<td>INSERT、UPDATE、DELETE</td>
</tr>
<tr>
<td>DQL(数据查询语言)</td>
<td>用于查询数据库数据</td>
<td>SELECT</td>
</tr>
<tr>
<td>DCL(数据控制语言)</td>
<td>用来管理数据库的语言，包括管理权限及数据更改</td>
<td>GRANT、COMMIT、ROLLBACK</td>
</tr>
</tbody></table>
<h2 id="2、控制台操作数据库"><a href="#2、控制台操作数据库" class="headerlink" title="2、控制台操作数据库"></a>2、控制台操作数据库</h2><h3 id="1、进入数据库"><a href="#1、进入数据库" class="headerlink" title="1、进入数据库"></a>1、进入数据库</h3><p>1、mysql -uroot -p密码  进入数据库   显示密码<br>2、mysql -uroot -p 回车<br>密码  进入数据库   不显示密码</p>
<h3 id="2、数据库的基本操作"><a href="#2、数据库的基本操作" class="headerlink" title="2、数据库的基本操作"></a>2、数据库的基本操作</h3><p>exit  退出数据库  没进入数据库则关闭dos命令窗口<br>use 打开<br>\c  结束一条语句</p>
<p>修改密码：mysqladmin -u用户名 -p旧密码 password 新密码 </p>
<h4 id="1、库的基本操作"><a href="#1、库的基本操作" class="headerlink" title="1、库的基本操作"></a>1、库的基本操作</h4><p>创建库 create database  库名</p>
<p>查看所有的库  show databases; </p>
<p>删除库：drop database 库名;</p>
<p>查询当前使用的数据库  select database();</p>
<p>查看当前库的版本  select version();</p>
<p>进入库  use 库名;</p>
<p>查看库内的表  show tables</p>
<h4 id="2、表的基本操作"><a href="#2、表的基本操作" class="headerlink" title="2、表的基本操作"></a>2、表的基本操作</h4><p>创建表 create table 表名（表内的列及他的约束  (若多条则以逗号分割)）</p>
<p>DEFAULT ‘默认值’  设置默认值</p>
<p>查询该表的约束  desc 表名</p>
<p>修改表名  ALTER TABLE 旧表名  RENAME AS 新表名</p>
<p>删除表  DROP Table 表名</p>
<h4 id="3、字段的基本操作"><a href="#3、字段的基本操作" class="headerlink" title="3、字段的基本操作"></a>3、字段的基本操作</h4><p>增加字段  ALTER TABLE 表名  add  字段名  字段的属性</p>
<p>删除字段 Alter table 表名 drop  字段名</p>
<p>修改字段 ALTER TABLE 表名   MODIFY 字段名   列类型 [ 属性 ]   </p>
<p>修改字段名 ALTER TABLE 表名   CHANGE 旧字段名  新字段名   列类型 [ 属性】</p>
<h3 id="3、控制约束"><a href="#3、控制约束" class="headerlink" title="3、控制约束"></a>3、控制约束</h3><h4 id="1、增加主键约束"><a href="#1、增加主键约束" class="headerlink" title="1、增加主键约束"></a>1、增加主键约束</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add constraint  约束名 primary key  表名 （主键字段）;</span><br></pre></td></tr></table></figure>

<h4 id="2、删除主键约束"><a href="#2、删除主键约束" class="headerlink" title="2、删除主键约束"></a>2、删除主键约束</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter  table 表名 drop  primary key;</span><br></pre></td></tr></table></figure>

<p><strong>3、增加外键约束</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 从表 add  constraint  约束名 foreign   key   (从表外键字段)   references  主表  （主键字段）;</span><br></pre></td></tr></table></figure>

<p><strong>4、删除外键约束</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop  foreign  key  外键约束名;</span><br></pre></td></tr></table></figure>

<h3 id="4、数据库的CRUD"><a href="#4、数据库的CRUD" class="headerlink" title="4、数据库的CRUD"></a>4、数据库的CRUD</h3><h4 id="1、where条件子句"><a href="#1、where条件子句" class="headerlink" title="1、where条件子句"></a>1、where条件子句</h4><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt; 或 !=</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在某个范围之间</td>
</tr>
<tr>
<td>AND</td>
<td>并且</td>
</tr>
<tr>
<td>OR</td>
<td>或</td>
</tr>
<tr>
<td>in(2,4)</td>
<td>范围语句，当值等于2或3时</td>
</tr>
<tr>
<td>like</td>
<td>模糊查询，可以利用%号匹配0个或多个字符 例：id like ‘%2%’</td>
</tr>
</tbody></table>
<h4 id="2、添加数据"><a href="#2、添加数据" class="headerlink" title="2、添加数据"></a>2、添加数据</h4><p><strong>俩种语法：</strong></p>
<p>1、insert into  表名 Values (要增加的数据)         必须要全部属性都得输入，否则会报错</p>
<p>2、insert into  表名(选择要增加的数据) Values (要增加的数据）   </p>
<p>不能为空的必须要增加，否则会报错并且表名括号后面的数据要跟values后面的一一对应</p>
<h4 id="3、修改数据"><a href="#3、修改数据" class="headerlink" title="3、修改数据"></a>3、修改数据</h4><p>1、update 表名 set  要修改的列 =新数据     这样子是全部替换为新数据</p>
<p>2、update 表名  set 要修改的列（逗号分割）=新数据  where 条件语句  满足条件则替换</p>
<h4 id="4、删除数据"><a href="#4、删除数据" class="headerlink" title="4、删除数据"></a>4、删除数据</h4><p>1、delete from 表名  这样子则是删除所有的数据</p>
<p>2、delete from 表名 where 条件语句   根据条件语句删除</p>
<h4 id="5、查询数据"><a href="#5、查询数据" class="headerlink" title="5、查询数据"></a>5、查询数据</h4><h5 id="1、普通语法"><a href="#1、普通语法" class="headerlink" title="1、普通语法"></a>1、普通语法</h5><p>1、select * from 表名</p>
<p>2、select * from 表名 where 条件语句</p>
<p>3、查询结果的列重命名  select 查询的列(多个则以逗号分割)  as(也可以用空格代替) 新的名字  from 表名</p>
<h5 id="2、设置查询顺序"><a href="#2、设置查询顺序" class="headerlink" title="2、设置查询顺序"></a>2、设置查询顺序</h5><p>升序： select  表内的列 from 表 order by 表内的列 asc</p>
<p>降序： select  表内的列 from 表 order by 表内的列 desc</p>
<p>默认为升序</p>
<h5 id="3、统计函数"><a href="#3、统计函数" class="headerlink" title="3、统计函数"></a>3、统计函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>sum(字段)</td>
<td>求查询数据该字段的总和</td>
</tr>
<tr>
<td>max(字段)</td>
<td>求查询数据该字段的最大值</td>
</tr>
<tr>
<td>min(字段)</td>
<td>求查询数据该字段的最小值</td>
</tr>
<tr>
<td>avg(字段)</td>
<td>求查询数据该字段的平均值</td>
</tr>
<tr>
<td>count</td>
<td>求查询数据的总个数</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">select SUM(id) from student</span><br><span class="line">select max(id) from student</span><br><span class="line">select min(id) from student</span><br><span class="line">select avg(id) from student</span><br><span class="line">select count(0) from student</span><br></pre></td></tr></table></figure>

<h5 id="4、分组函数"><a href="#4、分组函数" class="headerlink" title="4、分组函数"></a>4、分组函数</h5><p>语法：select * from 表名 GROUP BY 字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：select * from student GROUP BY money</span><br></pre></td></tr></table></figure>

<h5 id="5、Having"><a href="#5、Having" class="headerlink" title="5、Having"></a>5、Having</h5><p>利用与分组后筛选</p>
<p>语法：select * from 表名 GROUP BY 字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：select * from student GROUP BY money Having money&gt;20</span><br></pre></td></tr></table></figure>

<h5 id="6、连接查询"><a href="#6、连接查询" class="headerlink" title="6、连接查询"></a>6、连接查询</h5><h6 id="1、内连接"><a href="#1、内连接" class="headerlink" title="1、内连接"></a>1、内连接</h6><p><strong>语法:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from 表1 join 表2 on 表1和表2的相同字段恒等式</span><br><span class="line">select * from 表1,表2 where 表1和表2的相同字段恒等式</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student join clazz on student.cid&#x3D;clazz.id</span><br><span class="line">select * from student,clazz where student.cid&#x3D;clazz.id</span><br></pre></td></tr></table></figure>

<h6 id="2、外连接"><a href="#2、外连接" class="headerlink" title="2、外连接"></a>2、外连接</h6><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from 表1 LEFT JOIN 表2 on 表1和表2的相同字段恒等式</span><br><span class="line">select * from 表1 RIGHT JOIN 表2 on 表1和表2的相同字段恒等式</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student LEFT JOIN class on student.class_id&#x3D;class.cid</span><br><span class="line">select * from student RIGHT JOIN class on student.class_id&#x3D;class.cid</span><br></pre></td></tr></table></figure>

<h6 id="3、子查询"><a href="#3、子查询" class="headerlink" title="3、子查询"></a>3、子查询</h6><p>在一个查询语句中又嵌套了另外一个查询语句，子查询必须包含在一个圆括号内</p>
<p>语法：select * from 表 where cj 条件字句 (子查询)</p>
<h5 id="7、limit-分页"><a href="#7、limit-分页" class="headerlink" title="7、limit 分页"></a>7、limit 分页</h5><p><strong>例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student LIMIT 2,3</span><br></pre></td></tr></table></figure>

<p>作用:下标从0开始，下标为2后取3个</p>
<h5 id="8、DISTINCT"><a href="#8、DISTINCT" class="headerlink" title="8、DISTINCT"></a>8、DISTINCT</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DISTINCT  去除重复</span><br></pre></td></tr></table></figure>

<p>多表查询时，有可能会有数据重复，这时候我们就要使用去除重复了，直接插入在select后面即可</p>
<h5 id="9、导入数据"><a href="#9、导入数据" class="headerlink" title="9、导入数据"></a>9、导入数据</h5><p><strong>作用：</strong>根据条件语句，将一个表内查询出来的数据添加到另外一个表内</p>
<p><strong>例:</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into xxx(字段) select StudentName from student;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>xxx(字段):要插入数据的表名（字段）</li>
<li>StudentName:要跟xxx(字段)一一对应，否则报错</li>
</ul>
<p>单行处理函数  ifnull(放可能为null 的数据)</p>
<p>查出来的第一个表  union 查出来的第二个表</p>
<h3 id="5、索引"><a href="#5、索引" class="headerlink" title="5、索引"></a>5、索引</h3><h4 id="1、唯一索引（unique）"><a href="#1、唯一索引（unique）" class="headerlink" title="1、唯一索引（unique）"></a>1、唯一索引（unique）</h4><p>作用：避免同一个表中某数据中的值重复</p>
<p>与主键适应的区别  主键索引只能有一个  唯一索引有多个</p>
<h4 id="2、常规索引（INDEX）"><a href="#2、常规索引（INDEX）" class="headerlink" title="2、常规索引（INDEX）"></a>2、常规索引（INDEX）</h4><p>作用：快速定位特定数据</p>
<p>注意：</p>
<p>index和key关键字都可设置常规索引</p>
<p>应加在查找条件的字段</p>
<p>不宜添加太多常规索引，影响数据的插入、删除和修改操作</p>
<h4 id="3、全文索引（FULLTEXT）"><a href="#3、全文索引（FULLTEXT）" class="headerlink" title="3、全文索引（FULLTEXT）"></a>3、全文索引（FULLTEXT）</h4><p><strong>作用：</strong>快速定位特定数据</p>
<p><strong>注意：</strong></p>
<ul>
<li>只能用于MyISAM类型的数据表</li>
<li>只能用于 CHAR 、 VARCHAR、TEXT数据列类型</li>
<li>适合大型数据集</li>
</ul>
<h4 id="4、建表后索引操作"><a href="#4、建表后索引操作" class="headerlink" title="4、建表后索引操作"></a>4、建表后索引操作</h4><p><strong>1、添加索引语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD  索引类型（数据列名）</span><br></pre></td></tr></table></figure>

<p><strong>2、删除索引</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP  INDEX 索引名 ON  表名</span><br><span class="line">ALTER TABLE 表名   DROP  INDEX  索引名</span><br><span class="line">ALTER TABLE 表名   DROP  PRIMARY KE</span><br></pre></td></tr></table></figure>

<p><strong>3、查看索引</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW  INDEX(或KEYS) FROM 表名</span><br></pre></td></tr></table></figure>

<h3 id="6、视图"><a href="#6、视图" class="headerlink" title="6、视图"></a>6、视图</h3><p><strong>1、增加视图语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW s视图名  AS（select 语句）</span><br></pre></td></tr></table></figure>

<p>**2、删除视图语法 ** </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP VIEW [IF EXISTS (判断)] 视图名;</span><br></pre></td></tr></table></figure>

<h3 id="7、函数"><a href="#7、函数" class="headerlink" title="7、函数"></a>7、函数</h3><h4 id="1、数字函数"><a href="#1、数字函数" class="headerlink" title="1、数字函数"></a>1、数字函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>abs(x)</td>
<td>返回x的绝对值</td>
</tr>
<tr>
<td>ceil(x)</td>
<td>返回大于等于x的最小整数   例：select ceil(1.5) 返回2</td>
</tr>
<tr>
<td>floor(x)</td>
<td>返回小于等于x的最大整数   例：select floor(1.)5 返回1</td>
</tr>
<tr>
<td>round(x)</td>
<td>四舍五入</td>
</tr>
<tr>
<td>rand(x)</td>
<td>返回0-1的随机数</td>
</tr>
<tr>
<td>mod(x,y)</td>
<td>返回x除以y的余数J</td>
</tr>
<tr>
<td>sqrt(x)</td>
<td>返回x的平方</td>
</tr>
<tr>
<td>pow(x,y)</td>
<td>返回x的y次方</td>
</tr>
<tr>
<td>format(x,n)</td>
<td>返回x的n位小数，若不是数字则输出0,n位小数</td>
</tr>
</tbody></table>
<h4 id="2、字符串函数"><a href="#2、字符串函数" class="headerlink" title="2、字符串函数"></a>2、字符串函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>char_length(s)</td>
<td>返回s的字符数</td>
</tr>
<tr>
<td>length(s)</td>
<td>返回s的字节数</td>
</tr>
<tr>
<td>concat(s1,s2…..)</td>
<td>将字符串s1,s2拼接</td>
</tr>
<tr>
<td>concat_ws(p,s1,s2…)</td>
<td>将字符串s1,s2拼接用p隔开</td>
</tr>
<tr>
<td>upper(s)</td>
<td>将字符串s转换为大写</td>
</tr>
<tr>
<td>lower(s)</td>
<td>将字符串s转换为为小写</td>
</tr>
<tr>
<td>LTRIM(s)</td>
<td>去除字符串s右边的空格</td>
</tr>
<tr>
<td>ririm(s)</td>
<td>去除字符串s右边的空格</td>
</tr>
<tr>
<td>trim(s)</td>
<td>去除字符串s左右的空格</td>
</tr>
<tr>
<td>substring(s,n)</td>
<td>从n开始输出字符串s 例:select substring(‘2545248’,3) 返回45248</td>
</tr>
<tr>
<td>substring(s,n,i)</td>
<td>从n开始输出字符串s的i个    例:select substring(‘2545248’,3,2) 返回45</td>
</tr>
<tr>
<td>replace(s,s1,s2)</td>
<td>从字符串s中找到s1用s2替换    例:select replace(‘ectd’,’e’,’c)  返回cctd   没找到则正常输出</td>
</tr>
</tbody></table>
<h4 id="3、日期函数"><a href="#3、日期函数" class="headerlink" title="3、日期函数"></a>3、日期函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>curdate()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>curtime()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>now()</td>
<td>返回当前日期时间</td>
</tr>
<tr>
<td>adddate(d,n)</td>
<td>返回日期d的n天后</td>
</tr>
<tr>
<td>adddate(d,interval n type)</td>
<td>返回日期d的n  type(时间类型)后</td>
</tr>
<tr>
<td>subdate(d,n)</td>
<td>返回日期d的n天前</td>
</tr>
<tr>
<td>subdate(n,interval type)</td>
<td>返回日期d的n  type(时间类型)前</td>
</tr>
<tr>
<td>date_format(d,f)</td>
<td>将日期根据fg</td>
</tr>
</tbody></table>
<h4 id="4、加密函数"><a href="#4、加密函数" class="headerlink" title="4、加密函数"></a>4、加密函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>password(str)</td>
<td>生成一个经过加密的字符串。</td>
</tr>
<tr>
<td>md5(str)</td>
<td>使用md5进行加密(128位)</td>
</tr>
<tr>
<td>SHA5()</td>
<td>使用SHA5进行加密(160位)</td>
</tr>
<tr>
<td>encode(str,key)</td>
<td>使用key对密码进行加密，可解密</td>
</tr>
<tr>
<td>decode(str,key)</td>
<td>使用key对密码进行解密。</td>
</tr>
</tbody></table>
<h4 id="5、定义函数"><a href="#5、定义函数" class="headerlink" title="5、定义函数"></a>5、定义函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION 函数名(参数)</span><br><span class="line">RETURNS 返回类型</span><br><span class="line">BEGIN</span><br><span class="line">	内容</span><br><span class="line">	return  返回结果</span><br><span class="line">END</span><br><span class="line">必须要返回值</span><br></pre></td></tr></table></figure>

<h4 id="6、删除自定义函数"><a href="#6、删除自定义函数" class="headerlink" title="6、删除自定义函数"></a>6、删除自定义函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP FUNCTION 函数名;</span><br></pre></td></tr></table></figure>

<h3 id="8、流程控制语句"><a href="#8、流程控制语句" class="headerlink" title="8、流程控制语句"></a>8、流程控制语句</h3><h4 id="1、if语句"><a href="#1、if语句" class="headerlink" title="1、if语句"></a>1、if语句</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IF 条件 then set  jg&#x3D;(赋值);</span><br><span class="line">elseif 条件 then set jg&#x3D;(赋值);</span><br><span class="line">else set jg&#x3D;(赋值);</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IF cj&gt;&#x3D;90 then set  jg&#x3D;&#39;优秀&#39;;</span><br><span class="line">elseif cj&gt;&#x3D;70 then set jg&#x3D;’良好‘;</span><br><span class="line">else set jg&#x3D;&#39;一般&#39;;</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure>

<h4 id="2、case-语句"><a href="#2、case-语句" class="headerlink" title="2、case 语句"></a>2、case 语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case</span><br><span class="line">when 条件 then set jg&#x3D;&#39;优秀&#39;(赋值);</span><br><span class="line">when 条件 then set jg&#x3D;&#39;一般&#39;(赋值);</span><br><span class="line">......;</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure>

<p>若输出的要求case语句内没有的话,则会报错</p>
<h4 id="3、loop语句"><a href="#3、loop语句" class="headerlink" title="3、loop语句"></a>3、loop语句</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">循环名字:loop</span><br><span class="line">内容</span><br><span class="line">end loop 循环名字</span><br><span class="line">可以没有循环名字</span><br></pre></td></tr></table></figure>

<p>leaven 循环名字  用来结束循环   必须要循环名字才可以结束<br>iterate 循环名字  跳过一次循环    必须要循环名字才可以结束</p>
<h4 id="4、reprat-语句"><a href="#4、reprat-语句" class="headerlink" title="4、reprat 语句"></a>4、reprat 语句</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">循环名字 repeat</span><br><span class="line">	内容;</span><br><span class="line">	unril 结束条件</span><br><span class="line">end reprat;</span><br></pre></td></tr></table></figure>

<h4 id="5、while语句"><a href="#5、while语句" class="headerlink" title="5、while语句"></a>5、while语句</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 循环条件 do </span><br><span class="line">内容 ;  当条件成立则运行内容</span><br><span class="line">end while</span><br></pre></td></tr></table></figure>

<h3 id="9、存储过程"><a href="#9、存储过程" class="headerlink" title="9、存储过程"></a>9、存储过程</h3><p><strong>创建存储过程语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE 名字(参数) </span><br><span class="line">BEGIN</span><br><span class="line">	存储过程主体</span><br><span class="line">END </span><br></pre></td></tr></table></figure>

<p><strong>运行存储过程语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call 存储名</span><br></pre></td></tr></table></figure>

<p>存储过程没有返回值，但是我们可以通过参数的方式返回结果，存储过程提供了三种参数类型。</p>
<ul>
<li>IN：输入参数（默认），表示调用时必须制定参数。</li>
<li>OUT：输出参数，表示在存储过程中可以改变，并且可以返回。</li>
<li>INOUT：输入输出参数：表示可以在调用时传递参数，并在存储过程中改变并返回。</li>
</ul>
<p><strong>删除存储过程语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP PROCEDURE 过程名</span><br></pre></td></tr></table></figure>

<h3 id="10、异常"><a href="#10、异常" class="headerlink" title="10、异常"></a>10、异常</h3><h4 id="1、异常处理"><a href="#1、异常处理" class="headerlink" title="1、异常处理"></a>1、异常处理</h4><p><strong>语法:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare 处理方式 handler for 错误代码（或一个标准的sql值）异常处理块</span><br><span class="line">处理方式continue  遇到错误不处理，继续执行</span><br><span class="line">exit 遇到错误马上退出</span><br><span class="line">undo 遇到错误则回滚  mysql暂时不支持</span><br></pre></td></tr></table></figure>

<h4 id="2、命名异常"><a href="#2、命名异常" class="headerlink" title="2、命名异常"></a>2、命名异常</h4><p><strong>语法:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare 异常名称 condition for 条件类型</span><br></pre></td></tr></table></figure>

<h3 id="11、触发器"><a href="#11、触发器" class="headerlink" title="11、触发器"></a>11、触发器</h3><p><strong>1、创建触发器语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger 触发器名称 触发时机  通过什么触发</span><br><span class="line">on 在那张表增加数据</span><br><span class="line">for each row sql语句</span><br></pre></td></tr></table></figure>

<p><strong>2、触发器类型     NEW和OLD的使用</strong></p>
<ul>
<li>INSERT    NEW表示新增的数据。OLD在INSERT中不存在。</li>
<li>UPDATE    OLD表示原始表的数据，NEW表示将要更新的数据。</li>
<li>DELETE    OLD表示原始表的数据。NEW在DELETE中不存在。</li>
</ul>
<p><strong>3、查看触发器语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure>

<p><strong>4、删除触发器语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop trigger 触发器名</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>-MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云</title>
    <url>/2021/07/31/%E8%85%BE%E8%AE%AF%E4%BA%91/</url>
    <content><![CDATA[<h1 id="1、上传至腾讯云"><a href="#1、上传至腾讯云" class="headerlink" title="1、上传至腾讯云"></a>1、上传至腾讯云</h1><h2 id="1、导入包"><a href="#1、导入包" class="headerlink" title="1、导入包"></a>1、导入包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--腾讯云存储依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cos_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、配置yml"><a href="#2、配置yml" class="headerlink" title="2、配置yml"></a>2、配置yml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">tengxun:</span></span><br><span class="line">    <span class="attr">accessKey:</span>     <span class="comment">#访问秘钥 SecretId</span></span><br><span class="line">    <span class="attr">secretKey:</span> 		   <span class="comment">#访问秘钥 SecretKey</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">ap-shenzhen-fsi</span>		<span class="comment">#存储桶地址 我的是深圳金融</span></span><br><span class="line">    <span class="attr">bucketName:</span> <span class="string">guao-1305634158</span>	<span class="comment">#存储桶名</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">https://guao-158.cos.ap-shenzhen-fsi.myqcloud.com</span>  <span class="comment">#访问域名</span></span><br><span class="line">    <span class="attr">qianzhui:</span> <span class="string">image</span>		<span class="comment">#前缀</span></span><br></pre></td></tr></table></figure>

<p>秘钥获取地址：<a href="https://console.cloud.tencent.com/cam/capi">访问密钥 - 控制台 (tencent.com)</a></p>
<h2 id="3、实现代码"><a href="#3、实现代码" class="headerlink" title="3、实现代码"></a>3、实现代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qcloud.cos.COSClient;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.ClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.BasicCOSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.COSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.region.Region;</span><br><span class="line"><span class="keyword">import</span> com.znsd.ecommerce.api.model.Content;</span><br><span class="line"><span class="keyword">import</span> com.znsd.ecommerce.api.utli.BaseResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.tengxun.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.tengxun.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.tengxun.bucket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.tengxun.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.tengxun.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.tengxun.qianzhui&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qianzhui;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/tengxun&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Content <span class="title">Upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> BaseResult.error(<span class="string">&quot;文件为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String oldFileName = file.getOriginalFilename();</span><br><span class="line">        String eName = oldFileName.substring(oldFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        String newFileName = UUID.randomUUID() + eName;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = cal.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> day = cal.get(Calendar.DATE);</span><br><span class="line">        <span class="comment">// 1 初始化用户身份信息(secretId, secretKey)</span></span><br><span class="line">        COSCredentials cred = <span class="keyword">new</span> BasicCOSCredentials(accessKey, secretKey);</span><br><span class="line">        <span class="comment">// 2 设置bucket的区域, COS地域的简称请参照 https://cloud.tencent.com/document/product/436/6224</span></span><br><span class="line">        ClientConfig clientConfig = <span class="keyword">new</span> ClientConfig(<span class="keyword">new</span> Region(bucket));</span><br><span class="line">        <span class="comment">// 3 生成cos客户端</span></span><br><span class="line">        COSClient cosclient = <span class="keyword">new</span> COSClient(cred, clientConfig);</span><br><span class="line">        <span class="comment">// bucket的命名规则为&#123;name&#125;-&#123;appid&#125; ，此处填写的存储桶名称必须为此格式</span></span><br><span class="line">        String bucketName = <span class="keyword">this</span>.bucketName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单文件上传, 最大支持 5 GB, 适用于小文件上传, 建议 20 M 以下的文件使用该接口</span></span><br><span class="line">        <span class="comment">// 大文件上传请参照 API 文档高级 API 上传</span></span><br><span class="line">        File localFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            localFile = File.createTempFile(<span class="string">&quot;temp&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">            file.transferTo(localFile);</span><br><span class="line">            <span class="comment">// 指定要上传到 COS 上的路径</span></span><br><span class="line">            String key = <span class="string">&quot;/&quot;</span> + <span class="keyword">this</span>.qianzhui + <span class="string">&quot;/&quot;</span> + year + <span class="string">&quot;/&quot;</span> + month + <span class="string">&quot;/&quot;</span> + day + <span class="string">&quot;/&quot;</span> + newFileName;</span><br><span class="line">            PutObjectRequest putObjectRequest = <span class="keyword">new</span> PutObjectRequest(bucketName, key, localFile);</span><br><span class="line">            PutObjectResult putObjectResult = cosclient.putObject(putObjectRequest);</span><br><span class="line">            <span class="keyword">return</span> BaseResult.success(<span class="string">&quot;上传成功&quot;</span>, <span class="keyword">this</span>.path+putObjectRequest.getKey().toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> BaseResult.error(<span class="string">&quot;上传失败，异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭客户端(关闭后台线程)</span></span><br><span class="line">            cosclient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadMsg</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> status;</span><br><span class="line">        <span class="keyword">public</span> String msg;</span><br><span class="line">        <span class="keyword">public</span> String path;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UploadMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UploadMsg</span><span class="params">(<span class="keyword">int</span> status, String msg, String path)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">            <span class="keyword">this</span>.msg = msg;</span><br><span class="line">            <span class="keyword">this</span>.path = path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：BaseResult.success()为自己写的统一返回方法</p>
<h1 id="2、实现短信发送"><a href="#2、实现短信发送" class="headerlink" title="2、实现短信发送"></a>2、实现短信发送</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--腾讯云短信发送需要包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.qcloudsms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qcloudsms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMS</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成6位验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 6位验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandomCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; code; i++) &#123;</span><br><span class="line">            result.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">tenSendMsg</span><span class="params">(String phone,String code)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 短信应用 SDK AppID</span></span><br><span class="line">        <span class="keyword">int</span> appid = <span class="number">1400549217</span>; <span class="comment">// SDK AppID 以1400开头</span></span><br><span class="line">        <span class="comment">// 短信应用 SDK AppKey</span></span><br><span class="line">        String appkey = <span class="string">&quot;d8d3eb7e5db6d42895da&quot;</span>;  <span class="comment">//修改为自己手机发送接口</span></span><br><span class="line">        <span class="comment">// 需要发送短信的手机号码</span></span><br><span class="line">        String[] phoneNumbers = &#123;phone&#125;;</span><br><span class="line">        <span class="comment">// 短信模板 ID，需要在短信应用中申请</span></span><br><span class="line">        <span class="keyword">int</span> templateId = <span class="number">1039299</span>; <span class="comment">// <span class="doctag">NOTE:</span> 这里的模板 ID`7839`只是示例，真实的模板 ID 需要在短信控制台中申请</span></span><br><span class="line">        <span class="comment">// 签名</span></span><br><span class="line">        String smsSign = <span class="string">&quot;codeliufeng&quot;</span>; <span class="comment">// <span class="doctag">NOTE:</span> 签名参数使用的是`签名内容`，而不是`签名ID`。这里的签名&quot;腾讯云&quot;只是示例，真实的签名需要在短信控制台申请</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] params = &#123;code,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">            SmsSingleSender ssender = <span class="keyword">new</span> SmsSingleSender(appid, appkey);</span><br><span class="line">            SmsSingleSenderResult result = ssender.sendWithParam(<span class="string">&quot;86&quot;</span>, phoneNumbers[<span class="number">0</span>],</span><br><span class="line">                    templateId, params, smsSign, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result.errMsg;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HTTPException | com.github.qcloudsms.httpclient.HTTPException | IOException e) &#123;</span><br><span class="line">            <span class="comment">// HTTP 响应码错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>-腾讯云</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2021/07/31/Mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>环境要一致<br>框架：配置文件的，最好 </p>
<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1、什么是MyBatis"><a href="#1、什么是MyBatis" class="headerlink" title="1、什么是MyBatis"></a>1、什么是MyBatis</h3><p>1、MyBatis是一筐优秀的持久成框架<br>2、它支持定制化SQL、存储过程以及高级映射<br>3、MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集<br>4、MyBatis可以使用简单的XML或注解来配置和映射原生类型、接口和java的POJO(Plain Old java Object,普通老式java对象)为数据库中的记录<br>5、MyBatis本是apache的一个开源项目iBatis,2010年这个项目由apache software foundation迁移到了google code,并且改名为MyBatis<br>6、2013年11月迁移达到Github</p>
<h3 id="2、持久化"><a href="#2、持久化" class="headerlink" title="2、持久化"></a>2、持久化</h3><p>数据持久化<br>    持久化就是将程序的数据都在持久状态和瞬时状态转化的过程<br>    持久状态：放到数据库，不删除数据库一直存在<br>    瞬时状态：断电就丢失</p>
<h3 id="3、持久层"><a href="#3、持久层" class="headerlink" title="3、持久层"></a>3、持久层</h3><p>完成持久化工作对的代码块<br>层界限十分明显</p>
<h3 id="4、为什么需要MyBatis"><a href="#4、为什么需要MyBatis" class="headerlink" title="4、为什么需要MyBatis"></a>4、为什么需要MyBatis</h3><p>1、方便<br>2、传统的JDBC代码太复杂了。简化 框架 自动化<br>3、帮助程序员将数据存入数据库</p>
<h2 id="2、使用Mybits查询"><a href="#2、使用Mybits查询" class="headerlink" title="2、使用Mybits查询"></a>2、使用Mybits查询</h2><p><strong>例：config.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 核心配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- default选择默认环境，也就是 environment中的id值 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;guao&quot;</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;guao&quot;</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  			<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  				useSSL=true  设置安全连接</span></span><br><span class="line"><span class="comment">  				&amp;emp; 转义后为 &amp;</span></span><br><span class="line"><span class="comment">  				useUnicode=true 使用unicode编码</span></span><br><span class="line"><span class="comment">  				characterEncoding=UTF-8 设置编码格式</span></span><br><span class="line"><span class="comment">  			 --&gt;</span></span><br><span class="line">  				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">  				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mygrade?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">  				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">  				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">  			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">&lt;!-- 引入CRUD的xml --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/Student.xml&quot;</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1、方法一"><a href="#1、方法一" class="headerlink" title="1、方法一"></a>1、方法一</h3><p><strong>例：Student.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ss&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType的值为返回对的类型 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;StuQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Student&quot;</span>&gt;</span></span><br><span class="line">		select * from student</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		InputStream in = Resources.getResourceAsStream(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		<span class="comment">//自动提交</span></span><br><span class="line">		SqlSession session = factory.openSession(<span class="keyword">true</span>);</span><br><span class="line">		List&lt;Student&gt; list = session.selectList(<span class="string">&quot;StuQuery&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">			System.out.println(student);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		session.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、方法二"><a href="#2、方法二" class="headerlink" title="2、方法二"></a>2、方法二</h3><p><strong>例：Student.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;service.User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType的值为返回对的类型 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Student&quot;</span>&gt;</span></span><br><span class="line">		select * from student</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>例：User.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意！！！！</strong><br>    Student.xml中的namespace=的值为User.java接口的地址<br>    User.java里面的类名必须姚和Student.xml对的id一一对应，否则会找不到</p>
<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">//自动提交</span></span><br><span class="line">    SqlSession session = factory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    User a = session.getMapper(User.class);</span><br><span class="line">    List&lt;Student&gt; list = a.getUserList();</span><br><span class="line">    <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();<span class="comment">//关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、配置解析"><a href="#3、配置解析" class="headerlink" title="3、配置解析"></a>3、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><p>核心配置文件通常命名为：mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">conflguration(标签)</span><br><span class="line">	properties(属性)</span><br><span class="line">	settings(设置)</span><br><span class="line">	typeAliases(设置别名)</span><br><span class="line">	typeHandles(类型处理器)</span><br><span class="line">	objectFactory(对象工厂)</span><br><span class="line">	plugins(插件)</span><br><span class="line">	</span><br><span class="line">	environments(环境配置)</span><br><span class="line">		environment(环境变量)</span><br><span class="line">			transactionManager(事务过滤器)</span><br><span class="line">			ddataSource(数据源)</span><br><span class="line">	databaseldProvlder(数据库厂商标识)</span><br><span class="line">	mappers(映射器)</span><br><span class="line">必须要按照这个顺序来，否则会报错</span><br></pre></td></tr></table></figure>

<h3 id="2、environments-环境配置"><a href="#2、environments-环境配置" class="headerlink" title="2、environments(环境配置)"></a>2、environments(环境配置)</h3><p>Mybatis 可以配置多种环境<br>注：虽然可以多种，但是只能实例化一种<br>Mybatis默认的事务管理器JDBC，连接池：POOLED</p>
<h3 id="3、properties-属性"><a href="#3、properties-属性" class="headerlink" title="3、properties(属性)"></a>3、properties(属性)</h3><p>基本上用于引入外部配置文件来连接数据源</p>
<p><strong>配置：jdbc.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/school</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">pass</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<p><strong>方法一</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--也可以在里面配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>但是优先调用外部引入的配置文件键</strong></p>
<p><strong>引入后：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;guao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;guao&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;pass&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、typeAliases-设置别名"><a href="#4、typeAliases-设置别名" class="headerlink" title="4、typeAliases(设置别名)"></a>4、typeAliases(设置别名)</h3><p>给java类型设置一个短的名字</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vo.Student&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意！！！！</strong><br>    若不写alias指定别名，则默认最后面的路径为别名，不区分大小写</p>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;vo.Student&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可以根据注释来设置别名，在类上添加@Alias(“别名”)</p>
<p>则该别名为student</p>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;stu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、生命周期"><a href="#5、生命周期" class="headerlink" title="5、生命周期"></a>5、生命周期</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-04-24_21-05-17.png" alt="生命周期"></p>
<p>生命周期和作用域，是最关主要的，因为错误的使用辉导致严重的并发问题</p>
<p><strong>SqlSessionFactioryBuilder</strong></p>
<p>​    一旦创建了SqlSessionFactory,就不需要创建了</p>
<p>​    局部变量</p>
<p><strong>SqlSessionFactory</strong></p>
<p>​    数据库连接池</p>
<p>​    一旦被穿件则运行期一直存在，没办法丢弃或重新创建</p>
<p>​    因此最佳作用域是应用作用域，最简单对的使用单例模式或者静态单例模式</p>
<p><strong>SqlSession</strong></p>
<p>​    连接连接池的一个请求    </p>
<p>​    SqlSession的实例不是线程安全，因此不能被共享，最佳作用域是请求或方法作用域</p>
<p>​    用完后关闭，否则浪费资源</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-04-25_18-26-19.png"></p>
<p>里面每一个Mapper就代表一个具体的业务</p>
<h2 id="4、解决属性名与字段名不一致"><a href="#4、解决属性名与字段名不一致" class="headerlink" title="4、解决属性名与字段名不一致"></a>4、解决属性名与字段名不一致</h2><p>例 :</p>
<ul>
<li><p>数据库字段 sid sname</p>
</li>
<li><p>属性字段 id name</p>
<p> 字段名不一样，数据库则找不到对应的属性，所以会造成数据找出来，但没赋值进去</p>
</li>
</ul>
<h3 id="1、解决方法一"><a href="#1、解决方法一" class="headerlink" title="1、解决方法一"></a>1、解决方法一</h3><p>修改sql语句</p>
<p><strong>例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sid id,sname,name <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>

<p>但是我们往往不推荐修改sql语句</p>
<h3 id="2、解决方法二"><a href="#2、解决方法二" class="headerlink" title="2、解决方法二"></a>2、解决方法二</h3><p><strong>用xml中的标签</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;类型&quot;</span> <span class="attr">id</span>=<span class="string">&quot;命名&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;数据库字段&quot;</span> <span class="attr">property</span>=<span class="string">&quot;属性字段&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并且把sql语句中的resultType改为resultMap值为对应的resultMap的id属性<br>只需要映射不一样的就行了</p>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;service.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType的值为返回对的类型 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">		select * from student</span><br><span class="line">	&lt;/select</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>resultMap元素是MyBatis中最强大的元素</p>
<p>ResultMap的设计思路是，对于简单的语句根本不需要配置式的结果映射，而对于复杂一点的语句只需要描述他们的关系即可</p>
<h2 id="5、日志"><a href="#5、日志" class="headerlink" title="5、日志"></a>5、日志</h2><h3 id="1、日志工厂"><a href="#1、日志工厂" class="headerlink" title="1、日志工厂"></a>1、日志工厂</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-04-25_19-12-04.png" alt="img"></p>
<ul>
<li><p>SLF4J</p>
</li>
<li><p>LOG4J 【掌握】</p>
</li>
<li><p>LOG4J2</p>
</li>
<li><p>JK_LOGGING</p>
</li>
<li><p>COMMONS_lOGGING</p>
</li>
<li><p>STDOUT_lOGGING 【掌握】</p>
</li>
<li><p>NO_LOGGING</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
</li>
</ul>
<p>在mybatis_config配置<br><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>注！！！</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span>使用这个，必需一模一样，否则报错</span><br></pre></td></tr></table></figure>

<h3 id="2、Log4j"><a href="#2、Log4j" class="headerlink" title="2、Log4j"></a>2、Log4j</h3><ul>
<li><p>Log4j是Apache的一个开源项目，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</p>
</li>
<li><p>通过定义每一条日志信息的几倍，我们能够更细致的控制生成过程</p>
</li>
<li><p>通过一个配置文件来灵活的进行配置，不需要修改原来的代码</p>
<ol>
<li><p>先导入log4j的包</p>
</li>
<li><p>在src路径下创建log4j.properties  内容为</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug,Console,file</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout  </span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/guao.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d(yy-MM-dd)][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.PreparedStatement</span>=<span class="string">DEBUG</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在mybatis.xml中配置log4j为日志实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="6、使用注解开发"><a href="#6、使用注解开发" class="headerlink" title="6、使用注解开发"></a>6、使用注解开发</h2><p>我们通常可以把简单的sql语句用注解打在方法上用于简便我们的代码结构，过于复杂的sql语句，我们还是写与xml中</p>
<p>使用方法</p>
<ol>
<li><p>在接口的方法上添加sql语句注解</p>
<ul>
<li>@Insert     添加注解</li>
<li>@Select     查询注解</li>
<li>@Delete    删除注解</li>
<li>@Update   修改注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Select(&quot;select * from student&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在mybatis.xml中添加扫描该接口xml语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;service.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其他跟以前的一致</p>
</li>
<li><p>如果需要根据指定值查询则</p>
<p>1、sql语句通过#{参数}获取，方法参数必须要跟#{参数}一致</p>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from student where sid=#&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getUserList</span><span class="params">(<span class="keyword">int</span> sid)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、通过使用注解@@Param，类似于取别名</p>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from student where sid=#&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getUserList</span><span class="params">(<span class="meta">@Param(&quot;sid&quot;)</span> <span class="keyword">int</span> s)</span></span>;</span><br></pre></td></tr></table></figure>

<p>3、也可以使用属性类，根据属性类的属性，</p>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from student where sid=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getUserList</span><span class="params">(Student stu)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7、设置自动提交"><a href="#7、设置自动提交" class="headerlink" title="7、设置自动提交"></a>7、设置自动提交</h2><p>在需要执行sql语句时候，增加以下这段代码，则会自动提交</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = factory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="8、复杂的sql语句"><a href="#8、复杂的sql语句" class="headerlink" title="8、复杂的sql语句"></a>8、复杂的sql语句</h2><p>复杂的属性，我们需要单独处理</p>
<h3 id="1、多对一"><a href="#1、多对一" class="headerlink" title="1、多对一"></a>1、多对一</h3><p>例：根据学生查出班级（根据学生的tid ，查出班级）</p>
<h4 id="方法一：查询时嵌套"><a href="#方法一：查询时嵌套" class="headerlink" title="方法一：查询时嵌套"></a>方法一：查询时嵌套</h4><p><strong>例：vo.Student</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String sname;</span><br><span class="line">	<span class="keyword">private</span> String gender;</span><br><span class="line">	<span class="keyword">private</span> Clazz clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例：vo.Clazz</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">	<span class="keyword">private</span> String caption;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例：student.xml</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;service.User&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;vo.Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;UserClass&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;vo.Clazz&quot;</span>  &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;caption&quot;</span> <span class="attr">column</span>=<span class="string">&quot;caption&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;UserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserClass&quot;</span>&gt;</span></span><br><span class="line">		select * from student,class where student.class_id=class.cid</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>column为数据库字段</li>
<li>property为属性类字段</li>
</ul>
<p> <strong>例：测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">&quot;mybatis_config.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">//自动提交</span></span><br><span class="line">    SqlSession session = factory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    User a = session.getMapper(User.class);</span><br><span class="line">    List&lt;Student&gt; list = a.UserList(); </span><br><span class="line">    <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">        System.out.println(student); </span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法二：查询结果嵌套"><a href="#方法二：查询结果嵌套" class="headerlink" title="方法二：查询结果嵌套"></a>方法二：查询结果嵌套</h4><p>属性类跟上面一致</p>
<p>**例：student.xml **</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;vo.Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;UserClass&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;vo.Clazz&quot;</span>  &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;caption&quot;</span> <span class="attr">column</span>=<span class="string">&quot;caption&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;UserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserClass&quot;</span>&gt;</span></span><br><span class="line">	select * from student,class where student.class_id=class.cid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、一对多"><a href="#2、一对多" class="headerlink" title="2、一对多"></a>2、一对多</h3><p>例：一个班级有多个学生</p>
<h4 id="方法一、查询时嵌套"><a href="#方法一、查询时嵌套" class="headerlink" title="方法一、查询时嵌套"></a>方法一、查询时嵌套</h4><p><strong>例：clazz.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">clazz</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String caption;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置clazz.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;vo.Clazz&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ClassMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;caption&quot;</span> <span class="attr">column</span>=<span class="string">&quot;caption&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 班级类中添加学生类的集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;vo.Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">select</span>=<span class="string">&quot;clazz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectClazzAll2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ClassMap&quot;</span>&gt;</span></span><br><span class="line">        select * from class</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Stuent&quot;</span>&gt;</span></span><br><span class="line">        select * from student where class_id=#&#123;cid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方法二：结果嵌套查询"><a href="#方法二：结果嵌套查询" class="headerlink" title="方法二：结果嵌套查询"></a>方法二：结果嵌套查询</h4><p><strong>配置clazz.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;service.Clazzl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;vo.Clazz&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ClassMap&quot;</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;caption&quot;</span> <span class="attr">column</span>=<span class="string">&quot;caption&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--集合中使用泛值，则使用ofType--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;vo.Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getClazz&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ClassMap&quot;</span>&gt;</span></span><br><span class="line">		select * from Class c left join Student s on c.cid = s.class_id</span><br><span class="line">        <span class="comment">&lt;!--这sql可以查出空学生的班级--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			select * from class,student where class.cid=student.class_id</span></span><br><span class="line"><span class="comment">			这sql不能查出没有学生的班级</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h4><p>1、关联-association【多对一】</p>
<p>2、集合-collection【一对多】</p>
<p>3、javaType &amp; ofType</p>
<p>​    1、javaType 用来指定实体类中额属性类型</p>
<p>​    2、ofType用来指定映射到集合中的pojo类型，泛型中的约定类型</p>
<p>注意：</p>
<p>1、保证sql语句通俗易懂</p>
<h2 id="9、动态sql"><a href="#9、动态sql" class="headerlink" title="9、动态sql"></a>9、动态sql</h2><h3 id="1、IF"><a href="#1、IF" class="headerlink" title="1、IF"></a>1、IF</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xml配置</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">        and sid=#&#123;id&#125;</span><br><span class="line">        <span class="comment">&lt;!--id为Student中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>接口配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getList</span><span class="params">(Student stu)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="2、where"><a href="#2、where" class="headerlink" title="2、where"></a>2、where</h3><p>如果不用这个表情，那么我们使用动态sql查询的时候，必须要添加where 1=1</p>
<p>当我们加上where，当条件不成立，则会自动去除where,而且where还会判断是否是第一个条件，是则会自动去除and</p>
<p><strong>简便后：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">            and sid=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、choose"><a href="#3、choose" class="headerlink" title="3、choose"></a>3、choose</h3><p>choose内有俩个子标签when跟otherwise，</p>
<p>when标签，当执行成功一个，则不会再执行下一个</p>
<p>otherrwise标签，当前面的条件都不成立，则运行</p>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">                and sid=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sname!=null&quot;</span>&gt;</span></span><br><span class="line">                and sname==#&#123;sname&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and gender=#&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、set"><a href="#4、set" class="headerlink" title="4、set"></a>4、set</h3><p>set通常用于修改，会帮我们去除无关紧要的逗号</p>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setStudent&quot;</span> &gt;</span></span><br><span class="line">    update student </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname!=null&quot;</span>&gt;</span></span><br><span class="line">            sname=#&#123;sname&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">            sid=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、sql"><a href="#5、sql" class="headerlink" title="5、sql"></a>5、sql</h3><p>提取出来公共的部分</p>
<p>使用include连接起来，可以让大部分的sql重用，不要添加where，尽量有if判断就差不多了</p>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;select&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">                and sid=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sname!=null&quot;</span>&gt;</span></span><br><span class="line">                and sname==#&#123;sname&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and gender=#&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、foreach"><a href="#6、foreach" class="headerlink" title="6、foreach"></a>6、foreach</h3><p>当我们要根据多个id，姓名查询时，我们会用到foreach</p>
<ul>
<li>collection的值为遍历的集合</li>
<li>item的值为遍历集合之后的id</li>
<li>open的值为以什么开始</li>
<li>close的值为以什么结束</li>
<li>separator的值为分隔符</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;studentForeach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            sid=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：当使用foreach时，where不会自动2省略and，我暂时也不知道为什么</p>
<h2 id="10、缓存"><a href="#10、缓存" class="headerlink" title="10、缓存"></a>10、缓存</h2><h3 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h3><p><strong>概念</strong>：存在内存中的临时数据，将经常查询的数据放在缓存中，用户查询数据这就不用在数据库查询，从缓存中查询，从而提高查询效率，解决高并发系统的性能问题。</p>
<p><strong>优点</strong>：减少和数据库的交互次数，减少系统开销，提高系统效率</p>
<p><strong>常用地方</strong>：经常查询并不经常改变的数据</p>
<h3 id="2、MyBatis缓存"><a href="#2、MyBatis缓存" class="headerlink" title="2、MyBatis缓存"></a>2、MyBatis缓存</h3><ul>
<li>MyBatis包含一个非常强大的查询缓存22特性，他可以非常方便德的定制和配置缓存。缓存可以极大额提升查询效率</li>
<li>MyBatis系统默认俩种缓存：一级缓存和二级缓存<ul>
<li>默认情况下，只有一级缓存开启（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他基于namespace级别额缓存</li>
<li>为了提高扩展性，MyBatis定义缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<h3 id="3、一级缓存"><a href="#3、一级缓存" class="headerlink" title="3、一级缓存"></a>3、一级缓存</h3><p>sqlSession.clearCache() 手动清理缓存</p>
<p>只能保存一次的查询结果</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>-Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2021/07/31/Spring/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>使现有的技术更加容易使用，本身是一个大杂烩，整合现有的技术框架</p>
<h2 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h2><ul>
<li>Spring是一个开源对的免费的框架</li>
<li>Spring是一个轻量级的、非入侵式的框架</li>
<li>控制反转(IOC),面向切面编程(AOP)</li>
<li>支持事务对的处理，对框架整合的支持</li>
</ul>
<p><strong>总结：</strong>Spring是一个轻量级的控制反转(IOC) 和面向切面编程（AOP）对的框架</p>
<h2 id="2、扩展"><a href="#2、扩展" class="headerlink" title="2、扩展"></a>2、扩展</h2><h3 id="1、Spring-Boot"><a href="#1、Spring-Boot" class="headerlink" title="1、Spring Boot"></a>1、Spring Boot</h3><ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务</li>
<li>约定大于配置</li>
</ul>
<h3 id="2、Spring-Cloud"><a href="#2、Spring-Cloud" class="headerlink" title="2、Spring Cloud"></a>2、Spring Cloud</h3><p>Spring Cloud是基于SpringBoot实现的</p>
<p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及</p>
<p>SpringMVC承上启下对的作用</p>
<h3 id="3、弊端"><a href="#3、弊端" class="headerlink" title="3、弊端"></a>3、弊端</h3><p>发展太久以后，违背了原来对的理念，配置十分繁琐，人称“配置地狱”</p>
<h2 id="3、Spring配置"><a href="#3、Spring配置" class="headerlink" title="3、Spring配置"></a>3、Spring配置</h2><p>必须要导入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要用到的架包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- spring-aop-4.2.5.RELEASE.jar</span><br><span class="line">- spring-aspects-4.2.5.RELEASE.jar</span><br><span class="line">- spring-beans-4.2.5.RELEASE.jar</span><br><span class="line">- spring-context-4.2.5.RELEASE.jar</span><br><span class="line">- spring-context-support-4.2.5.RELEASE.jar</span><br><span class="line">- spring-core-4.2.5.RELEASE.jar</span><br><span class="line">- spring-expression-4.2.5.RELEASE.jar</span><br></pre></td></tr></table></figure>

<h3 id="1、bean的配置"><a href="#1、bean的配置" class="headerlink" title="1、bean的配置"></a>1、bean的配置</h3><p><strong>格式：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo类地址&quot;</span> <span class="attr">name</span>=<span class="string">“别名”</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;属性名&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值&quot;</span> /&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;属性名&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;别的beanid&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>解析:</strong></p>
<ul>
<li>id = 变量名</li>
<li>class = new的对象</li>
<li>property 给对象的属性赋值</li>
<li>name = 属性名</li>
<li>value = 属性值</li>
<li>ref = 引用spring的对象</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo.student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br>vo.student这个属性类必须要有set方法，空构造，否则就会报错</p>
<h3 id="2、import"><a href="#2、import" class="headerlink" title="2、import"></a>2、import</h3><p>一般用于团队开发，他可以将多个配置文件，导入合并为一个<br>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">impost</span> <span class="attr">resource</span>=<span class="string">&quot;Spring配置xml&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>内容相同则会合并</p>
<h3 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h3><p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">student stu=context.getBean(<span class="string">&quot;aa&quot;</span>,student.class);</span><br><span class="line">System.out.println(stu);</span><br></pre></td></tr></table></figure>

<h3 id="4、依赖注入"><a href="#4、依赖注入" class="headerlink" title="4、依赖注入"></a>4、依赖注入</h3><ul>
<li>动态替换Bean依赖对象，程序更灵活</li>
<li>更好实践面向接口编程，代码更清晰</li>
<li>更好实践优先使用对象组合，而不是类继承</li>
<li>增加Bean可复用性</li>
<li>降低Bean之间耦合</li>
<li>代码结构更清晰</li>
</ul>
<h4 id="1、构造器注入"><a href="#1、构造器注入" class="headerlink" title="1、构造器注入"></a>1、构造器注入</h4><p><strong>介绍：</strong>根据属性类的构造方法一一对应注入，下标从0开始</p>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo.stu&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、Set注入"><a href="#2、Set注入" class="headerlink" title="2、Set注入"></a>2、Set注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>	    <span class="comment">&lt;!-- name中为vo --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;周志狗&quot;</span> /&gt;</span>	  <span class="comment">&lt;!--普通值注入--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>	<span class="comment">&lt;!-- 注入null --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span> 		    <span class="comment">&lt;!-- 注入空 --&gt;</span></span><br><span class="line"> 	 	 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span>					<span class="comment">&lt;!--数组注入，跟list一样--&gt;</span></span><br><span class="line"> 	 	 	<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"> 	 	 		<span class="tag">&lt;<span class="name">value</span>&gt;</span>可以有多个<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> 	 	 	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"> 	 	 <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	 	 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span>					<span class="comment">&lt;!--map注入--&gt;</span></span><br><span class="line"> 	 	 	<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"> 	 	 		<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;11&quot;</span> <span class="attr">value</span>=<span class="string">&quot;222&quot;</span> /&gt;</span></span><br><span class="line"> 	 	 	<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"> 	 	 <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	 </span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span>  <span class="comment">&lt;!-- set注入 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user&quot;</span>/&gt;</span>  		<span class="comment">&lt;!--当前页面name注入--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">value</span>&gt;</span>Pakistan<span class="tag">&lt;/<span class="name">value</span>&gt;</span> 	<span class="comment">&lt;!--普通注入--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">value</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">value</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;dirve&quot;</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 	 <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>必须要包含一个无参构造，否则将会报错</p>
<h4 id="3、p注入"><a href="#3、p注入" class="headerlink" title="3、p注入"></a>3、p注入</h4><p><strong>导包：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&#x27;姓名&#x27;</span> <span class="attr">p:age</span>=<span class="string">&quot;11&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、c注入"><a href="#4、c注入" class="headerlink" title="4、c注入"></a>4、c注入</h4><p><strong>必须导包：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&#x27;姓名&#x27;</span> <span class="attr">c:age</span>=<span class="string">&quot;11&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>c注入是根据构造方法注入的</p>
<h3 id="5、Bean的自动装配"><a href="#5、Bean的自动装配" class="headerlink" title="5、Bean的自动装配"></a>5、Bean的自动装配</h3><p><strong>介绍：</strong></p>
<ul>
<li>自动装配是spring满足bean依赖的一种方式</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<p>spring中的是三种装配的方式</p>
<ul>
<li>在xml中显示的配置</li>
<li>在java中显示配置</li>
<li>隐式的自动装配bean(重要)</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.dog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo.people&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--autowire=&quot;byName&quot; 根据vo中的属性值，在xml寻找id相同的插入--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--autowire=&quot;byType&quot; 根据vo中的类型，在xml寻找相同的类型插入，有多个类型一致，则报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、注解"><a href="#6、注解" class="headerlink" title="6、注解"></a>6、注解</h3><ul>
<li>必须要导入aop包</li>
<li>必须导入约束：context的约束</li>
<li>重要： &lt;context:annotation-config /&gt;  开启注解支持，不要这个则空指针</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>  字段标记了这个注解，说明这个字段可以为<span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<h4 id="1、-Autowired"><a href="#1、-Autowired" class="headerlink" title="1、@Autowired"></a>1、@Autowired</h4><p>直接放属性上使用即可<br>使用后可以忽略set方法，前提是这个自动装配的属性在loc(spring.xml)容器中存在，且符合名字，byName的方式实现，如果找不到id 则通过byType实现，如果俩个都找不到则报错</p>
<p><strong>例：</strong>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包是从别的的配置中粘贴过来的,有些不需要的可以删除--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.dog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.cat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ren&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vo.Ren&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>属性类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> service.cat;</span><br><span class="line"><span class="keyword">import</span> service.dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ren</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired(required = false)</span> </span><br><span class="line">	<span class="meta">@Qualifier(value=&quot;dog222&quot;)</span>指定去xml中找id为dog222的</span><br><span class="line">	&lt;!--required = <span class="keyword">false</span>  说明这个属性可以为<span class="keyword">null</span>, 为<span class="keyword">true</span> 则不可以为无--&gt;</span><br><span class="line">	<span class="keyword">private</span> dog dog;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span> </span><br><span class="line">	<span class="keyword">private</span> cat cat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    Ren ren = context.getBean(<span class="string">&quot;ren&quot;</span>,Ren.class);</span><br><span class="line">    ren.getCat().cat();</span><br><span class="line">    ren.getDog().dog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、-Resource和-Autowired的区别"><a href="#2、-Resource和-Autowired的区别" class="headerlink" title="2、@Resource和@Autowired的区别"></a>2、@Resource和@Autowired的区别</h4><ul>
<li>都是自动装配的，都可以放在属性字段上</li>
<li>@Autowired通过找xml中的class类型实现，而且必须要这个对象存在</li>
<li>@Resource默认通过bynamed的方式实现，如果找不到则通过byType实现，如果俩个都找不到的情况下，就报错</li>
<li>执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byname的方式实现</li>
<li>@Qualifier通常配合@Resource来实现</li>
<li>@Qualifier可以指定一个id去匹配</li>
</ul>
<h4 id="2、使用注解开发"><a href="#2、使用注解开发" class="headerlink" title="2、使用注解开发"></a>2、使用注解开发</h4><ul>
<li>@Component：组件，放在类上，说明这个类被spring管理了，就是bean</li>
<li>等价于<bean id="小写类名" class="路径"></bean></li>
<li>@Value(“值”) 给属性注值，也可以直接放set上面</li>
<li>衍生的注解<ul>
<li>@Component：有几个衍生注解，我们在web开发中，辉安装三层架构分层</li>
<li>dao层: @Repository</li>
<li>service层: @Service</li>
<li>controller层: Controller</li>
<li>这四个注解功能一样，都是代表将某个类注册到Spring中装配bean</li>
</ul>
</li>
<li>作用域<ul>
<li>@Scope(“singleton”)表示是单利模式,prototype为原型模式</li>
</ul>
</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">//等价于<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.user&quot;</span>&gt;</span></span><br><span class="line">public class User &#123;</span><br><span class="line">	@Value(&quot;测试&quot;)</span><br><span class="line">	//<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试&quot;</span>/&gt;</span></span><br><span class="line">	public String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h4><ul>
<li>xml与注解<ul>
<li>​    xml万能，可以用任意地方，方便简单</li>
<li>​    注解不是自己类使用不了，维护相对复杂</li>
</ul>
</li>
<li>xml与注解最佳实践<ul>
<li>xml用来管理bean</li>
<li>注解只负责完成属性的注入    </li>
</ul>
</li>
</ul>
<h3 id="7、使用java实现配置"><a href="#7、使用java实现配置" class="headerlink" title="7、使用java实现配置"></a>7、使用java实现配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 放于类名上，代表一个配置类，相当于beans</span></span><br><span class="line"><span class="meta">@Bean</span><span class="comment">//放于方法上，这个方法里面的返回值就相当于class,方法名相当于id</span></span><br></pre></td></tr></table></figure>

<p><strong>例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//代表一个配置类，相当于beans</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stuent</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span><span class="comment">//这个方法里面的返回值就相当于class,方法名相当于id</span></span><br><span class="line">		 <span class="comment">//并且这个方法必须要有返回类型，否则会报类转换异常</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> User(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext stu = <span class="keyword">new</span> AnnotationConfigApplicationContext(Stuent.class);<span class="comment">//读取注解的类名.class(相当于spring.xml)</span></span><br><span class="line">Stuent s = (Stuent) stu.getBean(<span class="string">&quot;getUser&quot;</span>); <span class="comment">//这里放的是方法名因为getUser返回为User，所以要强转为User</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>

<h3 id="8、代理模式"><a href="#8、代理模式" class="headerlink" title="8、代理模式"></a>8、代理模式</h3><h4 id="1、静态代理"><a href="#1、静态代理" class="headerlink" title="1、静态代理"></a>1、静态代理</h4><ul>
<li><p><strong>代理模式的好处：</strong></p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共也就交给了代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
</ul>
</li>
<li><p><strong>缺点：</strong></p>
<ul>
<li>一个真实角色就会产生一个代理角色;代码量辉翻倍，开发效率会变低</li>
</ul>
</li>
</ul>
<h4 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h4><h4 id><a href="#" class="headerlink" title></a><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86test.png" alt="动态代理"></h4><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt="动态代理test"></p>
<h3 id="9、AOP"><a href="#9、AOP" class="headerlink" title="9、AOP"></a>9、AOP</h3><h4 id="1、什么是AOP"><a href="#1、什么是AOP" class="headerlink" title="1、什么是AOP"></a>1、什么是AOP</h4><p>AOP(Aspect Oriented Programming)：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，AOP是OOP的延续，是软件开发中的一个热底单，也是Spring框架中的一个重要内容，利用AOP可以对各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</p>
<h4 id="2、自定义记录类"><a href="#2、自定义记录类" class="headerlink" title="2、自定义记录类"></a>2、自定义记录类</h4><p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jilu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mapper.jilu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>		<span class="comment">&lt;!--加载自定义记录类--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;CRUD&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>	<span class="comment">&lt;!--记录操作类--&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;jilu&quot;</span>&gt;</span>	<span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service..*.*(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;xx&quot;</span>/&gt;</span>  <span class="comment">&lt;!--这是加载操作里面所有对的类和方法，																				你可以可以指定--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;first&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;xx&quot;</span>/&gt;</span>	<span class="comment">&lt;!--method 的值是记录类对的方法名--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;foot&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;xx&quot;</span>/&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>例：切面方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;记录开始&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;记录结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>普通方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;添加&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">Student stu=context.getBean(<span class="string">&quot;CRUD&quot;</span>,Student.class);</span><br><span class="line">stu.add();</span><br></pre></td></tr></table></figure>

<h4 id="3、接口记录类"><a href="#3、接口记录类" class="headerlink" title="3、接口记录类"></a>3、接口记录类</h4><p><strong>例：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">	&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">        xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">        xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">        xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">       &lt;bean id=&quot;jilu&quot; class=&quot;mapper.jilu&quot;&gt;&lt;/bean&gt;</span><br><span class="line">       &lt;bean id=&quot;jies&quot; class=&quot;mapper.jies&quot;&gt;&lt;/bean&gt;</span><br><span class="line">       &lt;bean id=&quot;CRUD&quot; class=&quot;service.Student&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">       &lt;aop:config&gt;</span><br><span class="line">            &lt;aop:pointcut expression=<span class="string">&quot;execution(* service..*.*(..))&quot;</span> id=<span class="string">&quot;xx&quot;</span>/&gt;</span><br><span class="line">            &lt;aop:advisor advice-ref=<span class="string">&quot;jilu&quot;</span> pointcut-ref=<span class="string">&quot;xx&quot;</span> /&gt;</span><br><span class="line">            &lt;aop:advisor advice-ref=<span class="string">&quot;jies&quot;</span> pointcut-ref=<span class="string">&quot;xx&quot;</span> /&gt;</span><br><span class="line">       &lt;/aop:config&gt;</span><br><span class="line">	&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p><strong>例：方法开始</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jilu</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">        <span class="comment">//mothod要执行对象的方法</span></span><br><span class="line">        <span class="comment">//args:执行方法中的参数</span></span><br><span class="line">        <span class="comment">//target:目标对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例：方法结束</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jies</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> 			Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行后&quot;</span>);</span><br><span class="line">	    <span class="comment">//mothod要执行对象的方法</span></span><br><span class="line">        <span class="comment">//args:执行方法中的参数</span></span><br><span class="line">        <span class="comment">//target:目标对象</span></span><br><span class="line">        <span class="comment">//returnValue:方法执行后返回的值</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、注解记录"><a href="#4、注解记录" class="headerlink" title="4、注解记录"></a>4、注解记录</h4><p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;zhix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mapper.zhix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;CRUD&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>例：切面类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zhix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* service..*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法开始执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* service..*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行完&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有写的则是跟自定义中的一样</p>
<h3 id="10、Spring和Mybits整合"><a href="#10、Spring和Mybits整合" class="headerlink" title="10、Spring和Mybits整合"></a>10、Spring和Mybits整合</h3><p><strong>例：springxml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string"> 		http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 加载Mybatis第一与数据库建立连接，第二初始化mybatis里的配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.UserImpl&quot;</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!--注入sqlSessionFactory--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>mybatisxml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;StudentAll&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;vo.student&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.student&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>实现类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--User为自己写的接口--&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;student&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="keyword">return</span> getSqlSession().selectList(<span class="string">&quot;StudentAll&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">User stu = (User) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">List&lt;student&gt; list = stu.getList();</span><br><span class="line"><span class="keyword">for</span> (student student : list) &#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性类则与数据库中查出来的一一对应即可</p>
<p>第二种配置数据源方法</p>
<p><strong>例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入properties配置文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--properties是键值对的形式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;pass&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>db.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/school</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">pass</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<h3 id="11、声明式事务"><a href="#11、声明式事务" class="headerlink" title="11、声明式事务"></a>11、声明式事务</h3><p>事务：要么全部成功，要么全部失败，不会执行一般就暂停失败了则会回滚</p>
<p><strong>例：在spring.xml中添加</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启声明式事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span><span class="comment">&lt;!-- 连接数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给那些方法配置事务，*则是所有方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--propagation=&quot;REQUIRED&quot; 默认值，也可以不写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务切入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是导入service包下的所有类，你也可以指定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.*.*(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>头部xml修改为</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>-Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统</title>
    <url>/2021/07/31/Linux/</url>
    <content><![CDATA[<h1 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ul>
<li>Linux操作系统最初只是由芬兰人李纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</li>
<li>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</li>
</ul>
<h2 id="2、特征"><a href="#2、特征" class="headerlink" title="2、特征"></a>2、特征</h2><ul>
<li>一切皆文件：是指系统中所有都由文件构成，包括硬件，命令，操作系统，进程等等。</li>
<li>完全免费： Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其源代码。</li>
<li>完全兼容POSIX1.0标准：在Linux下通过相应的模拟器运行常见的DOS、Windows的程序。</li>
<li>多用户、多任务：Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。</li>
<li>良好的界面：Linux同时具有字符界面和图形界面。</li>
</ul>
<h2 id="3、常用的Linux版本"><a href="#3、常用的Linux版本" class="headerlink" title="3、常用的Linux版本"></a>3、常用的Linux版本</h2><h3 id="1、ReadHat"><a href="#1、ReadHat" class="headerlink" title="1、ReadHat"></a>1、ReadHat</h3><p><strong>下载地址</strong>：<a href="http://www.redhat.com/">http://www.redhat.com</a></p>
<p><strong>介绍</strong>：1999年IBM与红帽公司建立了合作伙伴关系，以确保Redhat在IBM及其上正确运行。这也是第一款收费版本的Linux，另外红帽公司的Redhat的Linux认证在业界也是非常有名的</p>
<h3 id="2、CentOS"><a href="#2、CentOS" class="headerlink" title="2、CentOS"></a>2、CentOS</h3><p><strong>下载地址</strong>：<a href="http://www.centos.org/">http://www.centos.org/</a></p>
<p><strong>介绍</strong>：一款企业级Linux发行版，它使用红帽企业级Linux中的免费源代码重新构建而成。所以说CentOS是Redhat孪生兄弟也不为过，如果你想体验Redhat的企业级服务，又不想付费，可以考虑实施CentOS。</p>
<h3 id="3、Ubuntu"><a href="#3、Ubuntu" class="headerlink" title="3、Ubuntu"></a>3、Ubuntu</h3><p><strong>下载地址</strong>：<a href="http://www.ubuntu.com/">http://www.ubuntu.com/</a></p>
<p><strong>介绍</strong>：Ubuntu是Debian的一款衍生版，也是当今最受欢迎的免费操作系统。Ubuntu侧重于它在个人市场的应用，在服务器、云计算、甚至一些运行Ubuntu Linux的移动设备上很常见。</p>
<h2 id="4、目录结构"><a href="#4、目录结构" class="headerlink" title="4、目录结构"></a>4、目录结构</h2><table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/sbin</td>
<td>存放系统管理员使用的系统管理程序</td>
</tr>
<tr>
<td>/home[常用]</td>
<td>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一个该目录名以用户的账号命名</td>
</tr>
<tr>
<td>/root[常用]</td>
<td>该目录为系统管理员，也称作超级权限者的用户主目录。</td>
</tr>
<tr>
<td>/lib[常用]</td>
<td>这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库</td>
</tr>
<tr>
<td>/lost+found</td>
<td>当系统非法关机后，存放一些文件</td>
</tr>
<tr>
<td>/etc[常用]</td>
<td>所有系统管理所需要的配置文件和子目录my.conf</td>
</tr>
<tr>
<td>/usr[常用]</td>
<td>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下面的program files目录</td>
</tr>
<tr>
<td>/boot[常用]</td>
<td>存放的始启动Linux时使用的一些核心文件，包括一些链接文件以及镜像文件</td>
</tr>
<tr>
<td>/proc</td>
<td>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</td>
</tr>
<tr>
<td>/srv</td>
<td>service缩写 这目录存放一些服务启动之后需要提取的数据</td>
</tr>
<tr>
<td>/sys</td>
<td>这是linux2.6内核的一个恒大的变化。该目录下面安装了2.6内核中新出现的一个文件系统sysfs【别动】</td>
</tr>
<tr>
<td>/tmp</td>
<td>这个目录是用来存放一些临时文件的</td>
</tr>
<tr>
<td>/dev</td>
<td>类似与windows的设备管理器，把所有的硬件用文件的形式存储</td>
</tr>
<tr>
<td>/media[常用]</td>
<td>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂在到这个目录下</td>
</tr>
<tr>
<td>/mnt[常用]</td>
<td>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以把外部的存储挂载/mnt/上然后加入该目录就可以查看里的尼尔；</td>
</tr>
<tr>
<td>/opt</td>
<td>这是主句额外安装软件所摆放的目录，如安装ORACLE数据库就可放到该目录下，默认为空</td>
</tr>
<tr>
<td>/usr/local[常用]</td>
<td>这是另一个主机额外安装软件所安装的目。一般是通过编译源码方式安装的程序</td>
</tr>
<tr>
<td>/var[常用]</td>
<td>这个目录存放不断扩充的对象，习惯将坚持被修改的目录放在这个目录下。包括各种日志文件</td>
</tr>
<tr>
<td>/selinux</td>
<td>SELinux 是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可自行设置</td>
</tr>
</tbody></table>
<h2 id="5、系统指令"><a href="#5、系统指令" class="headerlink" title="5、系统指令"></a>5、系统指令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td>shutdown –h now</td>
<td>立刻关机</td>
</tr>
<tr>
<td>shutdown –r now</td>
<td>立刻重启</td>
</tr>
<tr>
<td>reboot</td>
<td>立刻重启</td>
</tr>
<tr>
<td>logout</td>
<td>注销</td>
</tr>
<tr>
<td>clear</td>
<td>清屏</td>
</tr>
<tr>
<td>whoami</td>
<td>输出当前登录的用户</td>
</tr>
<tr>
<td>su 用户名</td>
<td>切换到另一个用户</td>
</tr>
</tbody></table>
<h2 id="6、链接指令"><a href="#6、链接指令" class="headerlink" title="6、链接指令"></a>6、链接指令</h2><p>链接分为软链接跟硬链接，硬链接表示一个文件有多个名称，软链接类似于windows的快捷方式</p>
<p>软链接语法：in -s 文件 新文件名</p>
<p>硬链接语法：in  文件 新文件名  硬链接的文件不能是目录</p>
<h2 id="7、帮助指令"><a href="#7、帮助指令" class="headerlink" title="7、帮助指令"></a>7、帮助指令</h2><ul>
<li>由于Linux命令太多，有些时候容易忘记Linux的命令，可以调用Linux的帮助来查看命令的语法。</li>
<li>帮助命令有以下几种：<ul>
<li>man 命令：显示详细的命令帮助信息。</li>
<li>help 命令：显示命令帮助信息。</li>
<li>which 命令：显示命令所在的目录。</li>
<li>where 命令：显示命令的指令文件所在的位置。</li>
</ul>
</li>
</ul>
<h2 id="8、目录指令"><a href="#8、目录指令" class="headerlink" title="8、目录指令"></a>8、目录指令</h2><h3 id="1、ls查看目录"><a href="#1、ls查看目录" class="headerlink" title="1、ls查看目录"></a>1、ls查看目录</h3><p>查看目录的命令有俩个，一个ls，一个ll，ls以list查看，ll以查看详情显示</p>
<ul>
<li><p><strong>ls常见的参数</strong>：</p>
<ul>
<li>-a 显示所有文件包括隐藏文件   例：ls -a</li>
<li>-l 以查看详情方式显示文件，类似ll  例：ls -l</li>
<li>-r 以倒序显示，默认的查询方式为以文件名升序排序  例：ls -r</li>
<li>-t  以时间顺序显示  例：ls -t</li>
<li>-lh 将文件大小的单位进行换算</li>
<li>参数可以搭配使用</li>
</ul>
</li>
<li><p><strong>ls可以查看指定的目录，也支持模糊查询</strong></p>
<ul>
<li> ls -l /bin :以详情方式查看bin目录下的文件</li>
<li>ls -l /bin/a* :以详情的方式查看bin下面是有以a开头的文件</li>
<li>ll /bin/*.txt :以详情的方式查看bin下面是有以txt结尾的文件</li>
</ul>
</li>
</ul>
<h3 id="2、目录操作指令"><a href="#2、目录操作指令" class="headerlink" title="2、目录操作指令"></a>2、目录操作指令</h3><ul>
<li>pwd ：显示当前所在的目录</li>
<li>cd 相对路径/绝对路径  例：cd /bin   进入bin目录</li>
<li>cd .. ：返回上一级</li>
<li>cd - ：返回上一次所在的目录</li>
<li>cd /：返回根目录</li>
<li>cd ~ ：返回家目录</li>
</ul>
<h3 id="3、mkdir创建目录"><a href="#3、mkdir创建目录" class="headerlink" title="3、mkdir创建目录"></a>3、mkdir创建目录</h3><p><strong>语法</strong>：mkdir  目录名称  只能创建一层目录</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-p :可以一次性创建多级目录  例：mkdir -p a/b/c/d</li>
</ul>
<h3 id="4、rmdir删除空目录"><a href="#4、rmdir删除空目录" class="headerlink" title="4、rmdir删除空目录"></a>4、rmdir删除空目录</h3><p><strong>语法</strong>：rmdir 目录名称 删除一层空目录</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-p：一次性删除多层空目录  例：rmdir a/b/c</li>
</ul>
<h3 id="5、rm删除文件或目录"><a href="#5、rm删除文件或目录" class="headerlink" title="5、rm删除文件或目录"></a>5、rm删除文件或目录</h3><p><strong>语法</strong>：rm 文件或子目录  不能删除目录</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-f : 强制删除  也不能删除目录</li>
<li>-i ：互动模式，在删除的时候会询问是否删除，是y，否n</li>
<li>-r：递归删除 ,可以删除目录文件</li>
</ul>
<p>rm -rf /  Linux自杀命令，初学者可以尝试</p>
<h3 id="6、cp复制文件"><a href="#6、cp复制文件" class="headerlink" title="6、cp复制文件"></a>6、cp复制文件</h3><p><strong>语法</strong>：cp 文件或子目录  不能直接拷贝目录</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-r 如果拷贝的是目录，则复制该目录下的所有文件</li>
<li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li>
</ul>
<h3 id="7、mv移动或重命名"><a href="#7、mv移动或重命名" class="headerlink" title="7、mv移动或重命名"></a>7、mv移动或重命名</h3><table>
<thead>
<tr>
<th>语法根据</th>
<th>运行结果</th>
<th>例</th>
</tr>
</thead>
<tbody><tr>
<td>mv 文件名 文件名</td>
<td>重命名</td>
<td>mv 1.txt 2.txt</td>
</tr>
<tr>
<td>mv 文件名 目录名</td>
<td>移动文件(类似于剪切)</td>
<td>mv a /tmp</td>
</tr>
<tr>
<td>mv 目录名 目录名</td>
<td>移动目录</td>
<td>mv /text /tmp</td>
</tr>
<tr>
<td>mv 目录名 文件名</td>
<td>出错</td>
<td>mv /text 1.txt</td>
</tr>
</tbody></table>
<h2 id="9、文件指令"><a href="#9、文件指令" class="headerlink" title="9、文件指令"></a>9、文件指令</h2><h3 id="1、cat和tac"><a href="#1、cat和tac" class="headerlink" title="1、cat和tac"></a>1、cat和tac</h3><p>cat为从第一行开始显示文件内容</p>
<p>tac为从最后一行开始显示文件内容</p>
<p>语法一模一样</p>
<p><strong>语法</strong>：cat 文件</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-A ：列出文件内容，特殊字符不以空白显示;  例： cat -A 1.txt</li>
<li>-b ：列出行号，空白行不标行号！ 例：cat -b 1.txt</li>
<li>-E ：将结尾的断行字节 $ 显示出来； 例：cat -E 1.txt</li>
<li>-n ：列印出行号，连同空白行也会有行号;   例：cat -n 1.txt</li>
<li>-T ：将 [tab] 按键以 I 显示出来 ;   例：cat -T 1.txt </li>
</ul>
<h3 id="2、more"><a href="#2、more" class="headerlink" title="2、more"></a>2、more</h3><p>more以分页形式显示</p>
<p><strong>语法</strong>：more 文件名</p>
<p>查看时可以按以下键：</p>
<ul>
<li>回车:下一行</li>
<li>空格：下一页</li>
<li>/字符串：向下搜索</li>
<li>q：退出more</li>
<li>b：往回翻页</li>
</ul>
<h3 id="3、less"><a href="#3、less" class="headerlink" title="3、less"></a>3、less</h3><p>翻页浏览</p>
<p><strong>语法</strong>：less 文件名</p>
<p>在程序运行时，可以可以按一下几个键：</p>
<ul>
<li>空格键 ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串 ：向下搜寻『字串』的功能；</li>
<li>?字串 ：向上搜寻『字串』的功能；</li>
<li>n ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q ：离开 less 这个程序；</li>
</ul>
<h3 id="4、head-tail"><a href="#4、head-tail" class="headerlink" title="4、head/tail"></a>4、head/tail</h3><p>head取出文件前面几行，tail取出后面几行，语法一致</p>
<p><strong>语法</strong>：head 文件  默认取10行</p>
<p><strong>参数</strong>：-n 取的行数 例：head -3 1.text</p>
<h3 id="5、历史记录history"><a href="#5、历史记录history" class="headerlink" title="5、历史记录history"></a>5、历史记录history</h3><p>history：显示所有的历史记录。</p>
<p>history 10 ：只显示最近10条历史命令!10：倒叙显示10条。</p>
<h3 id="6、-gt-和-gt-gt"><a href="#6、-gt-和-gt-gt" class="headerlink" title="6、&gt;和&gt;&gt;"></a>6、&gt;和&gt;&gt;</h3><h4 id="1、-gt"><a href="#1、-gt" class="headerlink" title="1、&gt;"></a>1、&gt;</h4><p><strong>例</strong>：ls -l &gt; a.txt</p>
<p>如果a.txt存在则覆盖里面的内容，如果文件不存在会创建该文件</p>
<h4 id="2、-gt-gt"><a href="#2、-gt-gt" class="headerlink" title="2、&gt;&gt;"></a>2、&gt;&gt;</h4><p><strong>例</strong>：ls -l &gt;&gt; a.txt</p>
<p>查询的结果追加到a.txt文件末尾。如果文件不存在会创建该文件</p>
<h3 id="7、时间date"><a href="#7、时间date" class="headerlink" title="7、时间date"></a>7、时间date</h3><table>
<thead>
<tr>
<th>命令</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>date +%Y</td>
<td>显示当前年份</td>
</tr>
<tr>
<td>date +%m</td>
<td>显示当前月份</td>
</tr>
<tr>
<td>date +%d</td>
<td>显示当前是哪一天</td>
</tr>
<tr>
<td>date “+%Y-%m-%d %H:%M:%S”</td>
<td>显示年月日时分秒</td>
</tr>
<tr>
<td>date -s “2020-10-10 10:20:30”</td>
<td>设置时间</td>
</tr>
</tbody></table>
<h3 id="8、日历cal"><a href="#8、日历cal" class="headerlink" title="8、日历cal"></a>8、日历cal</h3><p>cal 显示当前月份日历cal 2020显示2020年的日历</p>
<h2 id="10、文件权限"><a href="#10、文件权限" class="headerlink" title="10、文件权限"></a>10、文件权限</h2><h3 id="1、文件基本属性"><a href="#1、文件基本属性" class="headerlink" title="1、文件基本属性"></a>1、文件基本属性</h3><p>使用ll命令或者ls -l浏览文件信息时，会显示文件详情。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/image.png"></p>
<p><strong>文件类型</strong></p>
<p>0位确定文件类型</p>
<ul>
<li>当为[ d ]则是目录。</li>
<li>当为[ - ]则是文件；</li>
<li>若是[ l ]则表示为链接文档(link file)；</li>
<li>若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p><strong>文件权限</strong></p>
<p>r代表可读(read)，w代表可写(write)，x代表可执行(execute)，如果没有权限则会显示-</p>
<ul>
<li>1-3为文件拥有者对该文件的权限</li>
<li>4-6为文件应用这组的用户对该文件的权限</li>
<li>7-9为其他用户对该文件的权限</li>
</ul>
<p>对于root用户没有作用，因为root用户的权限不受控制</p>
<h3 id="2、修改文件权限"><a href="#2、修改文件权限" class="headerlink" title="2、修改文件权限"></a>2、修改文件权限</h3><p>chmod修改文件的权限，有俩种方式，一种是数字，一种是字母</p>
<p><strong>语法</strong>：chmod 方式 文件</p>
<p><strong>参数</strong>：-R 如果该文件下面还有文件，则递归将该文件下的所有文件更改为一样的权限</p>
<p><strong>1、数字方式(推荐)</strong></p>
<p>r:4，w:2，x:1  利用他们三个相加来判断拥有哪些权限</p>
<p>例：chmod 750 1.txt</p>
<p>结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/linux2.png"></p>
<p><strong>2、字母方式</strong></p>
<p>字母方式则是rwx，设置为</p>
<p>a=r：所有人拥有读权限</p>
<p>o=rwx：文件拥有者拥有读写执行权限</p>
<p>g=rw：文件拥有者组拥有读写权限</p>
<p>o=r：其他用户应用读权限</p>
<p>例：chmod o=rwx,g=rw,o=r 1.txt</p>
<p>结果为</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/linux1.png"></p>
<h3 id="3、修改文件所属组"><a href="#3、修改文件所属组" class="headerlink" title="3、修改文件所属组"></a>3、修改文件所属组</h3><p><strong>语法</strong>：charp 组名 文件</p>
<p><strong>参数</strong>：-R 如果该文件下面还有文件，则将该文件下的所有文件的组修改</p>
<p><strong>例</strong>：charp text 1.txt</p>
<h3 id="4、修改文件拥有者"><a href="#4、修改文件拥有者" class="headerlink" title="4、修改文件拥有者"></a>4、修改文件拥有者</h3><p><strong>语法</strong>：chown 用户名 文件名</p>
<p><strong>参数</strong>：-R 如果该文件下面还有文件，则将该文件下的所有文件的所有者修改</p>
<p><strong>例</strong>：chown text1 1.txt</p>
<h2 id="11、vi-vim编辑器"><a href="#11、vi-vim编辑器" class="headerlink" title="11、vi/vim编辑器"></a>11、vi/vim编辑器</h2><p>Linux中内建了一个vim文本编辑器，通过这个编辑器，可以在Linux中编辑文件</p>
<p><strong>语法</strong>：vi/vim 文件</p>
<p>vim有三种模式：命令模式，输入模式，底部命令模式</p>
<h3 id="1、命令模式"><a href="#1、命令模式" class="headerlink" title="1、命令模式"></a>1、命令模式</h3><p>刚刚vim进入文件则是命令模式</p>
<p>命令模式常见的命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>切换为输入模式</td>
</tr>
<tr>
<td>x</td>
<td>删除当前光标所在的字符</td>
</tr>
<tr>
<td>:</td>
<td>切换为底部命令模式</td>
</tr>
<tr>
<td>dw</td>
<td>删除光标所在的一行</td>
</tr>
<tr>
<td>dd</td>
<td>删除光标所在的一行</td>
</tr>
<tr>
<td>yy</td>
<td>复制光标所在的一行</td>
</tr>
<tr>
<td>pp</td>
<td>粘贴</td>
</tr>
<tr>
<td>gg</td>
<td>快速回到第一行</td>
</tr>
<tr>
<td>u</td>
<td>撤回上一次操作</td>
</tr>
</tbody></table>
<h3 id="2、输入模式"><a href="#2、输入模式" class="headerlink" title="2、输入模式"></a>2、输入模式</h3><p>输入模式则为编辑模式，用于编辑文本</p>
<p>输入模式常见的命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>回车</td>
<td>换行</td>
</tr>
<tr>
<td>上下左右</td>
<td>移动光标</td>
</tr>
<tr>
<td>home/end</td>
<td>移动光标到一行的首/尾</td>
</tr>
<tr>
<td>pgup/pgdn</td>
<td>上一页/下一页</td>
</tr>
<tr>
<td>esc</td>
<td>退出输入模式，进入命令模式</td>
</tr>
</tbody></table>
<h3 id="3、底部命令模式"><a href="#3、底部命令模式" class="headerlink" title="3、底部命令模式"></a>3、底部命令模式</h3><p>在命令模式输入英文冒号，则进入底部命令模式，大多数用于保存数据退出</p>
<p>底部命令模式常用指令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>:w</td>
<td>保存</td>
</tr>
<tr>
<td>:q</td>
<td>退出</td>
</tr>
<tr>
<td>:wq</td>
<td>保存退出</td>
</tr>
<tr>
<td>:q!</td>
<td>强制退出，不保存</td>
</tr>
</tbody></table>
<h2 id="12、文件命令搜索"><a href="#12、文件命令搜索" class="headerlink" title="12、文件命令搜索"></a>12、文件命令搜索</h2><p>在Linux中文件搜索有三种方式 locate、find、grep</p>
<h3 id="1、locate"><a href="#1、locate" class="headerlink" title="1、locate"></a>1、locate</h3><p>按文件名搜索，速度快，但是最新添加的数据不会搜索出来，然后我们则需要手动输入updatedb来更新</p>
<p><strong>语法</strong>：locate 文件名</p>
<p><strong>例</strong>：locate *.txt 搜索所有的txt文件</p>
<h3 id="2、find"><a href="#2、find" class="headerlink" title="2、find"></a>2、find</h3><p>find比起locate执行速度慢，但功能强大,使用find的时候，需要避免大范围搜索，否则效率太低</p>
<p><strong>语法</strong>：find 搜索范围 参数 文件名</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-name  按照名称搜索</li>
<li>-iname 不区分大小写按名称搜索</li>
<li>-user  查询该文件名的目录</li>
</ul>
<p><strong>例</strong>：</p>
<ul>
<li>find /etc -name *.conf                在/etc目录下搜索以.conf结尾的文件。</li>
<li>find -user zhengcheng               查找属于zhengcheng的文件</li>
<li>find –type d/f                               根据文件类型查找,f普通文件，d目录。</li>
<li>find –mtime -1/+1                       查找1天以前或之后更新的文件。</li>
<li>find –ctime -1/+1                         查找1小时以前或之后创建的文件。</li>
<li>find / -size 1M                              全系统搜索大小为1MB的文件</li>
</ul>
<h3 id="3、grep"><a href="#3、grep" class="headerlink" title="3、grep"></a>3、grep</h3><p>大多数跟其他搜索一起使用</p>
<p>例：find / -size 1M | grep aaa   全系统搜索大小为1MB并且包含aaa的文件</p>
<h3 id="4、locate和find的区别"><a href="#4、locate和find的区别" class="headerlink" title="4、locate和find的区别"></a>4、locate和find的区别</h3><ul>
<li>效率：find相对于locate会更慢，因为find扫描硬盘进行文件搜索。</li>
<li>功能：find功能更加强大，可以添加其他的参数，locate只能根据文件名进行搜索，都支持通配符搜索</li>
<li>即时性：find搜索的数据是即时的，locate不是。</li>
<li>模糊匹配：find默认是精确搜索，locate是模糊搜索。</li>
</ul>
<h3 id="5、查看端口"><a href="#5、查看端口" class="headerlink" title="5、查看端口"></a>5、查看端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure>



<h2 id="13、用户和用户组"><a href="#13、用户和用户组" class="headerlink" title="13、用户和用户组"></a>13、用户和用户组</h2><p>Linux是一个多用户多任务的系统，管理员可以添加多个用户分组管理</p>
<h3 id="1、用户指令"><a href="#1、用户指令" class="headerlink" title="1、用户指令"></a>1、用户指令</h3><h4 id="1、添加用户"><a href="#1、添加用户" class="headerlink" title="1、添加用户"></a>1、添加用户</h4><p><strong>语法</strong>：useradd 用户名</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-d 指定用户的主目录，如果目录不存在，则同时使用-m创建</li>
<li>-u：用户号 指定用户的用户号</li>
</ul>
<p><strong>例</strong>：</p>
<p>useradd –u user1                                                # 添加新用户 user1<br>useradd -d /home/userText -u 1011 user2   # 添加新用户，并指定用户家目录</p>
<h4 id="2、设置-修改密码"><a href="#2、设置-修改密码" class="headerlink" title="2、设置/修改密码"></a>2、设置/修改密码</h4><p><strong>语法</strong>：passwd 用户名</p>
<p><strong>例</strong>：passwd user</p>
<h4 id="3、修改用户名"><a href="#3、修改用户名" class="headerlink" title="3、修改用户名"></a>3、修改用户名</h4><p><strong>语法</strong>：usermod  参数 新用户名(或组名)  旧用户名</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-l  修改用户名</li>
<li>-g 修改用户组</li>
</ul>
<p><strong>例</strong>：</p>
<p>usermod -l newUser user2  修改user2的用户名为newUser</p>
<h4 id="4、查询用户信息"><a href="#4、查询用户信息" class="headerlink" title="4、查询用户信息"></a>4、查询用户信息</h4><p><strong>语法</strong>：id 用户名 </p>
<h4 id="5、切换用户"><a href="#5、切换用户" class="headerlink" title="5、切换用户"></a>5、切换用户</h4><p><strong>语法</strong>：su-用户名注：权限高点的用户切换权限低的不需要密码，</p>
<p>反之需要返回原来的用户是，用exit/logout</p>
<h4 id="6、查看当前用户"><a href="#6、查看当前用户" class="headerlink" title="6、查看当前用户"></a>6、查看当前用户</h4><p><strong>语法</strong>：whoami/who am I</p>
<h4 id="7、删除用户"><a href="#7、删除用户" class="headerlink" title="7、删除用户"></a>7、删除用户</h4><p><strong>语法</strong>：userdel 参数 用户名</p>
<p><strong>参数</strong>：-r 将用户目录一起删除</p>
<p><strong>例</strong>：userdel -r user</p>
<h3 id="2、用户组"><a href="#2、用户组" class="headerlink" title="2、用户组"></a>2、用户组</h3><h4 id="1、添加用户组"><a href="#1、添加用户组" class="headerlink" title="1、添加用户组"></a>1、添加用户组</h4><p>添加用户时，如果不指定用户组，会创建和用户名相同的一个用户组。</p>
<p><strong>语法</strong>：groupadd 组名</p>
<h4 id="2、删除用户组"><a href="#2、删除用户组" class="headerlink" title="2、删除用户组"></a>2、删除用户组</h4><p><strong>语法</strong>：groupdel 用户组</p>
<h3 id="3、找回root密码"><a href="#3、找回root密码" class="headerlink" title="3、找回root密码"></a>3、找回root密码</h3><p>1、开机界面按e进入编辑界面找到utf-8 </p>
<p>2、输入init=/bin/sh 然后ctrl +x</p>
<p>3、输入mount -o remount,rw/ 回车</p>
<p>4、输入passwd 回车然后输入俩次密码然后输入touch /.autorelabel （注意有个空格）</p>
<p>5、输入exec /sbin/init(执行时间比较长)结束后会自动重启，然后密码生效</p>
<h2 id="14、压缩和解压缩"><a href="#14、压缩和解压缩" class="headerlink" title="14、压缩和解压缩"></a>14、压缩和解压缩</h2><h3 id="1、tar"><a href="#1、tar" class="headerlink" title="1、tar"></a>1、tar</h3><p><strong>语法</strong>：tar 参数 要解压的tar包</p>
<p>​            tar czvf 压缩后名字 压缩的文件</p>
<p><strong>参数</strong>：</p>
<ul>
<li>-c: 建立压缩档案</li>
<li>-x：解压</li>
<li>t：查看内容</li>
<li>-r：向压缩归档文件末尾追加文件</li>
<li>-u：更新原压缩包中的文件</li>
</ul>
<p><strong>例</strong>：tar –zxvf jdk-8u151-linux-i586.tar.gz</p>
<h3 id="2、gunzip和gzip"><a href="#2、gunzip和gzip" class="headerlink" title="2、gunzip和gzip"></a>2、gunzip和gzip</h3><p><strong>语法</strong>：gzip 要压缩的文件</p>
<p>​            gunzip 要解压缩的文件</p>
<h3 id="3、zip-unzip命令"><a href="#3、zip-unzip命令" class="headerlink" title="3、zip/unzip命令"></a>3、zip/unzip命令</h3><p><strong>语法</strong>：zip 压缩文件</p>
<p>​            unzip 需要压缩的文件</p>
<p><strong>参数</strong>：-r 将压缩文件内的所有文件都压缩</p>
<h2 id="15、防火墙"><a href="#15、防火墙" class="headerlink" title="15、防火墙"></a>15、防火墙</h2><ul>
<li><p>查看版本： firewall-cmd –version</p>
</li>
<li><p>查看帮助： firewall-cmd –help</p>
</li>
<li><p>显示状态： firewall-cmd –state</p>
</li>
<li><p>更新防火墙规则： firewall-cmd –reload</p>
</li>
<li><p>添加规则：firewall-cmd –zone=public –add-port=80/tcp –permanent （–permanent永久生效，没有此参数重启后失效）</p>
</li>
<li><p>查看所有打开的端口： firewall-cmd –list-ports</p>
</li>
<li><p>查看某个端口：firewall-cmd –zone= public –query-port=80/tcp</p>
</li>
<li><p>删除：firewall-cmd –zone= public –remove-port=80/tcp –permanent</p>
</li>
<li><p>临时关闭防火墙：systemctl stop firewalld.service</p>
</li>
</ul>
<h2 id="16、安装软件"><a href="#16、安装软件" class="headerlink" title="16、安装软件"></a>16、安装软件</h2><p>首先，我们如果是用yum下载，则需要更改的地址，因为默认为国外地址，下载可能过于慢</p>
<p>1、首先我们备份一份CentOS-Base.repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>

<p>2、下载对应版本的CentOS-Base.repo, 放入/etc/yum.repos.d/</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS 5</span></span><br><span class="line">   wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class="line"><span class="meta">   #</span><span class="bash"> CentOS 6</span></span><br><span class="line">   wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="meta">   #</span><span class="bash"> CentOS 7</span></span><br><span class="line">   wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<p>3、清除缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="1、安装JDK"><a href="#1、安装JDK" class="headerlink" title="1、安装JDK"></a>1、安装JDK</h3><p><strong>下载地址</strong>：<a href="https://www.oracle.com/java/technologies/javase-jdk16-downloads.html">Java SE Development Kit 16 - Downloads (oracle.com)</a></p>
<p>1、利用共享文件夹去cp文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/linux3.png">2、通过   cd /mnt/hgfs    进入找到您的共享文件夹</p>
<p>3、然后  cp java包到/usr/local目录（推荐这个目录，你也可以不再这个目录）</p>
<p>4、解压  tar –zxvf java包  例： tar –zxvf jdk-8u151-linux-i586.tar.gz</p>
<p>5、进入  vim /etc/profile  配置环境变量</p>
<p>6、进入添加  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">export JRE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib:$JRE_HOME&#x2F;lib:CLASSPATH</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin:$PATH </span><br></pre></td></tr></table></figure>

<p>7、java为你安装的java的目录  保存后退出</p>
<p>也可以通过 设置软链接来设置快捷方式  例：ln -s jdk1.8.0_281 java（需要在进入之前设置）</p>
<p>8、重新编译环境变量：source /etc/profile</p>
<p>9、通过  java -version  查看当前java版本是否是你安装的版本</p>
<h3 id="2、Tomcat"><a href="#2、Tomcat" class="headerlink" title="2、Tomcat"></a>2、Tomcat</h3><p><strong>下载地址</strong>：<a href="https://archive.apache.org/dist/tomcat/">Index of /dist/tomcat (apache.org)</a></p>
<p>1、可以在外面解压后导入，也可以导入tar.zp包 ，到里面解压</p>
<p>2、拷贝到 /usr/local</p>
<p>3、进入tomcat /bin目录 </p>
<p>4、输入 ./startup.sh 启动tomcat</p>
<p>5、输入 ../logs 进入日志文件</p>
<p>6、输入tail -f catalina.out  查看是否报错</p>
<p>7、若没报错则完成，去浏览器访问虚拟机ip:8080进入tomcat则完成</p>
<p>8、如果进不去则需要关闭防火墙  systemctl stop firewalld.service</p>
<h3 id="3、MySQL"><a href="#3、MySQL" class="headerlink" title="3、MySQL"></a>3、MySQL</h3><h4 id="1、安装编译源码所需的工具和库"><a href="#1、安装编译源码所需的工具和库" class="headerlink" title="1、安装编译源码所需的工具和库"></a>1、安装编译源码所需的工具和库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install make cmake gcc gcc-c++ bison-devel ncurses-devel autoconf automake</span><br></pre></td></tr></table></figure>

<h4 id="2、新增mysql用户和用户组"><a href="#2、新增mysql用户和用户组" class="headerlink" title="2、新增mysql用户和用户组"></a>2、新增mysql用户和用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>

<h4 id="3、新建mysql安装目录与数据文件目录"><a href="#3、新建mysql安装目录与数据文件目录" class="headerlink" title="3、新建mysql安装目录与数据文件目录"></a>3、新建mysql安装目录与数据文件目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/mysql</span><br><span class="line">mkdir -p /data/mysqldb</span><br></pre></td></tr></table></figure>

<h4 id="4、下载mysql资源包，"><a href="#4、下载mysql资源包，" class="headerlink" title="4、下载mysql资源包，"></a>4、下载mysql资源包，</h4><p>解压(如果有mysql资源包则不需要下载，直接解压即可)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget  http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.39.tar.gz </span><br><span class="line">tar -zxv -f mysql-5.6.39.tar.gz </span><br><span class="line">cd mysql-5.6.39</span><br></pre></td></tr></table></figure>

<h4 id="5、编译安装MySQL"><a href="#5、编译安装MySQL" class="headerlink" title="5、编译安装MySQL"></a>5、编译安装MySQL</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DMYSQL_DATADIR=/data/mysqldb \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DENABLE_DOWNLOADS=1</span><br></pre></td></tr></table></figure>

<h4 id="6、编译源码与安装"><a href="#6、编译源码与安装" class="headerlink" title="6、编译源码与安装"></a>6、编译源码与安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="7、修改mysql安装目录的所有者和组"><a href="#7、修改mysql安装目录的所有者和组" class="headerlink" title="7、修改mysql安装目录的所有者和组"></a>7、修改mysql安装目录的所有者和组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql </span><br><span class="line">chown -R mysql:mysql .</span><br></pre></td></tr></table></figure>

<h4 id="8、修改mysql数据库文件目录所有者和组"><a href="#8、修改mysql数据库文件目录所有者和组" class="headerlink" title="8、修改mysql数据库文件目录所有者和组"></a>8、修改mysql数据库文件目录所有者和组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /data/mysqldb </span><br><span class="line">chown -R mysql:mysql .</span><br></pre></td></tr></table></figure>

<h4 id="9、初始化mysql数据库"><a href="#9、初始化mysql数据库" class="headerlink" title="9、初始化mysql数据库"></a>9、初始化mysql数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql </span><br><span class="line">scripts/mysql_install_db --user=mysql --datadir=/data/mysqldb</span><br></pre></td></tr></table></figure>

<h4 id="10、复制mysql服务启动配置文件"><a href="#10、复制mysql服务启动配置文件" class="headerlink" title="10、复制mysql服务启动配置文件"></a>10、复制mysql服务启动配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure>

<h4 id="11、复制mysql服务启动脚本"><a href="#11、复制mysql服务启动脚本" class="headerlink" title="11、复制mysql服务启动脚本"></a>11、复制mysql服务启动脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>

<h4 id="12、配置mysql环境"><a href="#12、配置mysql环境" class="headerlink" title="12、配置mysql环境"></a>12、配置mysql环境</h4><p>进入vim /etc/profile 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PATH=/usr/local/mysql/bin:/usr/local/mysql/lib:$PATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>

<p>更新环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="13、启动mysql服务"><a href="#13、启动mysql服务" class="headerlink" title="13、启动mysql服务"></a>13、启动mysql服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld start </span><br></pre></td></tr></table></figure>

<p>出现Starting MySQL.. SUCCESS!则表示成功了</p>
<h4 id="14、检查mysql服务是否启动"><a href="#14、检查mysql服务是否启动" class="headerlink" title="14、检查mysql服务是否启动"></a>14、检查mysql服务是否启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tnl | grep 3306</span><br></pre></td></tr></table></figure>

<h4 id="15、进入数据库"><a href="#15、进入数据库" class="headerlink" title="15、进入数据库"></a>15、进入数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p><strong>密码为空，登录成功则安装成功</strong></p>
<h4 id="16、设置密码"><a href="#16、设置密码" class="headerlink" title="16、设置密码"></a>16、设置密码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password &#x27;123456&#x27;</span><br></pre></td></tr></table></figure>

<p>这个一直报错，但是又可以123456进入</p>
<h4 id="17、设置mysql远程登录"><a href="#17、设置mysql远程登录" class="headerlink" title="17、设置mysql远程登录"></a>17、设置mysql远程登录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;123456&quot;; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>123456则是你远程连接这个数据库的密码</p>
<h4 id="18、创建指定权限的用户"><a href="#18、创建指定权限的用户" class="headerlink" title="18、创建指定权限的用户"></a>18、创建指定权限的用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant select,insert,update,delete on *.* to test1@&quot;%&quot; Identified by &quot;abc&quot;; </span><br></pre></td></tr></table></figure>

<h4 id="19、分配指定权限给指定用户访问数据库"><a href="#19、分配指定权限给指定用户访问数据库" class="headerlink" title="19、分配指定权限给指定用户访问数据库"></a>19、分配指定权限给指定用户访问数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY TABLES, DROP, INDEX, ALTER, LOCK TABLES, REFERENCES ON `databaseName`.* TO &#x27;user&#x27;@&#x27;192.168.41.21&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="20、刷新权限"><a href="#20、刷新权限" class="headerlink" title="20、刷新权限"></a>20、刷新权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h4 id="21、如果远程连接失败则需要关闭防火墙"><a href="#21、如果远程连接失败则需要关闭防火墙" class="headerlink" title="21、如果远程连接失败则需要关闭防火墙"></a>21、如果远程连接失败则需要关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h3 id="4、Maven"><a href="#4、Maven" class="headerlink" title="4、Maven"></a>4、Maven</h3><p>依旧是在/usr/local目录操作</p>
<h4 id="1、下载maven安装包"><a href="#1、下载maven安装包" class="headerlink" title="1、下载maven安装包"></a>1、下载maven安装包</h4><p>下载地址：<a href="https://maven.apache.org/download.cgi">Maven – Download Apache Maven</a></p>
<h4 id="2、解压安装包"><a href="#2、解压安装包" class="headerlink" title="2、解压安装包"></a>2、解压安装包</h4><p>我用的是tar包则用tar包解压方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.8.1-bin.tar.gz </span><br></pre></td></tr></table></figure>

<h4 id="3、创建一个软链接"><a href="#3、创建一个软链接" class="headerlink" title="3、创建一个软链接"></a>3、创建一个软链接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s apache-maven-3.8.1 maven</span><br></pre></td></tr></table></figure>

<h4 id="4、配置环境"><a href="#4、配置环境" class="headerlink" title="4、配置环境"></a>4、配置环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MAVEN_HOME=/usr/local/maven</span><br></pre></td></tr></table></figure>

<p>如果你安装了java，则在bin后面:$PATH前面添加即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>

<h4 id="5、重新编译环境"><a href="#5、重新编译环境" class="headerlink" title="5、重新编译环境"></a>5、重新编译环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="6、查看版本"><a href="#6、查看版本" class="headerlink" title="6、查看版本"></a>6、查看版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn --version</span><br></pre></td></tr></table></figure>

<p>是你安装的版本则安装成功</p>
<h4 id="7、修改下载地址"><a href="#7、修改下载地址" class="headerlink" title="7、修改下载地址"></a>7、修改下载地址</h4><p>为了下载架包速度快，我们还需要配置</p>
<p>进入root目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root</span><br></pre></td></tr></table></figure>

<ul>
<li>创建.m2目录，并且导入settings.xml</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir .m2</span><br></pre></td></tr></table></figure>

<p>settings.xml可以通过共享文件夹方式导入然后cp过来</p>
<ul>
<li>9、创建目录用于装jar包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir repository</span><br></pre></td></tr></table></figure>

<ul>
<li>进入repository目录</li>
</ul>
<p>获取目录地址，然后修改settings.xml的地址为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/root/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、Nginx"><a href="#5、Nginx" class="headerlink" title="5、Nginx"></a>5、Nginx</h3><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h4 id="2、下载解压安装包"><a href="#2、下载解压安装包" class="headerlink" title="2、下载解压安装包"></a>2、下载解压安装包</h4><p>进入 usr/local目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br></pre></td></tr></table></figure>

<p>创建nginx空目录，并且进入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir nginx</span><br><span class="line">cd nginx</span><br></pre></td></tr></table></figure>

<p>下载架包并且解压(如果有架包，可以不需要下载，直接解压即可)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="3、安装nginx"><a href="#3、安装nginx" class="headerlink" title="3、安装nginx"></a>3、安装nginx</h4><p>进入nginx目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/nginx-1.13.7</span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p>执行make命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>执行make install命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="4、启动nginx"><a href="#4、启动nginx" class="headerlink" title="4、启动nginx"></a>4、启动nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<h4 id="5、如果端口被占用则需要配置nginx-conf"><a href="#5、如果端口被占用则需要配置nginx-conf" class="headerlink" title="5、如果端口被占用则需要配置nginx.conf"></a>5、如果端口被占用则需要配置nginx.conf</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<p>进入后修改端口</p>
<h4 id="6、然后重新编译"><a href="#6、然后重新编译" class="headerlink" title="6、然后重新编译"></a>6、然后重新编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<p>然后启动即可</p>
<h4 id="7、查看nginx进程"><a href="#7、查看nginx进程" class="headerlink" title="7、查看nginx进程"></a>7、查看nginx进程</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

<p>8、如果需要在主机上访问则需要关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="9、nginx的常用命令"><a href="#9、nginx的常用命令" class="headerlink" title="9、nginx的常用命令"></a>9、nginx的常用命令</h4><p>进入nginx的sbin目录中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<p>关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="6、zookeeper"><a href="#6、zookeeper" class="headerlink" title="6、zookeeper"></a>6、zookeeper</h3><p><strong>下载地址</strong>：<a href="https://downloads.apache.org/zookeeper/">https://downloads.apache.org/zookeeper/</a></p>
<p>建议安装在/usr/local</p>
<h4 id="1、解压安装包"><a href="#1、解压安装包" class="headerlink" title="1、解压安装包"></a>1、解压安装包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.13.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="2、进入zookeeper的conf目录"><a href="#2、进入zookeeper的conf目录" class="headerlink" title="2、进入zookeeper的conf目录"></a>2、进入zookeeper的conf目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/zookeeper-3.4.13/conf</span><br></pre></td></tr></table></figure>

<h4 id="3、复制"><a href="#3、复制" class="headerlink" title="3、复制"></a>3、复制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<h4 id="4、修改zoo-cfg"><a href="#4、修改zoo-cfg" class="headerlink" title="4、修改zoo.cfg"></a>4、修改zoo.cfg</h4><p>dataDir是你日志存放的地址，自定义也可以不改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dataDir=../data</span><br></pre></td></tr></table></figure>

<h4 id="5、zookeeper命令"><a href="#5、zookeeper命令" class="headerlink" title="5、zookeeper命令"></a>5、zookeeper命令</h4><p>进入zookeeper目录下的bin</p>
<p><strong>启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure>

<p><strong>检查启动情况</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure>

<p><strong>使用客户端连接zookeeper</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./zkCli.sh</span><br></pre></td></tr></table></figure>

<p><strong>查看进程</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep zookeeper</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/6c0c53baa340">https://www.jianshu.com/p/6c0c53baa340</a></p>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>-Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery简介</title>
    <url>/2021/07/31/jquery/</url>
    <content><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>jquery是放js代码的地方，放js代码写的函数</p>
<p><strong>目的：</strong>简化js对HTML DOM操作</p>
<p><strong>语法：</strong></p>
<ul>
<li>$(document) 将document对象转换为jQuery函数可以用的对象</li>
<li>ready页面加载完运行</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="1、jQuery版本"><a href="#1、jQuery版本" class="headerlink" title="1、jQuery版本"></a>1、jQuery版本</h2><ul>
<li>jQuery 3.x<ul>
<li>jQuery Core 3.3.1-uncompressed.minifled.slim.slim miniflod</li>
<li>不兼容ie789,只支持最新的浏览器，很多老的jQuery插件不支持这个版本，相对1.x文件较小，提供不包含Ajax/动画API版本    </li>
</ul>
</li>
<li>jQuery 2.x<ul>
<li>jQuery Core 2.2.4-uncompressed.minifled</li>
<li>不兼容ie678,相对1.x文件较小，，官方只做BUG维护，功能不再新增</li>
</ul>
</li>
<li>jQuery 1.x<ul>
<li>jQuery Core 1.12.4-uncompressed.minifledd</li>
<li>兼容ie678,但是对其他版本文件较大，官方只做BUG维护，功能不再新增</li>
</ul>
</li>
</ul>
<h2 id="3、onload与ready的区别"><a href="#3、onload与ready的区别" class="headerlink" title="3、onload与ready的区别"></a>3、onload与ready的区别</h2><table>
<thead>
<tr>
<th></th>
<th>window.onload</th>
<th>$(document).ready()</th>
</tr>
</thead>
<tbody><tr>
<td>执行时机</td>
<td>当页面全部加装完后执行</td>
<td>网页中所有DOM文档结构绘制完毕后即刻执行，可能与DOM元素关联的内容（图片、flash、视频等）并没有加载完</td>
</tr>
<tr>
<td>编写个数</td>
<td>同一页面不能同时编写多个</td>
<td>同一页面能同时编写多个</td>
</tr>
</tbody></table>
<h2 id="4、DOM对象互转jQuery对象"><a href="#4、DOM对象互转jQuery对象" class="headerlink" title="4、DOM对象互转jQuery对象"></a>4、DOM对象互转jQuery对象</h2><p><strong>jQuery转换DOM对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $txtName =$ (<span class="string">&quot;#txtName&quot;</span>);      <span class="comment">//jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> txtName =$txtName[<span class="number">0</span>];            <span class="comment">//DOM对象</span></span><br></pre></td></tr></table></figure>

<p>DOM对象转换jQuery</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $txtName =$(<span class="string">&quot;#txtName&quot;</span>);        <span class="comment">//jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> txtName =$txtName.get(<span class="number">0</span>);       <span class="comment">//DOM对象</span></span><br></pre></td></tr></table></figure>

<p>注意：jQuery对象都是一个数组</p>
<h2 id="5、常用语法"><a href="#5、常用语法" class="headerlink" title="5、常用语法"></a>5、常用语法</h2><table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>css(“属性”,”属性值”)</td>
<td>为元素设置CSS样式的值</td>
</tr>
<tr>
<td>addClass()</td>
<td>为元素添加类样式</td>
</tr>
<tr>
<td>next()</td>
<td>获得元素其后紧邻的同辈元素</td>
</tr>
</tbody></table>
<h2 id="6、jQuery选择器"><a href="#6、jQuery选择器" class="headerlink" title="6、jQuery选择器"></a>6、jQuery选择器</h2><h3 id="1、基本选择器"><a href="#1、基本选择器" class="headerlink" title="1、基本选择器"></a>1、基本选择器</h3><table>
<thead>
<tr>
<th>名称</th>
<th>语法构成</th>
<th>描述</th>
<th>例</th>
</tr>
</thead>
<tbody><tr>
<td>标签选择器</td>
<td>标签名</td>
<td>选中指定所有标签</td>
<td>$(“div”)</td>
</tr>
<tr>
<td>类选择器</td>
<td>.类名</td>
<td>选中所有运用过该类名的标签</td>
<td>$(“.head”)</td>
</tr>
<tr>
<td>id选择器</td>
<td>#id名</td>
<td>选中运用该id得的标签</td>
<td>$(“#name”)</td>
</tr>
<tr>
<td>并集选择器</td>
<td>标签,.类名</td>
<td>逗号隔开，可以多种选择器一起运用</td>
<td>$(div,.head)</td>
</tr>
<tr>
<td>交集选择器</td>
<td>标签名跟（id或类名）不需要隔开</td>
<td>选中运用指定id或类名的所有标签名</td>
<td>$(h2.title)或$(h2#name)</td>
</tr>
<tr>
<td>全局选择器</td>
<td>*</td>
<td>全中页面中所有的元素</td>
<td>$(“*”)</td>
</tr>
<tr>
<td>后代选择器</td>
<td>任意选择器 任意选择器</td>
<td>选中选择器1中的所有运用选择器2的标签</td>
<td>$(“.head span”)</td>
</tr>
<tr>
<td>子选择器</td>
<td>任意选择器&gt;任意选择器</td>
<td>选中选择器1的儿子中运用选择器2的标签</td>
<td>$(“.head&gt;span”)</td>
</tr>
<tr>
<td>相邻选择器</td>
<td>任意选择器+任意选择器</td>
<td>选中相邻的选择器</td>
<td>$(“h2+h3”)</td>
</tr>
<tr>
<td>同辈选择器</td>
<td>任意选择器~任意选择器</td>
<td>选中同一层次中的第一个选择器1之后的选择器2</td>
<td>$(“img~button”)</td>
</tr>
<tr>
<td>属性选择器</td>
<td>[属性]</td>
<td>选中包含该属性的所有标签</td>
<td>$(“[name]”)</td>
</tr>
<tr>
<td>属性选择器</td>
<td>[属性=值]</td>
<td>选中包含该属性并且等于该值的所有标签</td>
<td>$(“[name=aa]”)</td>
</tr>
<tr>
<td>属性选择器</td>
<td>[属性!=值]</td>
<td>选中包含该属性并且不等于该值得所有标签</td>
<td>$(“[name!=aa]”)</td>
</tr>
<tr>
<td>属性选择器</td>
<td>[属性^=值]</td>
<td>选中包含该属性并且以该值开头的所有标签</td>
<td>$(“[name^=a]”)</td>
</tr>
<tr>
<td>属性选择器</td>
<td>[属性$=值]</td>
<td>选中包含该属性并且以该值结尾的所有标签</td>
<td>$(“[name$=a]”)</td>
</tr>
<tr>
<td>属性选择器</td>
<td>[属性*=值]</td>
<td>选中包含该元素并且包含指定值得所有标签</td>
<td>$(“[name*=a]”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:first</td>
<td>选中运用选择器1中第一个标签</td>
<td>$(“li:first”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:last</td>
<td>选中运用选择器1中最后一个标签</td>
<td>$(“li:last”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:even</td>
<td>选中运用选择器并且索引为偶数的所有标签(0开始)</td>
<td>$(“li:even”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:odd</td>
<td>选中运用选择器并且索引为奇数的所有标签(0开始)</td>
<td>$(“li:odd”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:eq(index)</td>
<td>选中索引等于index的元素(index从0开始)不包括index</td>
<td>$(“li:eq(1)”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:gt:(index)</td>
<td>选中所有索引大于index的元素,不包括index</td>
<td>$(“li:gt(1)”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:lt(index)</td>
<td>选取所有索引小于index的元素,不包括index</td>
<td>$(“li:lt(1)”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:not(任意选择器)</td>
<td>选中选择器1中除了选择器2的所有标签</td>
<td>$(“li:not(.three)”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>任意选择器:header（或:header）</td>
<td>选中选择器中的所有标题标题h1~h6</td>
<td>$(“li:header”)或$(“:header”)</td>
</tr>
<tr>
<td>过滤选择器</td>
<td>:focus</td>
<td>选中获取焦点对的元素</td>
<td>$(“:fcous”)</td>
</tr>
<tr>
<td>文本选择器</td>
<td>任意选择器:contains(‘’)或:contains(‘’)</td>
<td>获取指定文本的标签</td>
<td>$(“li:contains(‘a’)”)或$(“:contains(‘a’)”)</td>
</tr>
<tr>
<td>文本选择器</td>
<td>任意选择器:empty或:empty</td>
<td>获取所有不包含子元素或者文本的空标签</td>
<td>$(“li:empty”)或$(“:empty”)</td>
</tr>
<tr>
<td>文本选择器</td>
<td>任意选择器:parent或:parent</td>
<td>获取所有包含子元素或者文本的标签</td>
<td>$(“li:parent”)或$(“:parent”)</td>
</tr>
<tr>
<td>隐藏选择器</td>
<td>任意选择器:hidden或:hidden</td>
<td>获取隐藏的标签</td>
<td>$(“li:hidden”)或$(“:hidden”)</td>
</tr>
<tr>
<td>非隐藏选择器</td>
<td>任意选择器:visible或:visible</td>
<td>获取没有隐藏的标签</td>
<td>$(“li:visible”)或$(“:visible”)</td>
</tr>
</tbody></table>
<h3 id="2、input中的选择器"><a href="#2、input中的选择器" class="headerlink" title="2、input中的选择器"></a>2、input中的选择器</h3><table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>例</th>
</tr>
</thead>
<tbody><tr>
<td>:input 或 任意选择器:inut</td>
<td>获取整个页面中的input标签(或获取指定选择器中对的input)</td>
<td>$(“:input”)或$(“li:input”)</td>
</tr>
<tr>
<td>:text 或 任意选择器:text</td>
<td>获取整个页面中的input标签属性type=text(或获取指定选择器中对的input属性type=text)</td>
<td>$(“:text”)或$(“li:text”)</td>
</tr>
<tr>
<td>…..每个type的值都有对应的语法</td>
<td></td>
<td></td>
</tr>
<tr>
<td>:enabled或 input:enabled</td>
<td>获取所有可以修改的input(或获取input中可修改input)</td>
<td>$(“:enabled”)或$(“input:enabled”)</td>
</tr>
<tr>
<td>:disabled或 input:disabled</td>
<td>获取所有不可以修改的input(或获取input中不可修改input)</td>
<td>$(“:disabled”)或$(“input:disabled”)</td>
</tr>
<tr>
<td>:checked或 input:checked</td>
<td>获取所有已经选中的(或获取input中已经选中的)</td>
<td>$(“:checked”)或$(“input:checked”)</td>
</tr>
</tbody></table>
<h3 id="3、样式操作"><a href="#3、样式操作" class="headerlink" title="3、样式操作"></a>3、样式操作</h3><h4 id="1、css直接设置样式"><a href="#1、css直接设置样式" class="headerlink" title="1、css直接设置样式"></a>1、css直接设置样式</h4><p><strong>1、单个添加</strong></p>
<ul>
<li><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">css(name,value)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;1px solid green&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>2、多个添加</strong></p>
<p><strong>多个添加的俩种方式</strong></p>
<ul>
<li><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">css(&#123;<span class="attr">name</span>:value, <span class="attr">name</span>:value,<span class="attr">name</span>:value…&#125;)</span><br><span class="line">css(name,value).css(name,value)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).css(&#123;<span class="string">&quot;border&quot;</span>:<span class="string">&quot;1px solid green&quot;</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;)</span><br><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;1px solid green&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2、addClass追加样式"><a href="#2、addClass追加样式" class="headerlink" title="2、addClass追加样式"></a>2、addClass追加样式</h4><ul>
<li><p><strong>单个追加</strong></p>
<ul>
<li><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addClass(<span class="class"><span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).addClass(<span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>多个追加</strong></p>
<ul>
<li><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addClass(class1 class2 … classN)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).addClass(<span class="string">&quot;x y z&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>注意！！！！！</strong></p>
<p>追加的只能是类，多个添加的时候空格隔开</p>
<h4 id="3、removeClass移除样式"><a href="#3、removeClass移除样式" class="headerlink" title="3、removeClass移除样式"></a>3、removeClass移除样式</h4><ul>
<li><p><strong>单个移除</strong></p>
<ul>
<li><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">removeClass(<span class="class"><span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).removeClass(<span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>多个移除</strong></p>
<ul>
<li><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">removeClass(class1 class2 … classN)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).removeClass(<span class="string">&quot;x y z&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>注意！！！！！</strong></p>
<p>移除的也只能是类，多个移除的时候空格隔开</p>
<h4 id="4、toggleClass切换样式"><a href="#4、toggleClass切换样式" class="headerlink" title="4、toggleClass切换样式"></a>4、toggleClass切换样式</h4><ul>
<li><p><strong>单个移除</strong></p>
<ul>
<li><p><strong>语法</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toggleClass(<span class="class"><span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>例</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).toggleClass(<span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>多个移除</strong></p>
<ul>
<li><p><strong>语法</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toggleClass(class1 class2 … classN)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>例</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).toggleClass(<span class="string">&quot;x y z&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>注意！！！！！</strong><br>切换的也只能是类，多个切换的时候空格隔开，切换时，调用中的则删除，没调用的则调用</p>
<h3 id="4、获取节点内容"><a href="#4、获取节点内容" class="headerlink" title="4、获取节点内容"></a>4、获取节点内容</h3><h4 id="1、html-代码操作"><a href="#1、html-代码操作" class="headerlink" title="1、html()代码操作"></a>1、html()代码操作</h4><ul>
<li><p><strong>获取html值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).html()</span><br></pre></td></tr></table></figure></li>
<li><p><strong>更改html值</strong></p>
</li>
<li><p>```js<br>$(“#xyz”).html(“<span>雪碧</span>“)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 2、text()文本操作</span><br><span class="line"></span><br><span class="line">- **获取text值**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$(“#xyz”).text()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **更改text值**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$(“#xyz”).text(“<span>雪碧</span>“)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**注意**：若输入有html代码，不会转换为html的代码，会直接显示出来</span><br><span class="line"></span><br><span class="line">#### 3、val()获取值</span><br><span class="line"></span><br><span class="line">**例：**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;xyz&quot; value&#x3D;&quot;123&quot;&gt;;</span><br><span class="line">$(&quot;#xyz&quot;).val()</span><br></pre></td></tr></table></figure></li>
</ul>
<p>结果为123</p>
<h4 id="4、each循环"><a href="#4、each循环" class="headerlink" title="4、each循环"></a>4、each循环</h4><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>];</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,n</span>)</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>普通数组<ul>
<li>i为循环下标，n为值</li>
</ul>
</li>
<li>JSON<ul>
<li>i为键，n为值</li>
</ul>
</li>
</ul>
<h3 id="5、节点属性操作"><a href="#5、节点属性操作" class="headerlink" title="5、节点属性操作"></a>5、节点属性操作</h3><h4 id="1、attr-设置节点属性"><a href="#1、attr-设置节点属性" class="headerlink" title="1、attr()设置节点属性"></a>1、attr()设置节点属性</h4><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;xyz&quot;</span>&gt;喝雪碧&lt;/div&gt;</span><br><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).attr(<span class="string">&quot;width&quot;</span>,<span class="string">&quot;250px&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;xyz&quot;</span> width=<span class="string">&quot;250px&quot;</span>&gt;喝雪碧&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2、removeAttr-删除节点属性"><a href="#2、removeAttr-删除节点属性" class="headerlink" title="2、removeAttr()删除节点属性"></a>2、removeAttr()删除节点属性</h4><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;xyz&quot;</span> width=<span class="string">&quot;250px&quot;</span>&gt;志狗喝雪碧&lt;/div&gt;</span><br><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).removeAttr(<span class="string">&quot;width&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;xyz&quot;</span>&gt;志狗喝雪碧&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6、节点操作"><a href="#6、节点操作" class="headerlink" title="6、节点操作"></a>6、节点操作</h3><h4 id="1、创建节点元素"><a href="#1、创建节点元素" class="headerlink" title="1、创建节点元素"></a>1、创建节点元素</h4><ul>
<li>$(selector)：通过选择器获取节点</li>
<li>$(element)：把DOM节点转化成jQuery节点</li>
<li>$(html)：使用HTML字符串创建jQuery节点</li>
</ul>
<h4 id="2、插入子节点"><a href="#2、插入子节点" class="headerlink" title="2、插入子节点"></a>2、插入子节点</h4><table>
<thead>
<tr>
<th>语法</th>
<th>用途</th>
<th>例</th>
</tr>
</thead>
<tbody><tr>
<td>append(content)</td>
<td>$(A).append(B)表示将B追加到A中</td>
<td>$(“#x”).append($(“#y”))</td>
</tr>
<tr>
<td>appendTo(content)</td>
<td>$(A).appendTo(B)表示把A追加到B中</td>
<td>$(“#x”).appendTo($(“#y”))</td>
</tr>
<tr>
<td>prepend(content)</td>
<td>$(A). prepend (B)表示将B前置插入到A中</td>
<td>$(“#x”).prepend($(“#y”))</td>
</tr>
<tr>
<td>prependTo(content)</td>
<td>$(A). prependTo (B)表示将A前置插入到B中</td>
<td>$(“#x”).prependTo($(“#y”))</td>
</tr>
</tbody></table>
<h4 id="3、插入同辈节点"><a href="#3、插入同辈节点" class="headerlink" title="3、插入同辈节点"></a>3、插入同辈节点</h4><table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>after(content)</td>
<td>$(A).after (B)表示将B插入到A之后</td>
</tr>
<tr>
<td>insertAfter(content)</td>
<td>$(A). insertAfter (B)表示将A插入到B之后</td>
</tr>
<tr>
<td>before(content)</td>
<td>$(A). before (B)表示将B插入至A之前</td>
</tr>
<tr>
<td>insertBefore(content)</td>
<td>$(A). insertBefore (B)表示将A插入到B之前</td>
</tr>
</tbody></table>
<h4 id="4、替换节点"><a href="#4、替换节点" class="headerlink" title="4、替换节点"></a>4、替换节点</h4><table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>replaceWith(content)</td>
<td>$(A).after (B)表示将A替换成B</td>
</tr>
<tr>
<td>replaceAll(content)</td>
<td>$(A).replaceAll(B)表示将B替换成A</td>
</tr>
</tbody></table>
<h4 id="5、复制节点"><a href="#5、复制节点" class="headerlink" title="5、复制节点"></a>5、复制节点</h4><p><strong>语法</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(A).clone(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#x&quot;</span>).clone(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h4 id="6、删除节点"><a href="#6、删除节点" class="headerlink" title="6、删除节点"></a>6、删除节点</h4><table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>remove()</td>
<td>删除整个节点，</td>
</tr>
<tr>
<td>detach()</td>
<td>删除整个节点，保留元素的绑定事件、附加的数据</td>
</tr>
<tr>
<td>empty()</td>
<td>清空节点内容，</td>
</tr>
</tbody></table>
<p><strong>注意：</strong></p>
<ul>
<li>remove()若存在多个，则全部删除</li>
<li>empty()若有多个，则删除是该节点的全部文本</li>
</ul>
<h4 id="7、遍历子元素"><a href="#7、遍历子元素" class="headerlink" title="7、遍历子元素"></a>7、遍历子元素</h4><p>获取<body>元素的子元素，但不包含子元素的子元素</body></p>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;body&quot;</span>).children();</span><br></pre></td></tr></table></figure>

<h4 id="8、遍历前辈元素"><a href="#8、遍历前辈元素" class="headerlink" title="8、遍历前辈元素"></a>8、遍历前辈元素</h4><ul>
<li>parent()：获取元素的父级元素</li>
<li>parents()：元素元素的祖先元素  获得的是父元素 父元素的父元素….</li>
<li>用法跟插入子节点基本上一致</li>
</ul>
<h3 id="7、CSS-DOM操作"><a href="#7、CSS-DOM操作" class="headerlink" title="7、CSS-DOM操作"></a>7、CSS-DOM操作</h3><table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>css()</td>
<td>设置或返回匹配元素的样式属性</td>
</tr>
<tr>
<td>height([value])</td>
<td>设置或返回匹配元素的高度</td>
</tr>
<tr>
<td>width([value])</td>
<td>设置或返回匹配元素的宽度</td>
</tr>
<tr>
<td>offset([value])</td>
<td>返回以像素为单位的top和eft坐标。此方法仅对可见元素有效</td>
</tr>
</tbody></table>
<h3 id="8、事件绑定"><a href="#8、事件绑定" class="headerlink" title="8、事件绑定"></a>8、事件绑定</h3><h4 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h4><ul>
<li>$(选择器).事件名称(事件处理函数)</li>
<li>$(选择器).on(事件名称，事件处理函数)</li>
</ul>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">$(<span class="string">&quot;#xyz&quot;</span>).on(click,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2、事件"><a href="#2、事件" class="headerlink" title="2、事件"></a>2、事件</h4><table>
<thead>
<tr>
<th>方法</th>
<th>执行时机</th>
</tr>
</thead>
<tbody><tr>
<td>click()</td>
<td>鼠标单击时</td>
</tr>
<tr>
<td>mouseover()</td>
<td>鼠标移过时</td>
</tr>
<tr>
<td>mouseout()</td>
<td>鼠标移出时</td>
</tr>
<tr>
<td>keydown()</td>
<td>按下键盘时</td>
</tr>
<tr>
<td>keyup()</td>
<td>释放按键时</td>
</tr>
<tr>
<td>keypress()</td>
<td>产生可以打印的字符时</td>
</tr>
<tr>
<td>focus()</td>
<td>获得焦点时</td>
</tr>
<tr>
<td>blur()</td>
<td>失去焦点时</td>
</tr>
<tr>
<td>hover()</td>
<td>mouseover()与mouseout()的组合</td>
</tr>
</tbody></table>
<h4 id="3、显示隐藏"><a href="#3、显示隐藏" class="headerlink" title="3、显示隐藏"></a>3、显示隐藏</h4><h5 id="1、show-显示-hide-隐藏"><a href="#1、show-显示-hide-隐藏" class="headerlink" title="1、show(显示)/hide(隐藏)"></a>1、show(显示)/hide(隐藏)</h5><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).show();</span><br><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).hide();</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>从右向左，逐渐消失</p>
<h5 id="2、fadeIn-显示-fadeOut-隐藏"><a href="#2、fadeIn-显示-fadeOut-隐藏" class="headerlink" title="2、fadeIn(显示)/fadeOut(隐藏)"></a>2、fadeIn(显示)/fadeOut(隐藏)</h5><p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).fadeIn();</span><br><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).fadeOut();</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>逐渐变淡</p>
<h5 id="3、slideDown-显示-slideUp-隐藏"><a href="#3、slideDown-显示-slideUp-隐藏" class="headerlink" title="3、slideDown(显示)/slideUp(隐藏)"></a>3、slideDown(显示)/slideUp(隐藏)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).slideDown();</span><br><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).slideUp();</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>高度往中缩小，直到消失</p>
<h5 id="4、扩展"><a href="#4、扩展" class="headerlink" title="4、扩展"></a>4、扩展</h5><p>直接slow属性则慢慢的隐藏 也可以为数字，以毫秒为单位</p>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).hide(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.tipsbox&quot;</span>).hide(<span class="number">1000</span>); </span><br></pre></td></tr></table></figure>

<h3 id="9、Validate插件"><a href="#9、Validate插件" class="headerlink" title="9、Validate插件"></a>9、Validate插件</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>用于方便快捷的表单验证</p>
<p>官方地址：<a href="https://jqueryvalidation.org/">https://jqueryvalidation.org/</a></p>
<p>需要导入三个js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“scripts/jquery.min.js</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“scripts/jquery.validate.min.js</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;scripts/messages_zh.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、参数"><a href="#2、参数" class="headerlink" title="2、参数"></a>2、参数</h4><table>
<thead>
<tr>
<th>序号</th>
<th>规则</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>required:true</td>
<td>必须输入的字段。</td>
</tr>
<tr>
<td>2</td>
<td>remote:”check.php”</td>
<td>使用 ajax 方法调用 check.php 验证输入值。</td>
</tr>
<tr>
<td>3</td>
<td>email:true</td>
<td>必须输入正确格式的电子邮件。</td>
</tr>
<tr>
<td>4</td>
<td>url:true</td>
<td>必须输入正确格式的网址。</td>
</tr>
<tr>
<td>5</td>
<td>date:true</td>
<td>必须输入正确格式的日期。日期校验 ie6 出错，慎用。</td>
</tr>
<tr>
<td>6</td>
<td>dateISO:true</td>
<td>必须输入正确格式的日期（ISO），例如：2009-06-23，1998/01/22。只验证格式，不验证有效性。</td>
</tr>
<tr>
<td>7</td>
<td>number:true</td>
<td>必须输入合法的数字（负数，小数）。</td>
</tr>
<tr>
<td>8</td>
<td>digits:true</td>
<td>必须输入整数。</td>
</tr>
<tr>
<td>9</td>
<td>creditcard:</td>
<td>必须输入合法的信用卡号。</td>
</tr>
<tr>
<td>10</td>
<td>equalTo:”#field”</td>
<td>输入值必须和 #field 相同。</td>
</tr>
<tr>
<td>11</td>
<td>accept:</td>
<td>输入拥有合法后缀名的字符串（上传文件的后缀）。</td>
</tr>
<tr>
<td>12</td>
<td>maxlength:5</td>
<td>输入长度最多是 5 的字符串（汉字算一个字符）。</td>
</tr>
<tr>
<td>13</td>
<td>minlength:10</td>
<td>输入长度最小是 10 的字符串（汉字算一个字符）。</td>
</tr>
<tr>
<td>14</td>
<td>rangelength:[5,10]</td>
<td>输入长度必须介于 5 和 10 之间的字符串（汉字算一个字符）。</td>
</tr>
<tr>
<td>15</td>
<td>range:[5,10]</td>
<td>输入值必须介于 5 和 10 之间。</td>
</tr>
<tr>
<td>16</td>
<td>max:5</td>
<td>输入值不能大于 5。</td>
</tr>
<tr>
<td>17</td>
<td>min:10</td>
<td>输入值不能小于 10。</td>
</tr>
</tbody></table>
<h4 id="3、使用语法"><a href="#3、使用语法" class="headerlink" title="3、使用语法"></a>3、使用语法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例： </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;tijiao&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">在body结导入js</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.validate.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/messages_zh.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="comment">//自定义函数</span></span></span><br><span class="line"><span class="javascript">		$.validator.addMethod(</span></span><br><span class="line"><span class="javascript">			<span class="string">&quot;zdy&quot;</span>,<span class="comment">//自定义函数名</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  			 	<span class="keyword">return</span> value === <span class="string">&quot;zdy&quot;</span> ;</span></span><br><span class="line">			&#125;,</span><br><span class="line"><span class="javascript">			<span class="string">&quot;您只能输入zdy&quot;</span>,<span class="comment">//上面函数返回false则运行，错误提示语句</span></span></span><br><span class="line">		);</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#tijiao&quot;</span>).validate(&#123;</span></span><br><span class="line">			rules:&#123;</span><br><span class="line">				name:&#123;</span><br><span class="line"><span class="javascript">					required:<span class="literal">true</span>,  <span class="comment">//里面跟条件参数，多个的时候逗号隔开</span></span></span><br><span class="line">					minlength:2,</span><br><span class="line"><span class="javascript">					zdy:<span class="literal">true</span>,<span class="comment">//调用自定义函数,下面则不需要添加提示语句，								因为自定义函数自带提示语句</span></span></span><br><span class="line">					remote:&#123;</span><br><span class="line"><span class="javascript">						url:<span class="string">&quot;url地址&quot;</span>,</span></span><br><span class="line"><span class="javascript">						type:<span class="string">&quot;请求方式(post或get)&quot;</span>,</span></span><br><span class="line"><span class="javascript">						dataType:<span class="string">&quot;预期返回类型&quot;</span>,</span></span><br><span class="line">						data:&#123;</span><br><span class="line"><span class="javascript">							username:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">								<span class="keyword">return</span> $(<span class="string">&quot;#name&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">							&#125;<span class="comment">//传参数，传多个逗号隔开</span></span></span><br><span class="line"><span class="javascript">							<span class="comment">//注意：从后台返回的值只能是false或true</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">					&#125;,</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line"><span class="javascript">			errorElement: <span class="string">&quot;b&quot;</span>,<span class="comment">//只能是标签，最好没调用过的标签，否则有可								能会出现字体重叠 ，该标签存在，则在标签内								 该表，不存在则才input后面追加</span></span></span><br><span class="line">			messages:&#123;</span><br><span class="line">				name:&#123;</span><br><span class="line"><span class="javascript">					required:<span class="string">&quot;不可为空&quot;</span>,</span></span><br><span class="line"><span class="javascript">					minlength:<span class="string">&quot;不可小于2个字节&quot;</span>,</span></span><br><span class="line"><span class="javascript">					remote:<span class="string">&quot;用户已存在&quot;</span><span class="comment">//false则运行,</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10、AJAX"><a href="#10、AJAX" class="headerlink" title="10、AJAX"></a>10、AJAX</h3><h4 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>jQuery简化了jsd的ajax请求</p>
<p>使用三个函数可以实现ajax请求的处理</p>
<ul>
<li>$.ajax():jquery中实现ajax对的核心函数</li>
<li>$.post():使用post方式做ajax请求</li>
<li>$.post():使用get方式做ajax请求</li>
</ul>
<p><strong>注：</strong>$.post()和$.get()他们在内部都是调用$.ajax();</p>
<h4 id="2、-ajax-参数"><a href="#2、-ajax-参数" class="headerlink" title="2、$.ajax()参数"></a>2、$.ajax()参数</h4><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>asyno</td>
<td>boolean</td>
<td>true表示异步请求(可以不写,默认为true)</td>
</tr>
<tr>
<td>contentType</td>
<td>一个字符串</td>
<td>从浏览器发送服务器的参数的类型(可以不写,要明确类型则可以写)</td>
</tr>
<tr>
<td>data</td>
<td>字符串，数组，json</td>
<td>请求对的参数和参数值，常用的是json格式</td>
</tr>
<tr>
<td>dataType</td>
<td>xml,html,text,json</td>
<td>设置服务器返回的数据格式(不一定会返回你设置的值(少多数情况))</td>
</tr>
<tr>
<td>error</td>
<td>js函数</td>
<td>请求发生错误时，执行的函数</td>
</tr>
<tr>
<td>sucess</td>
<td>js函数</td>
<td>请求成功，从服务器顶端返回的数据了执行</td>
</tr>
<tr>
<td>url</td>
<td>地址</td>
<td>请求地址</td>
</tr>
<tr>
<td>type</td>
<td>get,post</td>
<td>请求方式(默认get)</td>
</tr>
</tbody></table>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="keyword">async</span>:<span class="literal">true</span>,</span><br><span class="line">    contentType:<span class="string">&quot;application/json&quot;</span>,<span class="comment">//明确是json类型</span></span><br><span class="line">    data:&#123;<span class="attr">name</span>:<span class="string">&#x27;list&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;请求出现错误时执行&#125;,</span><br><span class="line">	success:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//value相当于responseText，是jQuery处理后的数据</span></span><br><span class="line">	&#125;，</span><br><span class="line">	url:<span class="string">&quot;bmiAjax&quot;</span>，</span><br><span class="line">	type:<span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>sucess跟js中的readyState===4&amp;&amp;status===200一样</li>
<li>主要使用的是url,data,dataType,success</li>
</ul>
<h4 id="3、-post"><a href="#3、-post" class="headerlink" title="3、$.post()"></a>3、$.post()</h4><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.post(URL,data,<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>),<span class="title">dataType</span>)</span></span><br></pre></td></tr></table></figure>

<p><strong>直接写值，不跟ajax一样</strong></p>
<p><strong>$.get()也是一样的</strong></p>
<h4 id="4、serialize（）"><a href="#4、serialize（）" class="headerlink" title="4、serialize（）"></a>4、serialize（）</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(选择器).serialize()</span><br></pre></td></tr></table></figure>

<p><strong>用途：</strong>返回选择器中的所有input，根据url地址?后的格式返回</p>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#tijiao&quot;</span>).serialize()</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>没有不再form里面则返回空，选择器选择的只能是form</p>
<h4 id="5、serializeArray"><a href="#5、serializeArray" class="headerlink" title="5、serializeArray()"></a>5、serializeArray()</h4><p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(选择器).serializeArray()</span><br></pre></td></tr></table></figure>

<p><strong>用途：</strong>返回选择器中的所有input对象，根据键值对的形式返回</p>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#tijiao&quot;</span>).serializeArray()</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>没有不再form里面则返回空，选择器选择的只能是form</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>-jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2021/07/31/maven/</url>
    <content><![CDATA[<h1 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h1><h2 id="1、maven简介"><a href="#1、maven简介" class="headerlink" title="1、maven简介"></a>1、maven简介</h2><h3 id="1、什么是maven"><a href="#1、什么是maven" class="headerlink" title="1、什么是maven"></a>1、什么是maven</h3><ul>
<li>Maven是服务于Java平台的一种自动构建项目工具。</li>
<li>基于项目对象模型(<code>P</code>roject <code>O</code>bject <code>M</code>odel)，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</li>
</ul>
<h3 id="2、maven的好处"><a href="#2、maven的好处" class="headerlink" title="2、maven的好处"></a>2、maven的好处</h3><h2 id="2、maven环境配置"><a href="#2、maven环境配置" class="headerlink" title="2、maven环境配置"></a>2、maven环境配置</h2><p>1、下载地址：<a href="https://maven.apache.org/download.cgi">Maven – Download Apache Maven</a></p>
<p>2、下载后找个地方解压压缩包</p>
<p>3、配置环境变量</p>
<ul>
<li>都学到这了，应该都会配置环境变量了，就不图文教进入环境变量了</li>
<li><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-15_10-25-31.png" alt="配置"></li>
<li>然后在path里面添加%M2_HOME%\bin</li>
<li>windows+r输入cmd进入控制台</li>
<li>输入mvn –v验证环境变量是否成功，</li>
<li><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-15_10-26-59.png" alt="成功"></li>
</ul>
<p>这样子则配置环境变量成功了，失败的话他会显示mvn不存在</p>
<h2 id="3、Maven的各个阶段"><a href="#3、Maven的各个阶段" class="headerlink" title="3、Maven的各个阶段"></a>3、Maven的各个阶段</h2><ul>
<li>清理：将以前编译的旧的class文件清理掉，为下一次编译做准备。</li>
<li>编译：将java文件编译为class字节码文件。</li>
<li>测试：自动运行junit测试。</li>
<li>报告：测试程序的运行结果。</li>
<li>打包：将工程文件进行打包，动态web工程打的是war包，Java工程打的是jar包。</li>
<li>安装：Maven的特定概念，指将Maven复制到“仓库”中的指定位置。</li>
<li>部署：将动态web工程的war包复制到服务器中。</li>
</ul>
<h2 id="4、创建maven文件"><a href="#4、创建maven文件" class="headerlink" title="4、创建maven文件"></a>4、创建maven文件</h2><ul>
<li>创建普通java项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId&#x3D;com.znsd.maven -DartifactId&#x3D;maven-demo -DarchetypeArtifactId&#x3D;maven-archetype-quickstart</span><br><span class="line"># groupId:包名</span><br><span class="line"># artifactId:项目名称</span><br><span class="line"># archetypeArtifactId:模版id</span><br></pre></td></tr></table></figure>

<ul>
<li>创建javaWeb项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId&#x3D;com.znsd.maven -DartifactId&#x3D;maven-web -DarchetypeArtifactId&#x3D;maven-archetype-webapp</span><br></pre></td></tr></table></figure>

<p>创建也是在控制台输入，你在那个盘输入，就在那个盘创建</p>
<h2 id="5、版本的叫法"><a href="#5、版本的叫法" class="headerlink" title="5、版本的叫法"></a>5、版本的叫法</h2><ol>
<li>SNAPSHOT 快照版本 （不稳定，经常更新）</li>
<li>MIRROR  镜像（不稳定，经常更新）</li>
<li>beta 公测（经公示开发人员，测试人员内部测试）</li>
<li>RELEASE 发布版本（稳定版本）</li>
</ol>
<h2 id="6、仓库配置"><a href="#6、仓库配置" class="headerlink" title="6、仓库配置"></a>6、仓库配置</h2><p>maven下载的架包都在C:\Users\86157 \ .m2\repository 也就是本地仓库了</p>
<p>86157是你的电脑用户名</p>
<p>在C:\Users\86157 \ .m2创建settings.xml，如果不配这个的话直接访问镜像仓库，则会造成访问过慢</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/settings/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--本地仓库路径（可以修改）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:\Users\86157\.m2\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.codehaus.cargo<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 为部署构件至Nexus配置认证信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置镜像让Maven只使用私服 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>my maven repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--远程仓库路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.0.10:8081/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置Nexus仓库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;url&gt;http://central&lt;/url&gt; --&gt;</span></span><br><span class="line">            		<span class="comment">&lt;!--远程仓库路径--&gt;</span></span><br><span class="line">				    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.0.10:8081/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;url&gt;http://central&lt;/url&gt; --&gt;</span></span><br><span class="line">           			 <span class="comment">&lt;!--远程仓库路径--&gt;</span></span><br><span class="line">				    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.0.10:8081/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在maven项目中的pom.xml中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--架包名--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 </span></span><br><span class="line"><span class="comment">            - compile ：默认范围，用于编译   </span></span><br><span class="line"><span class="comment">            - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath   </span></span><br><span class="line"><span class="comment">            - runtime: 在执行时需要使用   </span></span><br><span class="line"><span class="comment">            - test:    用于test任务时使用   </span></span><br><span class="line"><span class="comment">            - system: 需要外在提供相应的元素。通过systemPath来取得   </span></span><br><span class="line"><span class="comment">            - systemPath: 仅用于范围为system。提供相应的路径   </span></span><br><span class="line"><span class="comment">            - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在cmd中加入这个maven项目，输入mvn package,则就会加载架包</p>
<p>加载架包流程<img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="流程图"></p>
<p>如果报错，则检测你导入的包是否存在，去访问镜像仓库的maven:<a href="https://mvnrepository.com/">Maven Repository: Search/Browse/Explore (mvnrepository.com)</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-15_16-12-10.png" alt="错误"></p>
<h2 id="7、常用的指令"><a href="#7、常用的指令" class="headerlink" title="7、常用的指令"></a>7、常用的指令</h2><h3 id="Maven的常见构建命令"><a href="#Maven的常见构建命令" class="headerlink" title="Maven的常见构建命令"></a>Maven的常见构建命令</h3><p>mvn </p>
<ul>
<li>-v –查看Maven版本</li>
<li>compile –编译主程序</li>
<li>test-complie –编译测试程序</li>
<li>test –执行测试</li>
<li>package –打包项目</li>
<li>clean –删除target</li>
<li>install –安装jar包到本地仓库中</li>
<li>site –生成站点</li>
<li>exec:java –Dexec.mainClass=“main方法所在的类” 运行main方法</li>
</ul>
<p><strong>使用Maven命令时，必须进入pom.xml所在的目录。</strong></p>
<h2 id="8、使用eclipse创建maven文件"><a href="#8、使用eclipse创建maven文件" class="headerlink" title="8、使用eclipse创建maven文件"></a>8、使用eclipse创建maven文件</h2><p>1、修改Maven默认对的jdk版本</p>
<ul>
<li>设置通过Maven创建的工程的jdk版本</li>
<li>打开你maven仓库地址settings.xml文件，找到profiles标签，加入如下代码。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、创建Maven项目</p>
<p><strong>注意！！！！！</strong></p>
<ul>
<li>创建maven之前，去访问一下你下载架包的url地址，是否能进入</li>
<li>如果你访问不了，你创建话会报错，那么你都需要把本地对的所有架包删除，重新开始，</li>
<li>如果能访问进入url地址，则可以开始创建了</li>
</ul>
<p>crtl+n，输入maven</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-15_20-15-30.png" alt="maven项目地址"></p>
<p>下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-17_16-13-48.png" alt="Snipaste_2021-05-17_16-13-48"></p>
<p>下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-15_20-17-48.png" alt="maven项目地址"></p>
<p>webMaven文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-15_20-19-14.png" alt="maven项目地址"></p>
<p>Group Id公司或组织域名倒序+项目名，</p>
<p>Artifact Id 项目名 </p>
<p>package包名</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-15_20-21-15.png" alt="maven项目地址"></p>
<p>然后就创建成功了。。。</p>
<h2 id="9、SSM整合需要的架包"><a href="#9、SSM整合需要的架包" class="headerlink" title="9、SSM整合需要的架包"></a>9、SSM整合需要的架包</h2><p>在properties标签内添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后面可以直接根据这个标签获取里面带的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.geronimo.bundles<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2_1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.darkphoenixs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果jsp报错，则导入jsp的架包</p>
<h2 id="10、架包"><a href="#10、架包" class="headerlink" title="10、架包"></a>10、架包</h2><h3 id="1、jsp架包"><a href="#1、jsp架包" class="headerlink" title="1、jsp架包"></a>1、jsp架包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、mybatis架包"><a href="#2、mybatis架包" class="headerlink" title="2、mybatis架包"></a>2、mybatis架包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、数据源"><a href="#3、数据源" class="headerlink" title="3、数据源"></a>3、数据源</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure>

<h3 id="4、JSON架包"><a href="#4、JSON架包" class="headerlink" title="4、JSON架包"></a>4、JSON架包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、spring架包"><a href="#5、spring架包" class="headerlink" title="5、spring架包"></a>5、spring架包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、springMVC架包"><a href="#6、springMVC架包" class="headerlink" title="6、springMVC架包"></a>6、springMVC架包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、Hessian"><a href="#7、Hessian" class="headerlink" title="7、Hessian"></a>7、Hessian</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8、HttpClient"><a href="#8、HttpClient" class="headerlink" title="8、HttpClient"></a>8、HttpClient</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9、dubbo架包"><a href="#9、dubbo架包" class="headerlink" title="9、dubbo架包"></a>9、dubbo架包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator-framework --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10、springboot依赖"><a href="#10、springboot依赖" class="headerlink" title="10、springboot依赖"></a>10、springboot依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--简化属性类依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入模板引擎依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--idea ctrl+f9热部署依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11、腾讯云依赖"><a href="#11、腾讯云依赖" class="headerlink" title="11、腾讯云依赖"></a>11、腾讯云依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--腾讯云短信发送需要包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.qcloudsms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qcloudsms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--腾讯云存储依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cos_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>-maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Css简介</title>
    <url>/2021/07/31/CSS/</url>
    <content><![CDATA[<p>未更改有空会修改更新</p>
<h2 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h2><p>1、HTML主要做结构，显示元素内容</p>
<p>2、CSS美化HTML，布局网页</p>
<p>3、CSS最大价值：由HTML专注去做结构呈现，样式交给CSS  即结构（HTML）与样式（CSS）相分离</p>
<h3 id="外部引入css样式"><a href="#外部引入css样式" class="headerlink" title="外部引入css样式"></a>外部引入css样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;文件路径&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想生成多个相同的标签 加上*就可以了    例 div*3   可以快速生成3个div</span><br><span class="line">想生成父子类标签则用&gt;符号            例如ul&gt;li  则生成ul里面包含li</span><br><span class="line">想生成兄弟关系的标签 用+就行 	    例 div+p   则生成一个div 一个p</span><br><span class="line">想生成带有类名或者id名字的 			 例.deom 或#two 则默认生成一个div内引用这个选择器</span><br><span class="line">想生成标签包含类名是有顺序的 			例table.demo$5 则生成5个table并且里面的选择器后面有序号 </span><br><span class="line">标签名&#123;内容&#125;						  例div&#123;111&#125; 则生成&lt;div&gt;111&lt;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="选择器的命名规范"><a href="#选择器的命名规范" class="headerlink" title="选择器的命名规范"></a>选择器的命名规范</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、强烈推荐样式选择器，属性名，属性值关键字全部用小写  特殊情况除外</span><br><span class="line">2、属性值前面，冒号后面，保留一个空格;  选择器和大括号中间保留空格</span><br></pre></td></tr></table></figure>

<h4 id="0、全选选择器"><a href="#0、全选选择器" class="headerlink" title="0、全选选择器"></a>0、全选选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">全选选择器，选中了整个页面</span><br><span class="line">缺点：选中的太多，使用不灵活</span><br><span class="line">使用场景：用于去除内外边距</span><br></pre></td></tr></table></figure>

<h4 id="1、标签选择器"><a href="#1、标签选择器" class="headerlink" title="1、标签选择器"></a>1、标签选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：p &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">选择了页面中所有的p标签，把字体颜色改为了红色</span><br><span class="line">优点：简洁方便</span><br><span class="line">缺点：选中了全部，比较笨重</span><br><span class="line">使用场景：通常用于去除a下划线，列表的标识,em的斜体,b的加粗等....</span><br><span class="line">权重1</span><br></pre></td></tr></table></figure>

<h4 id="2、类选择器"><a href="#2、类选择器" class="headerlink" title="2、类选择器"></a>2、类选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：.red &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">调用：&lt;div class&#x3D;&quot;red&quot;&gt;&lt;&#x2F;div&gt;   注：调用多个时，通过空格隔开</span><br><span class="line">优点：节省代码</span><br><span class="line">缺点：取名难度较大</span><br><span class="line">使用场景：在任意地方都可以使用</span><br><span class="line">权重10</span><br></pre></td></tr></table></figure>

<h4 id="3、id选择器"><a href="#3、id选择器" class="headerlink" title="3、id选择器"></a>3、id选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：#red &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">调用：&lt;div id&#x3D;&quot;red&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">id在整个页面只能出现一次</span><br><span class="line">使用场景：通常配合js使用</span><br><span class="line">权重100</span><br></pre></td></tr></table></figure>

<h4 id="4、后代选择器"><a href="#4、后代选择器" class="headerlink" title="4、后代选择器"></a>4、后代选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：div p &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">选中了div中的所有p标签</span><br><span class="line">优点：可以更好的选中要修改的标签</span><br><span class="line">缺点：选中部分较大</span><br><span class="line">使用场景：通常配合类选择器使用</span><br><span class="line">权重：div+p(因为例子是div和p所以权重则是俩个相加)</span><br></pre></td></tr></table></figure>

<h4 id="5、子选择器"><a href="#5、子选择器" class="headerlink" title="5、子选择器"></a>5、子选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 div&gt;p &#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">选中了div下的所有儿子p标签</span><br><span class="line">使用场景：通常配合类选择器使用</span><br><span class="line">权重：div+p(因为例子是div和p所以权重则是俩个相加)</span><br></pre></td></tr></table></figure>

<h4 id="6、并集选择器"><a href="#6、并集选择器" class="headerlink" title="6、并集选择器"></a>6、并集选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 div,p &#123;</span><br><span class="line">	color：red</span><br><span class="line">优点：把一些标签的公共样式放一起，可以节省代码</span><br><span class="line">权重：个自是个自的</span><br></pre></td></tr></table></figure>

<h4 id="7、链接伪类选择器"><a href="#7、链接伪类选择器" class="headerlink" title="7、链接伪类选择器"></a>7、链接伪类选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:link             选择所有未访问的链接</span><br><span class="line">a:visited          选择所有已被访问的链接</span><br><span class="line">a:hover			   选择鼠标悬浮在超链接上</span><br><span class="line">a:active	       选择活动链接(长按鼠标为放手时)</span><br><span class="line"></span><br><span class="line">所有标签均可以使用</span><br><span class="line">使用场景：通常给a标签使用</span><br></pre></td></tr></table></figure>

<h4 id="8、focus伪类选择器"><a href="#8、focus伪类选择器" class="headerlink" title="8、focus伪类选择器"></a>8、focus伪类选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：input:focus&#123;</span><br><span class="line">	background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">选取获得焦点的表单元素</span><br><span class="line">焦点就是光标，一般&lt;input&gt;类表单元素才能获取</span><br><span class="line">使用场景：则点击文本框时，变为红色，</span><br></pre></td></tr></table></figure>

<h4 id="9、属性选择器"><a href="#9、属性选择器" class="headerlink" title="9、属性选择器"></a>9、属性选择器</h4><table>
<thead>
<tr>
<th>选择符</th>
<th>简洁</th>
</tr>
</thead>
<tbody><tr>
<td>E[att]</td>
<td>选择具有att属性的E元素</td>
</tr>
<tr>
<td>E[att=”val”]（重点）</td>
<td>选择具有att属性且属性值等于val的E元素</td>
</tr>
<tr>
<td>E[att^=”val”]</td>
<td>选择具有att属性且属性值val开头的元素</td>
</tr>
<tr>
<td>E[att$=”val”]</td>
<td>选择具有att属性且属性值val结尾的元素</td>
</tr>
<tr>
<td>E[att*=”val”]</td>
<td>选择具有att属性且属性值包含val的元素</td>
</tr>
</tbody></table>
<h4 id="10、结构伪类选择器"><a href="#10、结构伪类选择器" class="headerlink" title="10、结构伪类选择器"></a>10、结构伪类选择器</h4><table>
<thead>
<tr>
<th>选择器</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>E:first-child</td>
<td>匹配父元素中的第一个子元素E</td>
</tr>
<tr>
<td>E:last-child</td>
<td>匹配父元素中最后一个E元素</td>
</tr>
<tr>
<td>E：nth-child(n)</td>
<td>匹配父元素中第n个字元素E   n可以是数字，关键字even偶数，odd单数，</td>
</tr>
<tr>
<td>E：first-of-type</td>
<td>指定类型的第一个</td>
</tr>
<tr>
<td>E：last-of-type</td>
<td>指定类型的最后一个</td>
</tr>
<tr>
<td>E：nth-of-type(n)</td>
<td>指定类型E的第n个</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E：nth-child(1)和E：nth-of-type(1)的区别</span><br><span class="line">E:nth-child(n)是按E标签里面的所有儿子找该下标</span><br><span class="line">E：nth-of-type(1)是按指定标签来找下标</span><br></pre></td></tr></table></figure>

<h4 id="11、伪元素选择器"><a href="#11、伪元素选择器" class="headerlink" title="11、伪元素选择器"></a>11、伪元素选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML标签结构</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选择器</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>::before</td>
<td>在元素内部的前面插入内容</td>
</tr>
<tr>
<td>::after</td>
<td>在元素内部的后面插入内容</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：</span><br><span class="line">	before和after创建一个元素，但是属于行内元素</span><br><span class="line">	新创建的这个元素在文档树中找不到，所以我们称为伪元素</span><br><span class="line">	语法：element::before&#123;&#125;</span><br><span class="line">	before和after必须有content属性，content中填写要增加的内容</span><br><span class="line">	before在父元素内容的前面创建元素，after在父元素内容的后面插入元素</span><br><span class="line">	伪元素选择器和标签选择器一样，权重为1</span><br></pre></td></tr></table></figure>

<h4 id="id选择器和类选择器的区别"><a href="#id选择器和类选择器的区别" class="headerlink" title="id选择器和类选择器的区别"></a>id选择器和类选择器的区别</h4><p>1、类选择器好比人的名字，一个人可以有多个名字，且也有很多人用这个名字<br>2、id选择器好比人的身份证号码，全中国是唯一，不得重复<br>3、id选择器和类选择器最大的不同在于使用次数上<br>4、类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，通常与js搭配使用</p>
<h3 id="元素模式显示"><a href="#元素模式显示" class="headerlink" title="元素模式显示"></a>元素模式显示</h3><h4 id="1、块元素"><a href="#1、块元素" class="headerlink" title="1、块元素"></a>1、块元素</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：&lt;h1&gt;-&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;</span><br><span class="line">特点：</span><br><span class="line">1、独占一行</span><br><span class="line">2、高度，宽度，外边距已经内边距可以控制</span><br><span class="line">3、宽度默认容器(父级宽度)的100%</span><br><span class="line">4、是一个容器，里面可以放行内或者块级元素</span><br><span class="line">注意：</span><br><span class="line">文字类的元素不能放块级元素</span><br><span class="line">&lt;p&gt;标签主要用于放文字，因此&lt;p&gt;里面不能放块级元素，特别不能放&lt;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2、行内元素"><a href="#2、行内元素" class="headerlink" title="2、行内元素"></a>2、行内元素</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：&lt;a&gt; &lt;strong&gt; &lt;b&gt; &lt;em&gt; &lt;i&gt; &lt;span&gt;</span><br><span class="line">特点：</span><br><span class="line">1、相邻行内元素在一行上，一行可以显示多个</span><br><span class="line">2、高、宽字节设置是无效的</span><br><span class="line">3、默认宽度就是他本身内容的宽度</span><br><span class="line">4、行内元素只能容纳文本或其他行内元素</span><br><span class="line">注意：</span><br><span class="line">链接里面不能再放链接</span><br><span class="line">特殊情况链接&lt;a&gt;里面可以放块级元素，但是给&lt;a&gt; 转换一下块级模式最安全</span><br></pre></td></tr></table></figure>

<h4 id="3、行内块元素"><a href="#3、行内块元素" class="headerlink" title="3、行内块元素"></a>3、行内块元素</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：&lt;img &#x2F;&gt; &lt;input&gt; &lt;td&gt;</span><br><span class="line">特点：</span><br><span class="line">1、和相邻行内块元素在一行上，但是他们之间会有空白缝隙，一行可以放多个</span><br><span class="line">2、默认宽度就是他本身内容的宽度(行内元素特点)</span><br><span class="line">3、高度，行高外边距以及内边距都可以控制</span><br></pre></td></tr></table></figure>

<h4 id="4、元素显示模式转换"><a href="#4、元素显示模式转换" class="headerlink" title="4、元素显示模式转换"></a>4、元素显示模式转换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">转换为块元素：display:block;</span><br><span class="line">转换为行内元素：display:inline;</span><br><span class="line">转换为行内块：display:inline-block;</span><br></pre></td></tr></table></figure>

<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>单位</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>font-family</td>
<td>字体名</td>
<td>无</td>
<td>设置字体</td>
</tr>
<tr>
<td>font-size</td>
<td>阿拉伯数字</td>
<td>px(像素)</td>
<td>设置字体大小</td>
</tr>
<tr>
<td>font-weight</td>
<td>通常使用100-900</td>
<td>无</td>
<td>设置字体粗细</td>
</tr>
<tr>
<td>font-style</td>
<td>normal:标准 italic:斜体</td>
<td>无</td>
<td>很少加斜体，反而要把斜体改正</td>
</tr>
<tr>
<td>list-style</td>
<td>none</td>
<td>无</td>
<td>去除li前面的点</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字体复合属性写法</span><br><span class="line">body&#123;</span><br><span class="line">	  font: font-style  font-weight  font-size&#x2F;line-height font-family</span><br><span class="line">&#125;</span><br><span class="line">注：</span><br><span class="line">1、使用font属性，必须要按上面的格式书写，不能调换顺序，并且各个属性以空格隔开</span><br><span class="line">2、不需要设置的属性可以省略(他会取默认值),但必须保留font-size和font-family  否则font属性不起作用</span><br></pre></td></tr></table></figure>

<h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>颜色单词，16进制，RGB代码：(255,0,0)</td>
<td>更改字体颜色</td>
</tr>
<tr>
<td>text-align</td>
<td>left、right、center</td>
<td>文本对齐</td>
</tr>
<tr>
<td>text-decoration</td>
<td>none、underline、overline、line-through</td>
<td>上下划线，删除线</td>
</tr>
<tr>
<td>text-indent</td>
<td>阿拉伯数字,单位em</td>
<td>文本首行缩进</td>
</tr>
<tr>
<td>line-height</td>
<td>阿拉伯数字，单位px</td>
<td>设置文本行高</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">line-height:</span><br><span class="line">若文字高度等于盒子高度，则居中</span><br><span class="line">若文字高度小于盒子高度，则偏上</span><br><span class="line">若文字高度大于盒子高度，则偏下</span><br></pre></td></tr></table></figure>

<h3 id="设置背景"><a href="#设置背景" class="headerlink" title="设置背景"></a>设置背景</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>background-color</td>
<td>transparent（透明）   颜色</td>
<td>设置背景颜色</td>
</tr>
<tr>
<td>background-image</td>
<td>none（无背景）， url(图片路径)</td>
<td>设置背景图片</td>
</tr>
<tr>
<td>background-repeat</td>
<td>no-repeat</td>
<td>设置背景不平铺</td>
</tr>
<tr>
<td>background-attachment</td>
<td>scroll、fixed（固定）</td>
<td>设置背景是否跟在滚动条滚动</td>
</tr>
<tr>
<td>background-position</td>
<td>方位单词后百分数</td>
<td>设置背景图片的位置</td>
</tr>
<tr>
<td>background:rgba(0,0,0,0.3)</td>
<td>0-1之间</td>
<td>设置背景透明度</td>
</tr>
</tbody></table>
<h3 id="盒子边框"><a href="#盒子边框" class="headerlink" title="盒子边框"></a>盒子边框</h3><table>
<thead>
<tr>
<th>属性</th>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td>px</td>
<td>定义边框粗细，单位</td>
</tr>
<tr>
<td>border-style</td>
<td>solid实线边框，dashed 虚线边框 dotted 点线边框</td>
<td>边框的样式</td>
</tr>
<tr>
<td>border-color</td>
<td>颜色</td>
<td>边框颜色</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复合写法</span><br><span class="line">border: border-width border-style border-color</span><br><span class="line">合并相邻边框</span><br><span class="line">border-collapse:collapse;</span><br></pre></td></tr></table></figure>

<h4 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius:  参数可以px,也可以百分比</span><br><span class="line">正方形设置圆形则高或宽的一半，或直接写50%</span><br><span class="line">矩形设置为高的一半则圆角矩形</span><br><span class="line">跟一个属性则等于四个角，俩个则对角， </span><br></pre></td></tr></table></figure>

<h4 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">	width:0;</span><br><span class="line">	height:0;</span><br><span class="line">	line-height:0;</span><br><span class="line">	font-size:0;</span><br><span class="line">	border:5px solid transparent;</span><br><span class="line">	border-left-colorLpink;</span><br><span class="line">	大小根据边框线决定</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必需，水平阴影的位置，允许负值</td>
</tr>
<tr>
<td>y-shadow</td>
<td>必需，垂直阴影的位置，允许负值</td>
</tr>
<tr>
<td>blur</td>
<td>可选，模糊距离</td>
</tr>
<tr>
<td>spread</td>
<td>可选，阴影的尺寸</td>
</tr>
<tr>
<td>color</td>
<td>可选，阴影的颜色</td>
</tr>
<tr>
<td>Inset</td>
<td>将外部阴影设置为内部阴影inset,设置outset会注释这行</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意！！！！！！！</span><br><span class="line">字体的阴影则没有spread Inset,其他一样</span><br></pre></td></tr></table></figure>

<h3 id="内间距"><a href="#内间距" class="headerlink" title="内间距"></a>内间距</h3><table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>padding:5px</td>
<td>1个值，代表上下左右都有5像素的内边距</td>
</tr>
<tr>
<td>padding:5px 10px</td>
<td>2个值，代表上下内边距是5像素，左右内边距是10像素</td>
</tr>
<tr>
<td>padding:5px 10px 20px;</td>
<td>3个值，代表上内边距5像素，左右内边距10像素 下内边距是20像素</td>
</tr>
<tr>
<td>padding:5px 10px 20px 30px</td>
<td>4个值 ,  代表上5像素 右10像素 下20像素 左30像素</td>
</tr>
</tbody></table>
<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>float:left</td>
<td>左浮</td>
</tr>
<tr>
<td>float:right</td>
<td>右浮</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意！！！！！</span><br><span class="line">一个盒子里面有多个子盒子，一个子盒子浮动了则所有子盒子都要浮动</span><br></pre></td></tr></table></figure>



<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为父级元素在很多情况下，不方便给高度，但是子盒子浮动有不占位置，最后父级盒子高度为0时，就会影响下面的标准流盒子</span><br><span class="line"></span><br><span class="line">1、额外标签发也称为隔墙法，是w3c推荐的做法</span><br><span class="line">	在最后一个子元素后面追加一个块级标签，调用clear:both</span><br><span class="line">	优点：通俗易懂，书写方便</span><br><span class="line">	缺点：添加许多无意义的标签，结构化较差（不推荐使用）</span><br><span class="line">2、父级添加overflow属性</span><br><span class="line">	在父级添加overflow属性，将其属性值设置为hidden.auto或scroll</span><br><span class="line">	优点：代码简洁</span><br><span class="line">	缺点：无法显示溢出的部分</span><br><span class="line">3、父级添加after伪元素</span><br><span class="line">	增加样式</span><br><span class="line">	 .clearfix:after &#123;</span><br><span class="line">            content: &quot;&quot;;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 0;</span><br><span class="line">            clear: both;</span><br><span class="line">            visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .clearfix &#123;</span><br><span class="line">            &#x2F;* IE6、7 专有 *&#x2F;</span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line">	优点：没有增加标签，结构更简单</span><br><span class="line">	缺点：需要照顾低版本的浏览器</span><br><span class="line">	代表网站：网易，京东</span><br><span class="line">4、父级添加双伪元素</span><br><span class="line">	增加样式</span><br><span class="line">	.clearfix:before,</span><br><span class="line">        .clearfix:after &#123;</span><br><span class="line">            content: &quot;&quot;;</span><br><span class="line">            display: table;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .clearfix:after &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .clearfix &#123;低版本浏览器使用，必须要加</span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    优点：代码简洁</span><br><span class="line">	缺点：需要照顾低版本的浏览器</span><br><span class="line">	代表网站：小米，腾讯</span><br></pre></td></tr></table></figure>

<h3 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h3><table>
<thead>
<tr>
<th>定位模式</th>
<th>是否脱标</th>
<th>移动位置</th>
<th>是否常用</th>
</tr>
</thead>
<tbody><tr>
<td>static 静态定位</td>
<td>否</td>
<td>不能使用边偏移</td>
<td>很少</td>
</tr>
<tr>
<td>relative相对定位</td>
<td>否(占有位置)</td>
<td>相对于自身位置移动</td>
<td>常用</td>
</tr>
<tr>
<td>absolute绝对定位</td>
<td>是（不占有位置）</td>
<td>带有定位的父级</td>
<td>常用</td>
</tr>
<tr>
<td>fixed固定定位</td>
<td>是（不占有位置）</td>
<td>浏览器可视区</td>
<td>常用</td>
</tr>
<tr>
<td>sticky粘性定位</td>
<td>否（占有位置）</td>
<td>浏览器可视区</td>
<td>当前阶段少</td>
</tr>
</tbody></table>
<h4 id="相对定位-relative-重要"><a href="#相对定位-relative-重要" class="headerlink" title="相对定位 relative(重要)"></a>相对定位 relative(重要)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相对定位是元素在移动位置的时候，是相对于它用来的位置来移动</span><br><span class="line">相对定位的特点</span><br><span class="line">1、移动位置的时候参照点事自己原来的位置</span><br><span class="line">2、移动后，继续保留原来的位置</span><br><span class="line">因此，相对定位并没有脱标，它最典型的应用是给绝对定位当爹的</span><br></pre></td></tr></table></figure>

<h4 id="绝对定位absolute-重要"><a href="#绝对定位absolute-重要" class="headerlink" title="绝对定位absolute(重要)"></a>绝对定位absolute(重要)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的</span><br><span class="line">绝对定位的特点：</span><br><span class="line">1、如果没有父元素或者父元素没有定位，则以浏览器为标准</span><br><span class="line">2、如果父元素有定位(相对、绝对、固定定位)，则以最近一级的有定位祖先元素来参考点移动位置</span><br><span class="line">3、绝对定位不保留原先位置</span><br></pre></td></tr></table></figure>

<h4 id="子绝父相（重点）"><a href="#子绝父相（重点）" class="headerlink" title="子绝父相（重点）"></a>子绝父相（重点）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、子类绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子</span><br><span class="line">2、父盒子需要加定位限制子盒子在父盒子内显示</span><br><span class="line">3、父盒子布局时，需要占有位置，因此夫妻只能是相对定位</span><br></pre></td></tr></table></figure>

<h4 id="固定定位fixed-重要"><a href="#固定定位fixed-重要" class="headerlink" title="固定定位fixed(重要)"></a>固定定位fixed(重要)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">固定定位是元素固定于浏览器可视区的位置，主要使用场景：可以在浏览器页面滚动时元素的位置不会改变</span><br><span class="line">1、以浏览器的可视窗口显示</span><br><span class="line">	跟父元素没有任何关系</span><br><span class="line">	不随着滚动条的滚动滚动</span><br><span class="line">2、固定定位不占有原先位置</span><br><span class="line"></span><br><span class="line">固定定位小技巧：固定在版心右侧位置</span><br><span class="line">小算法：</span><br><span class="line">	1、让固定定位的盒子left:50%.走到浏览器可视区(也可以看做版心)的一半位置</span><br><span class="line">	2、让固定定位的盒子margin-left:版心宽度的一半距离，夺走版心宽度的一半位置</span><br></pre></td></tr></table></figure>

<h4 id="粘性定位sticky-了解"><a href="#粘性定位sticky-了解" class="headerlink" title="粘性定位sticky(了解)"></a>粘性定位sticky(了解)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以被认为相对定位和固定定位的结合</span><br><span class="line">语法：position：spicky:top 10px;</span><br><span class="line">特点：</span><br><span class="line">1、以浏览器的可视窗口为参照点移动元素（固定定位特点）</span><br><span class="line">2、粘性定位占有原先的位置(相对定位特点)</span><br><span class="line">3、必须添加top、left、right、bottom其他一概才有效、</span><br><span class="line">跟页面滚动搭配使用，兼容性差，IE</span><br></pre></td></tr></table></figure>

<h4 id="定位叠放次序-z-index"><a href="#定位叠放次序-z-index" class="headerlink" title="定位叠放次序 z-index"></a>定位叠放次序 z-index</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用定位布局时，可能出现盒子重叠的情况。此时可以使用z-index来控制盒子的前后次序（z轴）</span><br><span class="line">	数值可以是正整数、负数或者0，默认为auto,数值越大，盒子越靠上</span><br><span class="line">	如果属性值相同，则按照书写顺序，后来居上</span><br><span class="line">	数值后面不能加单位</span><br><span class="line">	只有定位后的盒子才有z-index属性</span><br></pre></td></tr></table></figure>

<h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><h4 id="1、display属性（重点）"><a href="#1、display属性（重点）" class="headerlink" title="1、display属性（重点）"></a>1、display属性（重点）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:none  隐藏对象</span><br><span class="line">display:block 处理转换为块级元素之外，同时还有显示元素的意思</span><br><span class="line">隐藏后的元素，不占有原来的位置</span><br><span class="line">后面应用及其广泛，搭配JS可以做很多的网页特效</span><br></pre></td></tr></table></figure>

<h4 id="2、visibility可见性"><a href="#2、visibility可见性" class="headerlink" title="2、visibility可见性"></a>2、visibility可见性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lnherlt继承附列的可见性</span><br><span class="line">visible：可以看见</span><br><span class="line">hidden：对象隐藏</span><br><span class="line">占有原来的位置</span><br></pre></td></tr></table></figure>

<h4 id="3、overflow溢出"><a href="#3、overflow溢出" class="headerlink" title="3、overflow溢出"></a>3、overflow溢出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">visible 页面默认的,显示溢出的部分</span><br><span class="line">hidden: 隐藏溢出的部分</span><br><span class="line">scroll: 溢出的部分滚动条显示（无论是否溢出都显示滚动条）</span><br><span class="line">auto: 需要的时候添加滚动条（溢出后才显示滚动条）</span><br><span class="line">一般情况下，我们都不想溢出的内容显示出来，因为溢出的部分会影响布局</span><br><span class="line">如果有定位的盒子，请慎用overflow:hidden，因为它会隐藏多余的部分</span><br></pre></td></tr></table></figure>

<h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原理：将网页上的小的背景图片整合到一张大图中，这样服务器只需要请求一次就行了</span><br><span class="line">目的：为了有效的减少服务器接收和发送请求的次数，提高页面的加载速度</span><br><span class="line"></span><br><span class="line">使用精灵图核心：</span><br><span class="line">1、精灵技术主要针对背景使用，就把多个小背景图片合并成一个大图片</span><br><span class="line">2、移动背景图片位置，可以用background-position</span><br><span class="line">3、移动的距离就是这个目标图片的xy左边，主要网页中的坐标有所不同</span><br><span class="line">4、因为一般情况都是往上往左移动，所有数值是负值</span><br><span class="line">5、使用精灵图时，需要精准测量每个小北街图片的大小和位置</span><br><span class="line"></span><br><span class="line">缺点</span><br><span class="line">图片文件还是比较大；</span><br><span class="line">图片本身放大和缩小会失真</span><br><span class="line">一旦图片制作完毕想要更换非常复杂</span><br></pre></td></tr></table></figure>

<h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字体图标可以为前端工程师提高一种方便高效的图标使用方式，展示的是图标，本质是字体</span><br><span class="line">轻量级：一个图标字体要比一系列的图像要小，一旦字体加载了，图标就马上渲染出来了，减少了服务器请求</span><br><span class="line">灵活性：本质其实是文字，可以很随意的改变颜色，产生阴影。透明效果、旋转等</span><br><span class="line">兼容性：几乎支持所有浏览器</span><br><span class="line">注意：字体图标不能代替精灵技术，只是对工作中图标部分技术的提升和优化</span><br><span class="line"></span><br><span class="line">推荐字体图标下载地址</span><br><span class="line">icomoon字库 http:&#x2F;&#x2F;icomoon.io</span><br><span class="line">国外服务器，打开网速较慢</span><br><span class="line"></span><br><span class="line">阿里iconfont字库 http:&#x2F;&#x2F;www.iconfont.cn&#x2F;</span><br><span class="line">包含淘宝图标库和阿里妈妈图标库， 免费</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><h4 id="1、鼠标样式cursor"><a href="#1、鼠标样式cursor" class="headerlink" title="1、鼠标样式cursor"></a>1、鼠标样式cursor</h4><table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>default</td>
<td>小白   系统默认</td>
</tr>
<tr>
<td>polnter</td>
<td>小手</td>
</tr>
<tr>
<td>move</td>
<td>移动</td>
</tr>
<tr>
<td>text</td>
<td>文本</td>
</tr>
<tr>
<td>not-allowed</td>
<td>禁止</td>
</tr>
</tbody></table>
<h4 id="2、轮廓线-outline"><a href="#2、轮廓线-outline" class="headerlink" title="2、轮廓线 outline"></a>2、轮廓线 outline</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline</span>:none;去除轮廓线</span><br></pre></td></tr></table></figure>

<h4 id="3、防止拖拽文本域resize"><a href="#3、防止拖拽文本域resize" class="headerlink" title="3、防止拖拽文本域resize"></a>3、防止拖拽文本域resize</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">resize</span>:none;</span><br></pre></td></tr></table></figure>

<h4 id="vertical-align属性应用"><a href="#vertical-align属性应用" class="headerlink" title="vertical-align属性应用"></a>vertical-align属性应用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">经常用于设置图片或者表单（行内元素）和文字垂直对齐</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>baseline</td>
<td>默认。元素放置在父元素的基线上</td>
</tr>
<tr>
<td>top</td>
<td>把元素的顶端与行内最高元素的顶端对齐</td>
</tr>
<tr>
<td>middle</td>
<td>把此元素放置在父元素的中部</td>
</tr>
<tr>
<td>bottom</td>
<td>把元素的顶端与行中最低元素的顶端对齐</td>
</tr>
</tbody></table>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F.png" alt="对齐方式"></p>
<h3 id="溢出文字显示省略号"><a href="#溢出文字显示省略号" class="headerlink" title="溢出文字显示省略号"></a>溢出文字显示省略号</h3><p>1、单行文本溢出显示省略号—必须满足三个条件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、先强制一行内显示文本</span><br><span class="line">	<span class="attribute">white-space</span>:nowrap;(默认<span class="attribute">normal</span>自动换行)</span><br><span class="line"><span class="number">2</span>、超出部分隐藏</span><br><span class="line">	<span class="attribute">overflow</span>:hidden;</span><br><span class="line"><span class="number">3</span>、文字用省略号替带超出的部分</span><br><span class="line">	<span class="attribute">text-overflow</span>:ellipsis;</span><br></pre></td></tr></table></figure>

<h3 id="HTML5的新特性"><a href="#HTML5的新特性" class="headerlink" title="HTML5的新特性"></a>HTML5的新特性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTML5的新增特性主要是针对于以前的不足，增加了一些新的标签新的表单和新的表单属性</span><br><span class="line">不过这些新特性都有兼容性问题，基本是IE9+以上的浏览器才支持，如果不考虑兼容性，可以大量使用</span><br></pre></td></tr></table></figure>

<h4 id="HTML5新增的语义化标签"><a href="#HTML5新增的语义化标签" class="headerlink" title="HTML5新增的语义化标签"></a>HTML5新增的语义化标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;header&gt;头部标签</span><br><span class="line">&lt;nav&gt;导航标签</span><br><span class="line">&lt;article&gt;内容标签</span><br><span class="line">&lt;section&gt;定义文档某个区域</span><br><span class="line">&lt;aside&gt;侧边栏标签</span><br><span class="line">&lt;footer&gt;尾部标签</span><br><span class="line"></span><br><span class="line">注意：这种语义化标准主要是针对搜索引擎</span><br><span class="line">这些新标签页面中可以使用多次</span><br><span class="line">在IE9中，需要把这些元素转换为块级元素</span><br><span class="line">其实我们移动端更喜欢使用这些标签</span><br></pre></td></tr></table></figure>

<h4 id="HTML5新增的多媒体标签"><a href="#HTML5新增的多媒体标签" class="headerlink" title="HTML5新增的多媒体标签"></a>HTML5新增的多媒体标签</h4><h5 id="音频：audio"><a href="#音频：audio" class="headerlink" title="音频：audio"></a>音频：audio</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目前只支持三种音频格式：MP3、Wav、Ogg</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>autoplay</td>
<td>autoplay</td>
<td>就绪后自动播放</td>
</tr>
<tr>
<td>controls</td>
<td>controls</td>
<td>显示播放按钮</td>
</tr>
<tr>
<td>loop</td>
<td>loop</td>
<td>循环播放</td>
</tr>
<tr>
<td>src</td>
<td>音频地址</td>
<td>要播放的音频地址</td>
</tr>
</tbody></table>
<h5 id="视频：video"><a href="#视频：video" class="headerlink" title="视频：video"></a>视频：video</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目前只支持三种视屏格式：MP4、WebM、Ogg</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>autoplay</td>
<td>autoplay</td>
<td>视屏就绪自动播放（谷歌浏览器需要添加muted来解决自动播放问题）</td>
</tr>
<tr>
<td>controls</td>
<td>controls</td>
<td>向商品显示播放控件（例如暂停，静音）</td>
</tr>
<tr>
<td>width</td>
<td>像素</td>
<td>设置播放器宽度</td>
</tr>
<tr>
<td>height</td>
<td>像素</td>
<td>设置播放器高度</td>
</tr>
<tr>
<td>loop</td>
<td>loop</td>
<td>循环播放</td>
</tr>
<tr>
<td>src</td>
<td>url</td>
<td>视屏地址</td>
</tr>
<tr>
<td>poster</td>
<td>图片地址</td>
<td>加载等待画面图片地址</td>
</tr>
<tr>
<td>muted</td>
<td>muted</td>
<td>静音播放</td>
</tr>
<tr>
<td>preload</td>
<td>auto(预先加载视屏)               none (不应加载视屏)</td>
<td>规定是否预加载视屏(如果有了autoplay,就忽略该属性)</td>
</tr>
</tbody></table>
<h5 id="多媒体标签总结"><a href="#多媒体标签总结" class="headerlink" title="多媒体标签总结"></a>多媒体标签总结</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">音频和视屏标签使用方式基本一致</span><br><span class="line">浏览器支持情况不同</span><br><span class="line">谷歌浏览器吧音频和视屏自动播放禁止了</span><br><span class="line">视频标签是重点，我们经常设置自动播放，不适用controls控件，循环和设置大小属性</span><br></pre></td></tr></table></figure>

<h4 id="HTML5新增的input类型"><a href="#HTML5新增的input类型" class="headerlink" title="HTML5新增的input类型"></a>HTML5新增的input类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运用例：type&#x3D;&quot;email&quot;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>email</td>
<td>输入必须为Email类型</td>
</tr>
<tr>
<td>url</td>
<td>输入必须为URL类型</td>
</tr>
<tr>
<td>date</td>
<td>输入必须为日期类型</td>
</tr>
<tr>
<td>time</td>
<td>输入必须为时间类型</td>
</tr>
<tr>
<td>month</td>
<td>输入必须为月类型</td>
</tr>
<tr>
<td>week</td>
<td>输入必须为周类型</td>
</tr>
<tr>
<td>number</td>
<td>输入必须为数字类型</td>
</tr>
<tr>
<td>tel</td>
<td>手机号码</td>
</tr>
<tr>
<td>search</td>
<td>搜索框</td>
</tr>
<tr>
<td>color</td>
<td>生成一个颜色选择表单</td>
</tr>
</tbody></table>
<h4 id="HTML5新增的表单属性"><a href="#HTML5新增的表单属性" class="headerlink" title="HTML5新增的表单属性"></a>HTML5新增的表单属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>required</td>
<td>required</td>
<td>必填</td>
</tr>
<tr>
<td>placeholder</td>
<td>提示文本</td>
<td>提示信息</td>
</tr>
<tr>
<td>autofocus</td>
<td>autofocus</td>
<td>自动获取焦点</td>
</tr>
<tr>
<td>autocomplete</td>
<td>off/on</td>
<td>off记录提交后的值（默认）on 关闭，需要放在表单内，同时加上name属性</td>
</tr>
<tr>
<td>multiple</td>
<td>multiple</td>
<td>可以多选文件提交（通常与文件域配合使用file）</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以通过以下方式修改placeholder里面的字体颜色</span><br><span class="line">input::placeholder&#123;</span><br><span class="line">			color:pink</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSS3通过box-sizing中指定盒模型，有2个值，即centent-box&#x2F;border-box，计算盒子大小的方式就发生了改变</span><br><span class="line">可以分俩种情况</span><br><span class="line">1、box-sizing:content-box 盒子的大小为width+padding+border（默认）</span><br><span class="line">2、box-sizing:border-box  盒子大小为width</span><br></pre></td></tr></table></figure>

<h4 id="CSS3的其他特性"><a href="#CSS3的其他特性" class="headerlink" title="CSS3的其他特性"></a>CSS3的其他特性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter:blur(10px);数值越大，图片越模糊，需要加px  </span><br><span class="line">width:calc(100%-80px) 可以加减乘除的计算宽度</span><br></pre></td></tr></table></figure>

<h4 id="CSS过度（重点）"><a href="#CSS过度（重点）" class="headerlink" title="CSS过度（重点）"></a>CSS过度（重点）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过渡动画是从一个状态渐渐的过渡到另外一个状态</span><br><span class="line">低版本的浏览器不支持，但是不会影响我们的布局</span><br><span class="line">我们经常和:hover一起搭配使用</span><br><span class="line"></span><br><span class="line">transition:过渡的属性  花费时间  运动曲线  何时开始</span><br><span class="line">属性  需要变换css属性，宽度高度  背景颜色 内外边距都可以，如果要所有的属性都变化过渡，写一个all	  就可以，利用，分割</span><br><span class="line">花费时间：单位是秒（必须要写单位s）</span><br><span class="line">运动曲线：默认ease可以省略</span><br><span class="line">何时开始：单位是秒（必须写单位） 可以设置延迟触发时间（默认0秒）可以省略</span><br><span class="line"></span><br><span class="line">哪个盒子要过渡就给哪个盒子加，要实现过渡，要配合hover一起使用</span><br></pre></td></tr></table></figure>

<h5 id="网站favicon图标"><a href="#网站favicon图标" class="headerlink" title="网站favicon图标"></a>网站favicon图标</h5><h6 id="1、制作favicon图标"><a href="#1、制作favicon图标" class="headerlink" title="1、制作favicon图标"></a>1、制作favicon图标</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">切成png图片</span><br><span class="line">把png图片转换为ico图标，借助第三方转换网站 例http:&#x2F;&#x2F;www.bitbug.net&#x2F;</span><br></pre></td></tr></table></figure>

<h6 id="2、图标放到网站根目录下"><a href="#2、图标放到网站根目录下" class="headerlink" title="2、图标放到网站根目录下"></a>2、图标放到网站根目录下</h6><h6 id="3、引入favicon图标"><a href="#3、引入favicon图标" class="headerlink" title="3、引入favicon图标"></a>3、引入favicon图标</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在html页面里面的&lt;head&gt;&lt;&#x2F;head&gt;元素之间引入代码</span><br><span class="line">&lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;图片名&quot; type&#x3D;&quot;image&#x2F;x-icon&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="网站TDK三大标签SEO优化"><a href="#网站TDK三大标签SEO优化" class="headerlink" title="网站TDK三大标签SEO优化"></a>网站TDK三大标签SEO优化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SEO为搜索引擎优化，是一种医用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式</span><br><span class="line">SEO的目的是对网站进行深度的优化，从而帮助网站获取免费的流量，进而在搜索引擎上提升网站的排名，提高网站的知名度</span><br><span class="line"></span><br><span class="line">TDK三大标签  title   description  keyword</span><br></pre></td></tr></table></figure>

<h5 id="title网站标签"><a href="#title网站标签" class="headerlink" title="title网站标签"></a>title网站标签</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title具有不可替代性，是我们内页的第一个主要标签，是搜索引擎了解网页的入口和队网页主体归属的最佳判断点</span><br><span class="line">建议：网站名（产品名）-网站介绍</span><br></pre></td></tr></table></figure>

<h5 id="description网站说明"><a href="#description网站说明" class="headerlink" title="description网站说明"></a>description网站说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简要说明我们网站主要做说明</span><br><span class="line">例</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;网站说明&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="keyword关键字"><a href="#keyword关键字" class="headerlink" title="keyword关键字"></a>keyword关键字</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyword是页面关键字，是搜索引擎的关注点之一</span><br><span class="line">keyword最后限制为6-8个关键词，用英文逗号分割</span><br><span class="line">例：&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;关键字&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3><h4 id="1、移动translate"><a href="#1、移动translate" class="headerlink" title="1、移动translate"></a>1、移动translate</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2D移动是2D转换里面的一种功能，可以改变元素在页面的位置，类似定位</span><br><span class="line">语法：transform:translate(x,y)</span><br><span class="line">优点：不会影响其他元素的位置</span><br><span class="line">注意：用百分比符号，以自身当参照物</span><br></pre></td></tr></table></figure>

<h4 id="2、旋转rotate"><a href="#2、旋转rotate" class="headerlink" title="2、旋转rotate"></a>2、旋转rotate</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：transform：rotate() 单位deg</span><br></pre></td></tr></table></figure>

<h4 id="3、设置中心点"><a href="#3、设置中心点" class="headerlink" title="3、设置中心点"></a>3、设置中心点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：transform-origin:x y;</span><br><span class="line">注意：参数x和y用空格隔开</span><br><span class="line">x y默认中心点为50% 50%</span><br><span class="line">可以给x y设置像素或者方位名词（top bottom left right center）</span><br></pre></td></tr></table></figure>

<h4 id="4、缩放scale"><a href="#4、缩放scale" class="headerlink" title="4、缩放scale"></a>4、缩放scale</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：transform:scale(x,y);</span><br><span class="line">里面写的数字不跟单位，是倍数的意识</span><br><span class="line">注意：不会影响其他盒子</span><br></pre></td></tr></table></figure>

<h4 id="综合写法"><a href="#综合写法" class="headerlink" title="综合写法"></a>综合写法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">空格隔开</span><br><span class="line">当我们同时又位移和其他属性的时候，记得要将位移放到最前面</span><br></pre></td></tr></table></figure>

<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果</span><br><span class="line">相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果</span><br></pre></td></tr></table></figure>

<h4 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：@keyframes 动画名称 &#123;</span><br><span class="line">	0%（或from） &#123;</span><br><span class="line">		开始状态</span><br><span class="line">	&#125;</span><br><span class="line">	100%(或to) &#123;</span><br><span class="line">		结束状态</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调用动画"><a href="#调用动画" class="headerlink" title="调用动画"></a>调用动画</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animation-name:动画名称;</span><br><span class="line">animation-duration:持续时间</span><br></pre></td></tr></table></figure>

<h4 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>animation</td>
<td>动画属性简写，除了animation-play-state属性</td>
</tr>
<tr>
<td>animation-name</td>
<td>动画名称</td>
</tr>
<tr>
<td>animation-duration</td>
<td>花费时间</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>速度曲线linear   steps(n)分步骤运动</td>
</tr>
<tr>
<td>animation-delay</td>
<td>要等多久再运行 默认为0</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>播放次数，循环播放infinite</td>
</tr>
<tr>
<td>animation-direction</td>
<td>设置动画移动回来alternate</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>停止动画paused</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>设置动画结束后状态，原味forwards 初始位置backwards</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简写</span><br><span class="line">animation:动画名称 持续时间 运动曲线  何时开始 播放次数 是否反方向 动画起始或结束状态</span><br><span class="line">动画之间逗号隔开</span><br></pre></td></tr></table></figure>

<h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><h4 id="1、三维坐标系"><a href="#1、三维坐标系" class="headerlink" title="1、三维坐标系"></a>1、三维坐标系</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x轴：水平向右   注意：x右边是正值，左边是负值</span><br><span class="line">y轴：垂直向下   注意：y下面是正值，上面是负值</span><br><span class="line">z轴：垂直屏幕   注意：往外面是正值，往里面是负值</span><br></pre></td></tr></table></figure>

<h4 id="2、3D移动translate3d"><a href="#2、3D移动translate3d" class="headerlink" title="2、3D移动translate3d"></a>2、3D移动translate3d</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：transform:translate3d(x,y,z)</span><br></pre></td></tr></table></figure>

<h4 id="3、透视perspective"><a href="#3、透视perspective" class="headerlink" title="3、透视perspective"></a>3、透视perspective</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">透视我们也称为视距：视距就是人的眼睛看屏幕的距离</span><br><span class="line">透视卸载被观察元素的父盒子里</span><br><span class="line">单位：px</span><br></pre></td></tr></table></figure>

<h4 id="4、3D旋转rotete3d"><a href="#4、3D旋转rotete3d" class="headerlink" title="4、3D旋转rotete3d"></a>4、3D旋转rotete3d</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：transform:rotateX(45deg) 沿着x轴正方向旋转45%</span><br><span class="line">	 transform:rotateY(45deg) 沿着y轴正方向旋转45%</span><br><span class="line">	 transform:rotateZ(45deg) 沿着z轴正方向旋转45%</span><br></pre></td></tr></table></figure>

<h4 id="5、3D呈现transfrom-style"><a href="#5、3D呈现transfrom-style" class="headerlink" title="5、3D呈现transfrom-style"></a>5、3D呈现transfrom-style</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transform-style:flat 子元素不开始3d空间  默认</span><br><span class="line">transform-style:preserve-3d  子元素开启立体空间</span><br><span class="line">代码写给父级，影响的始子盒子</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意，旋转移动一起使用，先移动在旋转</span><br></pre></td></tr></table></figure>

<h3 id="浏览器私有前缀"><a href="#浏览器私有前缀" class="headerlink" title="浏览器私有前缀"></a>浏览器私有前缀</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加</span><br><span class="line">-moz-:代表firefox浏览器私有属性</span><br><span class="line">-ms-:代表ie浏览器私有属性</span><br><span class="line">-webkit-:代表safari&#x2F;chrome私有属性</span><br><span class="line">-o-：代表Opera私有属性</span><br><span class="line"></span><br><span class="line">提倡写法</span><br><span class="line">-moz-border-radius:10px;</span><br><span class="line">-webkit-border-radius:10px;</span><br><span class="line">-o-border-radius:10px;</span><br><span class="line">border-radius:10px;</span><br></pre></td></tr></table></figure>

<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><p>1、meta视口标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	&lt;meta name&#x3D;&quot;vewport&quot; content&#x3D;&quot;device-width,user-scalable&#x3D;no,initial-scale&#x3D;1.0,maximum&#x3D;1.0,minimum-scale&#x3D;1.0&quot;&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>device-width理想窗口</td>
</tr>
<tr>
<td>initial-scale</td>
<td>初始缩放比，大于0的数字</td>
</tr>
<tr>
<td>maximum-scale</td>
<td>最大缩放比，大于0的数字</td>
</tr>
<tr>
<td>minimum-scale</td>
<td>最小缩放比，大于0的数字</td>
</tr>
<tr>
<td>user-scalable</td>
<td>用户是否可以缩放，yes或no(1或0)</td>
</tr>
</tbody></table>
<h3 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h3><h4 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">规定背景图像的尺寸</span><br><span class="line">语法：background-size：背景图片宽度 背景图片高度;</span><br><span class="line">1。只写一个参数，肯定是宽度，高度省略了，会等比例缩放</span><br><span class="line">2、里面单位可以跟%，相对于父盒子来说</span><br><span class="line">3、cover 完全覆盖div盒子，可能有部分背景显示不全</span><br><span class="line">4、contain高度和宽度等比例拉伸，高度或宽度又一边到了最大，则不拉伸了 </span><br></pre></td></tr></table></figure>

<h3 id="特殊样式"><a href="#特殊样式" class="headerlink" title="特殊样式"></a>特殊样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">点击高亮我们需要清除，设置transparent 为透明</span><br><span class="line">-webkit-tap-highlight-color:transparent;</span><br><span class="line"></span><br><span class="line">移动浏览器默认的外观在ios上加上这个属性才可以给按钮和输入框自定义样式</span><br><span class="line">-webkit-appearance:none;</span><br><span class="line">禁止长按页面时弹出菜单</span><br><span class="line">img,a&#123;</span><br><span class="line">	-webkit-touch-callout:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、单独制作移动端页面（主流）</span><br><span class="line">	流式布局（百分比布局）</span><br><span class="line">	flex弹性布局（强烈推荐）</span><br><span class="line">	less+rem+媒体查询布局</span><br><span class="line">	混合布局</span><br><span class="line">2、响应式页面兼容移动端（其次）</span><br><span class="line">	媒体查询</span><br><span class="line">	bootstarp</span><br></pre></td></tr></table></figure>

<h4 id="1、单独制作移动端页面"><a href="#1、单独制作移动端页面" class="headerlink" title="1、单独制作移动端页面"></a>1、单独制作移动端页面</h4><h5 id="1-1、流式布局（百分比布局）"><a href="#1-1、流式布局（百分比布局）" class="headerlink" title="1.1、流式布局（百分比布局）"></a>1.1、流式布局（百分比布局）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过百分比布局，也称非固定像素布局</span><br><span class="line">max-width 设置最大宽  max-height 设置最大高</span><br><span class="line">min-width 设置最小宽  min-height 设置最小高</span><br></pre></td></tr></table></figure>

<h5 id="1-2、flex布局原理"><a href="#1-2、flex布局原理" class="headerlink" title="1.2、flex布局原理"></a>1.2、flex布局原理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flex是flexible Box 的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局</span><br><span class="line"></span><br><span class="line">当我们为父盒子设为flex布局后，子元素的float、clear和vertical-align属性将失效</span><br><span class="line">伸缩布局&#x3D;弹性布局&#x3D;伸缩盒布局&#x3D;弹性盒布局&#x3D;flex布局</span><br><span class="line"></span><br><span class="line">常见父项属性</span><br><span class="line">flex-direction:设置主轴的方向 colum列</span><br><span class="line">justify-content：设置株洲杀昂子元素的排列方式</span><br><span class="line">flex-wrap:设置子元素是否换行</span><br><span class="line">align-content：设置测轴上子元素的排列方式（多行）</span><br><span class="line">align-items:设置测轴上的子元素排列方式（单行）</span><br><span class="line">flex-flow:复合属性，相当于同时设置了flex-direction和flew-wrap</span><br></pre></td></tr></table></figure>

<h5 id="1-3、适配布局"><a href="#1-3、适配布局" class="headerlink" title="1.3、适配布局"></a>1.3、适配布局</h5><h5 id="1-5、justify-content设置主轴上的子元素排列方式"><a href="#1-5、justify-content设置主轴上的子元素排列方式" class="headerlink" title="1.5、justify-content设置主轴上的子元素排列方式"></a>1.5、justify-content设置主轴上的子元素排列方式</h5><table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>默认值从头部开始 如果主轴是x轴，则从左到右</td>
</tr>
<tr>
<td>flex-end</td>
<td>从尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>在主轴居中对齐（如果主轴是x轴则水平居中）</td>
</tr>
<tr>
<td>space-around</td>
<td>平分剩余空间</td>
</tr>
<tr>
<td>space-between</td>
<td>先俩边贴边在平分剩余空间（重要）</td>
</tr>
</tbody></table>
<h5 id="1-6flex-wrap设置子元素是否换行"><a href="#1-6flex-wrap设置子元素是否换行" class="headerlink" title="1.6flex-wrap设置子元素是否换行"></a>1.6flex-wrap设置子元素是否换行</h5><table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>默认，不换号</td>
</tr>
<tr>
<td>wrap</td>
<td>换行</td>
</tr>
</tbody></table>
<h5 id="1-7align-items设置测轴上的子元素排列（单行）"><a href="#1-7align-items设置测轴上的子元素排列（单行）" class="headerlink" title="1.7align-items设置测轴上的子元素排列（单行）"></a>1.7align-items设置测轴上的子元素排列（单行）</h5><table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>从上到下</td>
</tr>
<tr>
<td>flex-end</td>
<td>从下到上</td>
</tr>
<tr>
<td>center</td>
<td>挤在一起居中（垂直居中）</td>
</tr>
<tr>
<td>stretch</td>
<td>拉伸（默认值）（子盒子不要高度）</td>
</tr>
</tbody></table>
<h5 id="1-8align-content设置测轴上的子元素排列（多行）"><a href="#1-8align-content设置测轴上的子元素排列（多行）" class="headerlink" title="1.8align-content设置测轴上的子元素排列（多行）"></a>1.8align-content设置测轴上的子元素排列（多行）</h5><p>在单行的基础上增加俩个属性</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>space-around</td>
<td>子项在侧轴平分剩余空间</td>
</tr>
<tr>
<td>space-between</td>
<td>子项在测轴先分布在俩头，在平分剩余空间</td>
</tr>
</tbody></table>
<h5 id="背景线性渐变"><a href="#背景线性渐变" class="headerlink" title="背景线性渐变"></a>背景线性渐变</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法</span><br><span class="line">background:-webkit-linear-gradient(起始反向，颜色，颜色);</span><br></pre></td></tr></table></figure>
<h5 id="笔记未全，有时间了则更新全面的"><a href="#笔记未全，有时间了则更新全面的" class="headerlink" title="笔记未全，有时间了则更新全面的"></a>笔记未全，有时间了则更新全面的</h5>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>-Css</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2021/07/31/springMVC/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1、MVC特点"><a href="#1、MVC特点" class="headerlink" title="1、MVC特点"></a>1、MVC特点</h2><ol>
<li>轻量级，简单易学</li>
<li>高效，基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTfu、数据验证、格式化、本地化、主题等</li>
</ol>
<h2 id="2、搭建环境"><a href="#2、搭建环境" class="headerlink" title="2、搭建环境"></a>2、搭建环境</h2><p>必须要是有web.xml的web项目</p>
<h3 id="1、导入jar包"><a href="#1、导入jar包" class="headerlink" title="1、导入jar包"></a>1、导入jar包</h3><p><strong>Spring MVC需要的最核心的jar包</strong></p>
<ul>
<li>commons-logging.jar</li>
<li>spring-aop.jar</li>
<li>spring-beans.jar</li>
<li>spring-context.jar</li>
<li>spring-core.jar</li>
<li>spring-expression.jar</li>
<li>spring-web.jar</li>
<li>spring-webmvc.jar</li>
</ul>
<h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><ul>
<li><p>在web.xml中配置DispacherServlet，DispacherServlet默认加载/WEB-INF/&lt;servlet-name&gt;-servlet.xml下的Spring配置文件，可以通过contextConfigLocation更改配置文件路径。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- SpringMVC配置文件路径 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动时自动加载配置文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3、Spring-MVC配置文件"><a href="#3、Spring-MVC配置文件" class="headerlink" title="3、Spring MVC配置文件"></a>3、Spring MVC配置文件</h3><p><strong>注解</strong></p>
<ul>
<li><p>在scr根目录配置Spring MVC自动扫描包的路径 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring MVC自动扫描的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.znsd.controller&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置视图解析器，解析方式为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置视图解析器 将视图返回字符串解析到：/WEB-INF/view/返回值.jsp 下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 视图后置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用接口</strong></p>
<p>需要在添加俩条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加 处理映射器</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">添加 处理器适配器</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">添加请求地址</span><br><span class="line">&lt;bean id&#x3D;&quot;&#x2F;url地址&quot; class&#x3D;&quot;实现接口地址&quot;&#x2F;&gt;</span><br><span class="line">&#x2F;url地址是自定义的，</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用注解则扫包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用接口的话--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;/hello&quot; class=&quot;controller.Hello&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 视图后置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4、创建请求处理类"><a href="#4、创建请求处理类" class="headerlink" title="4、创建请求处理类"></a>4、创建请求处理类</h3><p><strong>使用注解</strong></p>
<ul>
<li><p>在src下面添加包controlle，然后在包内添加一个HelloWorld类，使用注解修饰类和方法。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">// 修饰类为一个控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/hello&quot;)</span> <span class="comment">// 修饰方法（或类）的请求路径</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello spring mvc&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;<span class="comment">//这个为跳转的页面,例welcom.html</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>使用接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		System.out.println(<span class="string">&quot;hello spring mvc&quot;</span>);</span><br><span class="line">		mv.setViewName(<span class="string">&quot;welcome&quot;</span>);<span class="comment">//这个为跳转的页面,例welcom.html</span></span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、创建一个受保护的html"><a href="#5、创建一个受保护的html" class="headerlink" title="5、创建一个受保护的html"></a>5、创建一个受保护的html</h3><p>在WEB-INF下面创建一个view内创建一个hello.html(要和上面返回的名字一样)，随便在body内输入</p>
<p>访问的地址尽量为${pageContext.request.contextPath}/地址</p>
<p>${pageContext.request.contextPath}为当前项目地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/images&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传多个文件&quot;</span>&gt;</span> $&#123;error&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6、启动"><a href="#6、启动" class="headerlink" title="6、启动"></a>6、启动</h3><p>在url地址输入处理类的请求路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-04-26_21-57-30.png" alt="访问"></p>
<p>然后不是404则成功了</p>
<h2 id="3、执行流程"><a href="#3、执行流程" class="headerlink" title="3、执行流程"></a>3、执行流程</h2><p>具体步骤：</p>
<p>第一步：发起请求到前端控制器(DispatcherServlet)</p>
<p>第二步：前端控制器请求HandlerMapping查找 Handler （可以根据xml配置、注解进行查找）</p>
<p>第三步：处理器映射器HandlerMapping向前端控制器返回Handler，HandlerMapping会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象，多个HandlerInterceptor拦截器对象），通过这种策略模式，很容易添加新的映射策略</p>
<p>第四步：前端控制器调用处理器适配器去执行Handler</p>
<p>第五步：处理器适配器HandlerAdapter将会根据适配的结果去执行Handler</p>
<p>第六步：Handler执行完成给适配器返回ModelAndView</p>
<p>第七步：处理器适配器向前端控制器返回ModelAndView （ModelAndView是springmvc框架的一个底层对象，包括 Model和view）</p>
<p>第八步：前端控制器请求视图解析器去进行视图解析 （根据逻辑视图名解析成真正的视图(jsp)），通过这种策略很容易更换其他视图技术，只需要更改视图解析器即可</p>
<p>第九步：视图解析器向前端控制器返回View</p>
<p>第十步：前端控制器进行视图渲染 （视图渲染将模型数据(在ModelAndView对象中)填充到request域）</p>
<p>第十一步：前端控制器向用户响应结果</p>
<h2 id="4、注解"><a href="#4、注解" class="headerlink" title="4、注解"></a>4、注解</h2><ol>
<li><p>@Contoller是为了让Spring IOC容器初始化时自动扫描 通常放于类名上</p>
</li>
<li><p>@RequestMapping是为了映射请求路径，通常用于方法上，如果在类上也使用了，那么格式为/类路径/方法路径</p>
<ul>
<li><p>value为请求地址的值</p>
</li>
<li><p>method = RequestMethod.设置请求方式</p>
</li>
<li><p>params 值为前台传后台来的参数，基本上为一个，若需要多个大括号分割，几个值，都要对应，否则报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="meta">@Controller</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">guao</span> </span>&#123;</span><br><span class="line">        <span class="meta">@RequestMapping(value = &quot;/guao&quot;,method = RequestMethod.POST,params = &#123;&quot;sid&quot;,&quot;id&quot;&#125;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">ao</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;guao&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>@SessionAttributes(value={“s”})将属性名为s的存入session，通常也放于类名上</p>
</li>
<li><p>@RequestHeader 请求头包含了若干的属性，用来获取客户端的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">ao</span><span class="params">(<span class="meta">@RequestHeader(&quot;Accept-Language&quot;)</span> String language)</span></span>&#123;</span><br><span class="line">		System.out.println(language);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">我的最终结果是  zh-CN,zh;q=<span class="number">0.9</span></span><br></pre></td></tr></table></figure></li>
<li><p>@CookieValue：用来获取客户端Cookie信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">ao</span><span class="params">(<span class="meta">@CookieValue(&quot;Accept-Language&quot;)</span> String language)</span></span>&#123;</span><br><span class="line">		System.out.println(language);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">注！！！</span><br><span class="line">    此方法我未试，中间的值应该为前台传后台来的Cookie值</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="5、Restful风格"><a href="#5、Restful风格" class="headerlink" title="5、Restful风格"></a>5、Restful风格</h2><p>​    Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计额软件可以更简洁，更有层次，更易于实现缓存等机制</p>
<p><strong>功能</strong></p>
<ol>
<li>资源：互联网所有的事务又可以被抽象为资源</li>
<li>资源操作：使用POST、DELETE、PUT、GET使用不同方法对资源进行操作</li>
<li>分别对应CRUD</li>
</ol>
<p>方法级别的注解变体有如下几个： 组合注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>   比@<span class="meta">@RequestMapping</span>更简单,以get防守提交</span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure>

<p><strong>地址上使用参数</strong></p>
<p>1、添加@PathVariable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    <span class="meta">@GetMaping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">		System.out.println(a);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">地址栏最终格式：http:<span class="comment">//localhost/springMVC/add/12/2</span></span><br><span class="line">注意：必须要跟参数a和b，否则会报错</span><br></pre></td></tr></table></figure>

<p>2、添加@RequestParam </p>
<ul>
<li>value：指定参数的名称</li>
<li>required：指定参数是否为必填</li>
<li>defaultValue：指定参数的默认值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">guao</span> </span>&#123;</span><br><span class="line">        <span class="meta">@RequestMapping(value = &quot;/guao&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">ao</span><span class="params">(<span class="meta">@RequestParam</span> (value = <span class="string">&quot;id&quot;</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">&quot;0&quot;</span>)</span><span class="keyword">int</span> userid)</span>&#123;</span><br><span class="line">            System.out.println(userid);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">地址栏最终格式：http:<span class="comment">//localhost/springMVC/guao</span></span><br><span class="line">注意：必须要跟<span class="meta">@RequestParam</span>中的值，否则会报错</span><br></pre></td></tr></table></figure>

<h2 id="6、实体对象绑定参数"><a href="#6、实体对象绑定参数" class="headerlink" title="6、实体对象绑定参数"></a>6、实体对象绑定参数</h2><p>当前台传后台的值的name属性跟属性类的值对应时，会自动绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;guao&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：Stu.java</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">guao</span> </span>&#123;</span><br><span class="line">        <span class="meta">@RequestMapping(value = &quot;/guao&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">ao</span><span class="params">(Stu stu)</span></span>&#123;</span><br><span class="line">            System.out.println(stu.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">结果为 Stu [id=<span class="number">10</span>, name=<span class="keyword">null</span>]</span><br></pre></td></tr></table></figure>

<h2 id="7、Map参数"><a href="#7、Map参数" class="headerlink" title="7、Map参数"></a>7、Map参数</h2><p>可以利用Map从后台往前台传数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/guao&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">ao</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">		map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">	&#125;+</span><br><span class="line">	前台通过el表达式获取</span><br><span class="line">	$&#123;a&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8、使用Spring表单标签"><a href="#8、使用Spring表单标签" class="headerlink" title="8、使用Spring表单标签"></a>8、使用Spring表单标签</h2><p>导入SpringMVC表单标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;guao&quot; %&gt; </span><br><span class="line">    prefix的值为自定义的</span><br></pre></td></tr></table></figure>

<p><strong>form标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	&lt;guao:form modelAttribute=<span class="string">&quot;stu&quot;</span> action=<span class="string">&quot;guao&quot;</span>&gt;</span><br><span class="line">		&lt;guao:input path=<span class="string">&quot;name&quot;</span> /&gt;</span><br><span class="line">		&lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">	&lt;/guao:form&gt;</span><br><span class="line">modelAttribute的值必须要跟后台<span class="meta">@ModelAttribute</span>注解的属性名一致，并且只能传一组参数到前台来</span><br></pre></td></tr></table></figure>

<p><strong>java部分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> StudentServiceImpl studentServiceImpl;</span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/guao&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">ao</span><span class="params">(<span class="meta">@ModelAttribute(&quot;Stu&quot;)</span>Stu stu,Model model)</span></span>&#123;</span><br><span class="line">		System.out.println(stu);</span><br><span class="line">		List&lt;Stu&gt; list = studentServiceImpl.selectAll();</span><br><span class="line">		model.addAttribute(<span class="string">&quot;stu&quot;</span>,list.get(<span class="number">0</span>));</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9、表单校验"><a href="#9、表单校验" class="headerlink" title="9、表单校验"></a>9、表单校验</h2><h4 id="1、注解"><a href="#1、注解" class="headerlink" title="1、注解"></a>1、注解</h4><table>
<thead>
<tr>
<th>注解</th>
<th>详细信息</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>被注解元素值必须为null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>被注释的元素值必须不为null</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>被注释的元素值必须为true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>被注释的元素值必须为false</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>备注是的元素值必须为一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@Max</td>
<td>被注释的元素值必须为一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@DecimalMin</td>
<td>被注的元素值必须为一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td>@DecimalMax</td>
<td>被注释的元素值必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td>@Size(max,min)</td>
<td>被注释的元素值必须在指定的范围之内</td>
</tr>
<tr>
<td>@Digits(integer,faction)</td>
<td>被注释的元素值是一个数字，必须在可接受的范围之内</td>
</tr>
<tr>
<td>@Past</td>
<td>被注释的元素值必须是一个过去的元素</td>
</tr>
<tr>
<td>@Future</td>
<td>被注释的元素值必须是一个将来的元素</td>
</tr>
<tr>
<td>@Pattern</td>
<td>被注释的元素值必须符合指定的正则表达式</td>
</tr>
</tbody></table>
<h4 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h4><ol>
<li>放于属性类中</li>
<li>html或xml中的name属性值必须要跟属性类一一对应</li>
<li>form必须使用Spring表单标签</li>
<li>属性类前面必须要添加 @Valid 注解才生效</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：StudentVO.class</span><br><span class="line">	<span class="meta">@NotEmpty</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@Email</span></span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">	<span class="keyword">private</span> String dizhi;</span><br><span class="line">	<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">	<span class="meta">@Past</span></span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">例：student.jsp</span><br><span class="line">&lt;!--jsp的头--&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">	&lt;!--使用spring  form标签--&gt;</span><br><span class="line">    &lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;spring&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">	&lt;guao:form action=<span class="string">&quot;StudentAdd&quot;</span> method=<span class="string">&quot;post&quot;</span> modelAttribute=<span class="string">&quot;studentVO&quot;</span>&gt;</span><br><span class="line">		姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;guao:errors path=<span class="string">&quot;name&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">		邮箱：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span>&gt;&lt;guao:errors path=<span class="string">&quot;email&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">		性别：&lt;input type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;男</span><br><span class="line">		&lt;input type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;2&quot;</span>&gt;女</span><br><span class="line">		&lt;guao:errors path=<span class="string">&quot;sex&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">		地址：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;dizhi&quot;</span>&gt;&lt;guao:errors path=<span class="string">&quot;dizhi&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">		&lt;生日：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;birthday&quot;</span>&gt;&lt;guao:errors path=<span class="string">&quot;birthday&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">		&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">	&lt;/guao:form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：Student.java</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/StudentAdd&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">StudentAdd</span><span class="params">(<span class="meta">@Valid</span> StudentVO stu,BindingResult result)</span> </span>&#123;</span><br><span class="line">		System.out.println(stu);</span><br><span class="line">    	&lt;!--查看错误开始--&gt;</span><br><span class="line">		<span class="keyword">if</span> (result.getFieldErrorCount()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="number">1111</span>);</span><br><span class="line">			List&lt;FieldError&gt; fieldError= result.getFieldErrors();</span><br><span class="line">			<span class="keyword">for</span> (FieldError error : fieldError) &#123;</span><br><span class="line">				System.out.println(error.getField()+<span class="string">&quot;===&quot;</span>+error.getDefaultMessage());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;StudentAdd&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    	&lt;!--查看错误结束--&gt;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;StudentList&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>自定义错误信息</p>
<p>格式：注解.属性类.属性=值</p>
<p>properties会自动转换为Unicode</p>
<p>当类型匹配不成功时</p>
<p>格式：typeMismatch.属性类.属性=值</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">例：i18n.properties</span></span><br><span class="line"><span class="meta">NotEmpty.studentVO.name</span>=<span class="string">\u7528\u6237\u540D\u4E0D\u80FD\u4E3A\u7A7A</span></span><br><span class="line"><span class="meta">typeMismatch.studentVO.birthday</span>=<span class="string">\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u65F6\u95F4\u683C\u5F0F</span></span><br></pre></td></tr></table></figure>

<p>在springmvc.xml中插入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;i18n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的value值为上面的i18n.properties的文件名，可以更换--&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10、解决乱码"><a href="#10、解决乱码" class="headerlink" title="10、解决乱码"></a>10、解决乱码</h2><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/image-20210504212618899.png" alt="image-20210504212618899"></p>
<p>在web.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="11、实现页面语言切换"><a href="#11、实现页面语言切换" class="headerlink" title="11、实现页面语言切换"></a>11、实现页面语言切换</h2><p>中文创建：i18n_zh_CN.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">例：</span></span><br><span class="line"><span class="meta">studentVO.name</span>=<span class="string">\u59D3\u540D</span></span><br><span class="line"><span class="meta">studentVO.email</span>=<span class="string">\u90AE\u7BB1</span></span><br><span class="line"><span class="meta">studentVO.sex</span>=<span class="string">\u6027\u522B</span></span><br><span class="line"><span class="meta">studentVO.dizhi</span>=<span class="string">\u5730\u5740</span></span><br><span class="line"><span class="meta">studentVO.birthday</span>=<span class="string">\u51FA\u751F\u65E5\u671F</span></span><br></pre></td></tr></table></figure>

<p>英文创建：i18n_en_US.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">例：</span></span><br><span class="line"><span class="meta">studentVO.name</span>=<span class="string">name&#123;0&#125;</span></span><br><span class="line"><span class="meta">studentVO.email</span>=<span class="string">email</span></span><br><span class="line"><span class="meta">studentVO.sex</span>=<span class="string">sex</span></span><br><span class="line"><span class="meta">studentVO.dizhi</span>=<span class="string">dizhi</span></span><br><span class="line"><span class="meta">studentVO.birthday</span>=<span class="string">birthday</span></span><br></pre></td></tr></table></figure>

<p>在Springmvc.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;localeResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.i18n.SessionLocaleResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在html或jsp头部添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@taglib prefix=&quot;spring&quot; uri=&quot;http://www.springframework.org/tags&quot;%&gt;</span><br><span class="line">    &lt;prefix的值可以自定义，这里是什么，下面操作的时候就是什么&gt;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring:message</span> <span class="attr">code</span>=<span class="string">&quot;studentVO.name&quot;</span>/&gt;</span>：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">guao:errors</span> <span class="attr">path</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring:message</span> <span class="attr">code</span>=<span class="string">&quot;studentVO.email&quot;</span>/&gt;</span>：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">guao:errors</span> <span class="attr">path</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring:message</span> <span class="attr">code</span>=<span class="string">&quot;studentVO.sex&quot;</span>/&gt;</span>：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>女</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在jsp或html中添加切换</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;StudentAdd?locale=zh_CN&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;StudentAdd?locale=en_US&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">StudentAdd为您当前页面地址</span><br></pre></td></tr></table></figure>

<h2 id="12、文件上传（重点）"><a href="#12、文件上传（重点）" class="headerlink" title="12、文件上传（重点）"></a>12、文件上传（重点）</h2><p>第一步：导入架包</p>
<ul>
<li>commons-fileupload-1.3.3.jar</li>
<li>commons-io-2.6.jar</li>
</ul>
<p>下载地址</p>
<p><a href="http://commons.apache.org/proper/commons-fileupload/download_fileupload.cgi">FileUpload – Download Apache Commons FileUpload</a></p>
<p><a href="https://commons.apache.org/proper/commons-io/download_io.cgi">Commons IO – Download Apache Commons IO</a></p>
<p>第二步：在springmvc.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件上传 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 设置编码格式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 设置上传的最大大小，单位字节（Byte） --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;102400000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1、form表单文件上传"><a href="#1、form表单文件上传" class="headerlink" title="1、form表单文件上传"></a>1、form表单文件上传</h3><p>第三步：在html或jsp中，文件上传格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/image&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第四步：将上传文件添加到文件夹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">image</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,HttpServletRequest req,Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//获取上传文件名</span></span><br><span class="line">		String fileName=file.getOriginalFilename();</span><br><span class="line">		<span class="keyword">if</span> (fileName!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">			<span class="comment">//获取当前项目地址（但我获取到的是服务器当前项目地址）</span></span><br><span class="line">			String paxh= req.getServletContext().getRealPath(<span class="string">&quot;/image&quot;</span>);</span><br><span class="line">			<span class="comment">//创建一个file检验一下是否存在image这个目录，不存在则创建一个</span></span><br><span class="line">			File f=<span class="keyword">new</span> File(paxh);</span><br><span class="line">			<span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">				f.mkdir();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//获取文件格式</span></span><br><span class="line">			String format=fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">			<span class="comment">//生成一个随机的文件名</span></span><br><span class="line">			String randomName=UUID.randomUUID().toString();</span><br><span class="line">			<span class="comment">//将随机文件名跟格式合并，形成一个新文件名</span></span><br><span class="line">			String newName=randomName+format;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">//将图片写入指定路径</span></span><br><span class="line">				file.transferTo(<span class="keyword">new</span> File(paxh+<span class="string">&quot;/&quot;</span>+newName));</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IllegalStateException | IOException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			map.put(<span class="string">&quot;images&quot;</span>, <span class="string">&quot;/image/&quot;</span>+newName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			map.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;请选择上传图片&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;StudentList&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;image&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>若需要上传多张图片，则把参数MultipartFile该为数组 MultipartFile[]，然后其他的根上传单个一样</p>
<h3 id="2、ajax文件上传"><a href="#2、ajax文件上传" class="headerlink" title="2、ajax文件上传"></a>2、ajax文件上传</h3><p>第三步、导入需要的js架包</p>
<ul>
<li>ajaxfileupload.js</li>
<li>jquery.js</li>
</ul>
<h2 id="13、拦截器"><a href="#13、拦截器" class="headerlink" title="13、拦截器"></a>13、拦截器</h2><p>拦截器，我们通常用于权限控制</p>
<h3 id="1、自定义拦截器"><a href="#1、自定义拦截器" class="headerlink" title="1、自定义拦截器"></a>1、自定义拦截器</h3><p>自定义拦截器必须要实现接口HandlerInterceptor 里面包含三个方法</p>
<ul>
<li>preHandle   进入目标方法之前执行</li>
<li>postHandle  目标方法执行后执行</li>
<li>afterCompletion   渲染页面之后执行</li>
</ul>
<p>当preHandle()返回值为false时，postHandle ()，afterCompletion()这俩个方法则不执行</p>
<p>如果有多个拦截器，其他有一个的preHandle()为false,则运行该前面拦截器的所有afterCompletion()方法(不包括为false拦截器的afterCompletion()方法)，然后结束运行</p>
<h3 id="2、拦截器的使用"><a href="#2、拦截器的使用" class="headerlink" title="2、拦截器的使用"></a>2、拦截器的使用</h3><p>第一步，在springweb.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 拦截什么 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/guao/*&quot;</span>/&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 不拦截什么 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/User/Log&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--拦截后进入那个类--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;interceptor.UserInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步，配置拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		UserVO vo= (UserVO) request.getSession().getAttribute(<span class="string">&quot;userSession&quot;</span>);</span><br><span class="line">		System.out.println(vo);</span><br><span class="line">		<span class="keyword">if</span> (vo==<span class="keyword">null</span>) &#123;</span><br><span class="line">			request.setAttribute(<span class="string">&quot;userError&quot;</span>, <span class="string">&quot;请重新登录&quot;</span>);</span><br><span class="line">			request.getRequestDispatcher(<span class="string">&quot;/guao/index&quot;</span>).forward(request, response);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14、异常配置"><a href="#14、异常配置" class="headerlink" title="14、异常配置"></a>14、异常配置</h2><h3 id="1、配置当前类异常处理"><a href="#1、配置当前类异常处理" class="headerlink" title="1、配置当前类异常处理"></a>1、配置当前类异常处理</h3><p>在一个方法上添加注解@ExceptionHandler()，且这个方法的参数只能存在Exception (我暂时这么理解,因为添加其他参数，注解失效)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler()</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">Error</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Exception&quot;</span>+ ex);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;404&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>也可以指定是什么异常进入，在括号中添加异常.class即可，若需要指定多个异常则大括号内异常.class逗号隔开</p>
<p>若需要往异常页面传异常或值，则需要new一个modelAndView,括号内的值则是你要跳转的页面，然后将放回类型该为ModelAndView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：单个</span><br><span class="line">	<span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">Error</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		ModelAndView view=<span class="keyword">new</span> ModelAndView(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">		view.addObject(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">		System.out.println(<span class="string">&quot;Exception-------&quot;</span>+ ex);</span><br><span class="line">		<span class="keyword">return</span> view;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">例：多个</span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">Error</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		ModelAndView view=<span class="keyword">new</span> ModelAndView(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">		view.addObject(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">		System.out.println(<span class="string">&quot;Exception-------&quot;</span>+ ex);</span><br><span class="line">		<span class="keyword">return</span> view;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、配置全局异常处理"><a href="#2、配置全局异常处理" class="headerlink" title="2、配置全局异常处理"></a>2、配置全局异常处理</h3><h4 id="1、SimpleMappingExceptionResolver实现异常处理"><a href="#1、SimpleMappingExceptionResolver实现异常处理" class="headerlink" title="1、SimpleMappingExceptionResolver实现异常处理"></a>1、<strong>SimpleMappingExceptionResolver实现异常处理</strong></h4><p>通过配置springMVC.xml来实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	k一定要异常的全类名（也可以是自定义异常）。  </span></span><br><span class="line"><span class="comment">	prop之间的值，则是跳转的页面</span></span><br><span class="line"><span class="comment">	表示出现MyException异常，就跳转到404.jsp视图</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.NullPointerException&quot;</span>&gt;</span>404<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、-ExceptionHandler注解实现异常处理"><a href="#2、-ExceptionHandler注解实现异常处理" class="headerlink" title="2、@ExceptionHandler注解实现异常处理"></a>2、@ExceptionHandler注解实现异常处理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class SpringMVCExecption &#123;</span><br><span class="line">	@ExceptionHandler()</span><br><span class="line">	public String error(Exception ex) &#123;</span><br><span class="line">		System.out.println(&quot;SpringMVCExecption-------&gt;&quot;+ex);</span><br><span class="line">		return &quot;404&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以指定是什么异常进入，在括号中添加异常.class即可，若需要指定多个异常则大括号内异常.class逗号隔开</p>
<p>注意！！！记得扫包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：@ExceptionHandler(&#123;)</span><br></pre></td></tr></table></figure>

<h4 id="3、HandlerExceptionResolver-接口自定义异常处理器"><a href="#3、HandlerExceptionResolver-接口自定义异常处理器" class="headerlink" title="3、HandlerExceptionResolver 接口自定义异常处理器"></a>3、HandlerExceptionResolver 接口自定义异常处理器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCExecption2</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span>  </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2,</span></span></span><br><span class="line"><span class="function"><span class="params">			Exception ex)</span> </span>&#123;</span><br><span class="line">		ModelAndView model =<span class="keyword">new</span> ModelAndView(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">		model.addObject(<span class="string">&quot;ex&quot;</span>,ex);</span><br><span class="line">		System.out.println(<span class="string">&quot;SpringMVCExecption-------&gt;&quot;</span>+ex);</span><br><span class="line">		<span class="keyword">return</span> model;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还需要去springMVC中挂载这个类才生效</p>
<h2 id="15、JSON"><a href="#15、JSON" class="headerlink" title="15、JSON"></a>15、JSON</h2><p>1、导入架包</p>
<ul>
<li>jackson-annotations-2.8.0.jar</li>
<li>jackson-core-2.8.0.jar</li>
<li>jackson-databind-2.8.0.jar</li>
</ul>
<p>2、在方法前添加@ResponseBody注解</p>
<p>@ResponseBody注解则不会跳页面，适合ajax请求，返回什么，前台则收到什么</p>
<p>3、形成数据</p>
<p>这个我配合后面的属性类一起使用，若想形成下面效果，则返回List<UserVO>格式即可</UserVO></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> JsonStructure&lt;List&lt;UserVO&gt;&gt; listJson() &#123;</span><br><span class="line">		List&lt;UserVO&gt; list=<span class="keyword">new</span> ArrayList&lt;UserVO&gt;();</span><br><span class="line">		list.add(<span class="keyword">new</span> UserVO(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123&quot;</span>));</span><br><span class="line">		list.add(<span class="keyword">new</span> UserVO(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;1234&quot;</span>));</span><br><span class="line">		list.add(<span class="keyword">new</span> UserVO(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;12345&quot;</span>));</span><br><span class="line">		list.add(<span class="keyword">new</span> UserVO(<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">		<span class="keyword">return</span> JsonStructure.Ok(list);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这个形成的数据为json的date数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-07_20-08-26.png" alt="json"></p>
<p>则我们需要配置一个完整的json格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：JsonStructure.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonStructure</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line">	<span class="keyword">private</span> String msg;</span><br><span class="line">	<span class="keyword">private</span> T date;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer OK=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">JsonStructure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">JsonStructure</span><span class="params">(Integer code, String msg, T date)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">		<span class="keyword">this</span>.msg = msg;</span><br><span class="line">		<span class="keyword">this</span>.date = date;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; JsonStructure&lt;T&gt; <span class="title">Ok</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JsonStructure&lt;T&gt;(OK,<span class="string">&quot;成功&quot;</span>,t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="16、404错误跳转页面"><a href="#16、404错误跳转页面" class="headerlink" title="16、404错误跳转页面"></a>16、404错误跳转页面</h2><p>当有时候用户在url地址框随便输入的时候，我们不可能给用户看404的报错页面，所以我们应该调到一个专属404报错的页面，方便用户体验</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--错误编码--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--跳转的网页--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">location</span>&gt;</span>/pageNotFound<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="17、文件下载"><a href="#17、文件下载" class="headerlink" title="17、文件下载"></a>17、文件下载</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/doweFile&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; doweFile(HttpServletRequest req) &#123;</span><br><span class="line">		<span class="comment">//选中webContent下的file/xxx.txt</span></span><br><span class="line">		<span class="comment">//InputStream webContent = req.getServletContext().getResourceAsStream(&quot;/file/xxx.txt&quot;);</span></span><br><span class="line">		<span class="comment">//选中src下的i18n.properties</span></span><br><span class="line">		InputStream webContent = FileUpload.class.getClassLoader().getResourceAsStream(<span class="string">&quot;i18n.properties&quot;</span>);</span><br><span class="line">		ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">byte</span>[] file = FileCopyUtils.copyToByteArray(webContent);</span><br><span class="line">			HttpHeaders header = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">			<span class="comment">//filename=xxxx.txt 这个则是下载后的名字与格式</span></span><br><span class="line">		    header.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=xxxx.txt&quot;</span>);</span><br><span class="line">		    entity = <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(file, header, HttpStatus.OK);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> entity;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18、整合SSM"><a href="#18、整合SSM" class="headerlink" title="18、整合SSM"></a>18、整合SSM</h2><h3 id="1、导入架包"><a href="#1、导入架包" class="headerlink" title="1、导入架包"></a>1、导入架包</h3><p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/Snipaste_2021-05-08_17-22-07.png" alt="架包"></p>
<h3 id="2、配置web-xml"><a href="#2、配置web-xml" class="headerlink" title="2、配置web.xml"></a>2、配置web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置springMVC --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- SpringMVC配置文件路径 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 启动时自动加载配置文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 解决乱码问题 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 报404错误虎跳转页面 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">location</span>&gt;</span>/404<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置spring --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、配置springmvc-xml"><a href="#3、配置springmvc-xml" class="headerlink" title="3、配置springmvc.xml"></a>3、配置springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller,exception&quot;</span> /&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 可以使用html格式 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 视图后置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 用于自定义设置错误提示 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;i18n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 设置语言转换 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;localeResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.i18n.SessionLocaleResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">			 <span class="comment">&lt;!-- 拦截什么 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/guao/*&quot;</span>/&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 不拦截什么 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/User/Log&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;login&quot;</span>/&gt;</span> </span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;interceptor.UserInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span> </span><br><span class="line">			<span class="comment">&lt;!-- &lt;bean class=&quot;interceptor.OneInterceptor&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">			&lt;bean class=&quot;interceptor.TwoInterceptor&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">			&lt;bean class=&quot;interceptor.ThreeInterceptor&quot;&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置文件上传 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 设置编码格式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 设置上传的最大大小，单位字节（Byte） --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;102400000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置使用SimpleMappingExceptionResolver来映射异常 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;</span></span><br><span class="line"><span class="comment">      给异常一个别名，可以根据别名在前台输出</span></span><br><span class="line"><span class="comment">      &lt;property name=&quot;exceptionAttribute&quot; value=&quot;ex&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">      &lt;property name=&quot;exceptionMappings&quot;&gt;</span></span><br><span class="line"><span class="comment">          &lt;props&gt;</span></span><br><span class="line"><span class="comment">              一定要异常的全类名（也可以是自定义异常）。 表示出现MyException异常，就跳转到error.jsp视图</span></span><br><span class="line"><span class="comment">              &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;404&lt;/prop&gt;</span></span><br><span class="line"><span class="comment">              &lt;prop key=&quot;java.lang.ArithmeticException&quot;&gt;404&lt;/prop&gt;</span></span><br><span class="line"><span class="comment">          &lt;/props&gt;</span></span><br><span class="line"><span class="comment">      &lt;/property&gt;</span></span><br><span class="line"><span class="comment">  &lt;/bean&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;exception.SpringMVCExecption2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SSM整合springmvc的配置可以不需要这么多，有些可以删</p>
<h3 id="4、配置mybatis核心配置文件"><a href="#4、配置mybatis核心配置文件" class="headerlink" title="4、配置mybatis核心配置文件"></a>4、配置mybatis核心配置文件</h3><p>mybatis核心配置文件也可以不用配置，主要用于配置别名于log4j</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> </span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、配置spring配置文件"><a href="#5、配置spring配置文件" class="headerlink" title="5、配置spring配置文件"></a>5、配置spring配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string"> 		http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"> 		http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string"> 		http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 导入外部properties文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 连接数据源 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/article&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 扫描xml,配置SqlSessionFactoryBean --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- dao层 扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 扫描dao层 --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 识别dao层接口的Repository注解 --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;annotationClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 注入SqlSessionFactoryBean --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!-- 事务管理器，依赖于数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 启用注解式事务配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;service,dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、配置mapper的xml"><a href="#6、配置mapper的xml" class="headerlink" title="6、配置mapper的xml"></a>6、配置mapper的xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dao.User.UserDao&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;UserAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;vo.UserVO&quot;</span>&gt;</span></span><br><span class="line">		select * from user</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、配置dao层"><a href="#7、配置dao层" class="headerlink" title="7、配置dao层"></a>7、配置dao层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：UserDao.java</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title">UserAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8、配置接口跟实现类"><a href="#8、配置接口跟实现类" class="headerlink" title="8、配置接口跟实现类"></a>8、配置接口跟实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：UserService.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title">UserAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例：UserServiceimpl.java</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceimpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> UserDao UserDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title">UserAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.UserDao.UserAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、使用"><a href="#9、使用" class="headerlink" title="9、使用"></a>9、使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonStructure&lt;List&lt;UserVO&gt;&gt; listJson() &#123;</span><br><span class="line">    List&lt;UserVO&gt; list = service.UserAll();</span><br><span class="line">    <span class="keyword">return</span> JsonStructure.Ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>-SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2021/07/31/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ul>
<li>Spring Boot诞生于大数据微服务时代</li>
<li>设计理念：用来简化新Spring应用的初始搭建以及开发过程，约定大于配置，去繁从简</li>
<li>官网：<a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></li>
</ul>
<h2 id="2、特征"><a href="#2、特征" class="headerlink" title="2、特征"></a>2、特征</h2><ul>
<li>可以创建独立的<a href="https://baike.baidu.com/item/Spring/85061">Spring</a>应用程序，并且基于其Maven或Gradle插件，可以创建可执行的JARs和WARs；</li>
<li>内嵌Tomcat或Jetty等Servlet容器；</li>
<li>提供自动配置的“starter”项目对象模型（POMS）以简化<a href="https://baike.baidu.com/item/Maven/6094909">Maven</a>配置；</li>
<li>尽可能自动配置Spring容器；</li>
<li>提供准备好的特性，如指标、健康检查和外部化配置；</li>
<li>绝对没有代码生成，不需要XML配置。</li>
</ul>
<h2 id="3、微服务"><a href="#3、微服务" class="headerlink" title="3、微服务"></a>3、微服务</h2><h3 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h3><ul>
<li>微服务是一种架构风格，一个应用拆分</li>
<li>服务之间使用轻量级HTTP交互</li>
<li>服务围绕业务功能拆分</li>
<li>由全自动部署机制独立部署</li>
</ul>
<h3 id="2、微服务的缺点"><a href="#2、微服务的缺点" class="headerlink" title="2、微服务的缺点"></a>2、微服务的缺点</h3><ul>
<li>运维开销及成本增加</li>
<li>必须有坚实的DevOps开发运维一体化技能</li>
<li>隐式接口及接口匹配问题</li>
<li>代码重复</li>
<li>分布式系统的复杂性</li>
<li>异步机制</li>
<li>可测性的挑战</li>
</ul>
<h2 id="4、第一个springboot"><a href="#4、第一个springboot" class="headerlink" title="4、第一个springboot"></a>4、第一个springboot</h2><p>1、环境需要</p>
<ul>
<li>jdk1.8</li>
<li>maven 3.x :maven3.3以上</li>
<li>IDEA2020</li>
<li>SpringBoot 2.3.12.RELEASE</li>
</ul>
<p>2、创建一个maven文件</p>
<p>3、需要添加的maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定一个父项目--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置web场景的启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--插入插件，没有这个插件，打包后运行不了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、创建一个main方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//告诉springboot这是一个应用程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、配置一个Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/text&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">text</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;text  &quot;</span>+<span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、启动main方法后，可以直接进入浏览器访问127:0:0:1:8080/text（springboot的默认端口为8080）</p>
<h2 id="5、springboot自动配置"><a href="#5、springboot自动配置" class="headerlink" title="5、springboot自动配置"></a>5、springboot自动配置</h2><h3 id="1、springboot自动配置原理"><a href="#1、springboot自动配置原理" class="headerlink" title="1、springboot自动配置原理"></a>1、springboot自动配置原理</h3><p><strong>1、进入注解@SpringBootApplication</strong></p>
<p>里面有这些注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span><span class="comment">//标识为放于类上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//注解运行时，可以获取注解的一些元数据</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span><span class="comment">//标识这是springboot的一个配置类</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span><span class="comment">//启用自动配置</span></span><br></pre></td></tr></table></figure>

<p><strong>2、进入注解@EnableAutoConfiguration</strong></p>
<p>里面有又俩个核心注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span><span class="comment">//自动装配应用程序下面的所有子包</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><span class="comment">//导入自动配置选择器</span></span><br></pre></td></tr></table></figure>

<p><strong>3、进入@AutoConfigurationPackage注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span><span class="comment">//将Registrar导入spring ioc容器</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Registrar.java中有个registerBeanDefinitions方法，通过内部类构造方法调用了PackageImports方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">	register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>PackageImports方法中有个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (packageNames.isEmpty()) &#123;</span><br><span class="line">	packageNames.add(ClassUtils.getPackageName(metadata.getClassName()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将应用程序的包名获取中，并且通过反射获取包名下的所有子包，扫描进spring ioc容器中</p>
</li>
</ul>
<p><strong>4、@Import({AutoConfigurationImportSelector.class})</strong>  </p>
<p>这个文件内包含很多配置类，导入这个场景需要的组件</p>
<p>进入AutoConfigurationImportSelector.java方法找到</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot1.png"></p>
<p>进入找到</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot.png"></p>
<p>这个常量的值为</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/spring3.png"></p>
<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；</p>
<p>将这些值作为自动配置类导入到容器中，自动配置就生效了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/spring4.png"></p>
<h3 id="2、springboot自动配置原理总结"><a href="#2、springboot自动配置原理总结" class="headerlink" title="2、springboot自动配置原理总结"></a>2、springboot自动配置原理总结</h3><p>1、sping boot在启动的时候加载主配置类开启了自动配置，自动配置里面有俩个核心注解</p>
<p>2、一个@AutoConfigurationPackage</p>
<p>3、一个@Import(AutoConfigurationImportSelector.class)</p>
<p>4、@AutoConfigurationPackage内部还有个@Import(AutoConfigurationPackages.Registrar.class)</p>
<p>5、Registrar方法调用了registerBeanDefinitions通过内部内调用了PackageImports，这个类通过反射获取应用程序的包以及下面的子包扫描到spirng ioc容器中</p>
<p>6、@Import(AutoConfigurationImportSelector.class)</p>
<p>7、AutoConfigurationImportSelector这个类通过调用loadFactoryNames中的方法获取到meta-info下面的spring.factorys中自动配置类获取EnableAutoConfiguration键对应的值，并且将他装配到spring ioc容器中</p>
<h2 id="6、快速创建springboot项目"><a href="#6、快速创建springboot项目" class="headerlink" title="6、快速创建springboot项目"></a>6、快速创建springboot项目</h2><p>1、创建一个新到的项目选择</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE1.png"></p>
<p>2、下一步后输入包名，项目名，选择jdk版本</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png"></p>
<p>3、下一步,选择项目，根据springboot版本</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE3.png"></p>
<p>4、下一步则创建结束</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE4.png"></p>
<p>5、有可能不是maven项目，你需要选择这个转换为maven项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE5.png"></p>
<h2 id="7、Yaml"><a href="#7、Yaml" class="headerlink" title="7、Yaml"></a>7、Yaml</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v:表示一堆键值对（<strong>空格</strong>必须有）；</p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用tab，只允许空格</li>
<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>
<li>#表示注释</li>
</ul>
<p><strong>例</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure>

<h3 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h3><p>YAML 支持以下几种数据类型：</p>
<ul>
<li>对象：键值对的集合，又称为字典（dictionary）</li>
<li>数组：一组按次序排列的值，又称为列表（list）</li>
<li>纯量（scalars）：字符串，布尔值，整数，小数，null，时间，日期等类型</li>
</ul>
<h3 id="3、数组"><a href="#3、数组" class="headerlink" title="3、数组"></a>3、数组</h3><p>数组以-开头区分，</p>
<p><strong>例：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">A</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">B</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">C</span></span><br></pre></td></tr></table></figure>

<p>也可以一行显示</p>
<p><strong>例：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [<span class="string">value1</span>, <span class="string">value2</span>]</span><br></pre></td></tr></table></figure>

<h2 id="8、配置文件（基本完成）"><a href="#8、配置文件（基本完成）" class="headerlink" title="8、配置文件（基本完成）"></a>8、配置文件（基本完成）</h2><p>创建springboot项目后，在resources下面会生成一个application.properties</p>
<p>推荐将properties改为yml配置文件,因为对比properties没有重复代码</p>
<p>具体感觉你对比一下则出来了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8088</span></span><br></pre></td></tr></table></figure>

<p>端口号则变成了8088</p>
<p>更多对的配置文件请查看<a href="https://docs.spring.io/spring-boot/docs/2.2.13.RELEASE/reference/html/appendix-application-properties.html#common-application-properties">Common Application properties (spring.io)</a></p>
<h3 id="1、配置文件值注入"><a href="#1、配置文件值注入" class="headerlink" title="1、配置文件值注入"></a>1、配置文件值注入</h3><p>yml也支持属性类与配置文件对应，使用方便，并且支持校验 ，</p>
<p>属性之间可以通过${}里面存放完整路径可以调用 </p>
<p>通过ConfigurationProperties注解的prefix的与yml的头对应，则可以自动配置</p>
<p><strong>例：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:  id: 100  last-name:</span> <span class="string">&quot;张三&quot;</span>  <span class="attr">age: 14  email:</span> <span class="number">111</span><span class="string">@@qq.com</span>  <span class="attr">map:    k1:</span> <span class="string">李四</span>    <span class="attr">k2:</span> <span class="string">&#x27;王五&#x27;</span>    <span class="attr">k3: v3  list:</span>    <span class="bullet">-</span> <span class="number">10</span>    <span class="bullet">-</span> <span class="number">20</span>    <span class="bullet">-</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@ConfigurationProperties(prefix=&quot;user&quot;)</span> <span class="comment">//prefix跟yml的头对应@Validated //校验注解public class User &#123;    private int id;    private String lastName;    private int age;    private Map&lt;String,Object&gt; map;    private List list;    @Email    private String email;    &#125;</span></span><br></pre></td></tr></table></figure>

<p>在加入一个配置依赖，则还会提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐configuration‐processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/yml%E6%8F%90%E7%A4%BA.png"></p>
<p>校验依赖，使用校验依赖时候，在属性上还需要添加@Validated否则不起效果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.14.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml支持松散绑定(语法)，例：yml中你为last-name，则你的配置文件可以lastName获取到值</p>
<h3 id="2、配置文件占位符"><a href="#2、配置文件占位符" class="headerlink" title="2、配置文件占位符"></a>2、配置文件占位符</h3><p>yml为我们提供了很方便的占位符，让我们使用</p>
<h4 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$&#123;random.value&#125;</span> <span class="string">、$&#123;random.int&#125;、$&#123;random.long&#125;$&#123;random.int(10)&#125;、$&#123;random.int[100,200]&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、多种环境配置"><a href="#2、多种环境配置" class="headerlink" title="2、多种环境配置"></a>2、多种环境配置</h4><p><strong>1、不同的yml文件（推荐使用）</strong></p>
<p>你可以创建多个yml文件，但是必须以application-开头</p>
<p>application.yml要存在</p>
<p>例：</p>
<ul>
<li>application-dev.yml  </li>
<li>application-prod.yml</li>
</ul>
<p>当你在application.yml中可以输入指令选择其中一个</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>   <span class="comment">#active的值为application-的名字</span></span><br></pre></td></tr></table></figure>

<p><strong>2、同一个yml文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>

<h3 id="3、访问"><a href="#3、访问" class="headerlink" title="3、访问"></a>3、访问</h3><p>打成jar包后，可以通过下面格式访问</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-<span class="number">02</span>-config-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure>

<h2 id="9、日志（未完成全面）"><a href="#9、日志（未完成全面）" class="headerlink" title="9、日志（未完成全面）"></a>9、日志（未完成全面）</h2><p>​    有时我们用System.out.println(“”)输入主要数据来查看，但是项目一旦太大，我们则查找删除不方便，springboot日志正好的帮我们解决了这个问题</p>
<p>​    springboot会根据不一样的开发输入不一样的日志</p>
<p>​    日志的排行级别：trace-debug-info-warn-error </p>
<p>​    上一级别的会显示下面级别的所有日志</p>
<h3 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h3><p>记录器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger= LoggerFactory.getLogger(getClass());</span><br></pre></td></tr></table></figure>

<p>使用logger点不同的日志级别，则会输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.trace(<span class="string">&quot;这是trace的日志信息&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;这是debug的日志信息&quot;</span>);</span><br><span class="line">logger.info(<span class="string">&quot;这是info的日志信息&quot;</span>);</span><br><span class="line">logger.warn(<span class="string">&quot;这是warn的日志信息&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;这是error的日志信息&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p><strong>1、设置指定包名访问的权限</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.znsd:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<p>则com.znsd这个包，只能范围debug跟debug以下的日志信息</p>
<p><strong>2、配置日志输出格式</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:  pattern:    console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&quot;</span></span><br></pre></td></tr></table></figure>

<p>那么输入的格式则会按console这个格式来</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-06-25 [main] ERROR c.z.s.s.SpringbootLoggerApplicationTests - 这是error的日志信息</span><br></pre></td></tr></table></figure>

<p><strong>3、将日志输入到指定文件</strong></p>
<p>1、默认存储路径（当前项目根目录）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot-log</span></span><br></pre></td></tr></table></figure>

<p>将输入的日志，保存达到springBoot-log文件里面</p>
<p>2、指定存储到文件内的日志格式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">   <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&quot;</span></span><br><span class="line">   <span class="attr">file:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd &#125; file----[%thread] %-5level %logger&#123;50&#125; - %msg%n&quot;</span></span><br></pre></td></tr></table></figure>

<p>在控制台辉输入console格式的日志文件，存入文件则存入file格式</p>
<p>3、指定存储路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.znsd:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">D:/spring-boot/log</span></span><br></pre></td></tr></table></figure>

<p>如果file内的name跟path同时存在，则会执行name，不会执行path</p>
<h2 id="10、简化属性类"><a href="#10、简化属性类" class="headerlink" title="10、简化属性类"></a>10、简化属性类</h2><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在属性类上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//自动生成setget方法</span></span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">//自动生成toString方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//自动生成全参构造方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//自动生成无参构造方法</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//生成日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样能减少我们大量的属性类代码</p>
<h2 id="11、web开发"><a href="#11、web开发" class="headerlink" title="11、web开发"></a>11、web开发</h2><h3 id="1、静态文件"><a href="#1、静态文件" class="headerlink" title="1、静态文件"></a>1、静态文件</h3><p>springboot帮我们自动配置了4个文件夹，用于存放静态文件，所有的资源都放于resources文件夹下</p>
<ul>
<li>META-INF/resources/   这个文件夹创建后有可能是META-INF.resources这是正常的</li>
<li>resources</li>
<li>static</li>
<li>public</li>
</ul>
<p><strong>1、配置欢迎页面</strong></p>
<p>在任意静态文件夹内添加index.html，那么当我们进入后，默认跳转到index.html</p>
<p>优先访问顺序：META-INF/resources/  —&gt;  resources —&gt;  static  —-&gt;  public</p>
<p><strong>2、配置ico图标</strong></p>
<p>将名为favicon.ico的ico文件导入在静态文件即可使用</p>
<p><strong>3、配置静态资源前缀</strong></p>
<p>有时我们使用拦截器会把css 、js等静态文件拦截，将静态资源加个前缀，则可以直接不拦截以这个前缀开头即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/static/**</span></span><br></pre></td></tr></table></figure>

<p>这样子我们的所有静态资源都得以static开头</p>
<p><strong>4、配置自定义静态文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/aaa/</span>]</span><br></pre></td></tr></table></figure>

<p>配置以后，springboot帮我们创建的4个静态文件则失效</p>
<p><strong>5、注意</strong></p>
<p>springboot会优先进入controller控制器，然后才会进入静态文件</p>
<h3 id="2、模板引擎"><a href="#2、模板引擎" class="headerlink" title="2、模板引擎"></a>2、模板引擎</h3><p>SpringBoot推荐Thymeleaf;语法简单，功能强大</p>
<p>引入模板引擎依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1、使用-1"><a href="#1、使用-1" class="headerlink" title="1、使用"></a>1、使用</h4><p>首先在html上导入xmlns:th=”<a href="http://www.thymeleaf.org&quot;/">http://www.thymeleaf.org&quot;</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h4><h3 id="3、错误页面"><a href="#3、错误页面" class="headerlink" title="3、错误页面"></a>3、错误页面</h3><p>springboot有个默认的错误页面</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springerror1.png"></p>
<h4 id="1、配置错误页面"><a href="#1、配置错误页面" class="headerlink" title="1、配置错误页面"></a>1、配置错误页面</h4><p>springboot也可以<strong>自定义配置错误页面</strong></p>
<p>1、在静态文件（static、public…）内创建error文件夹里面存放错误页面</p>
<p>2、在模板文件夹（templates）内创建error文件夹里面存放错误页面（优先进入模板文件夹）</p>
<p><strong>错误页面名</strong></p>
<p>1、spirngboot会根据错误状态码，自动寻找错误页面，例：404.html</p>
<p>2、找不到指定的错误页面，则会去找4xx.html或5xx.html，根据错误状态码开头进入</p>
<p>3、若还没有找到则会自主生成一个错误页面</p>
<h4 id="2、ErrorMvcAutoConfiguration解析"><a href="#2、ErrorMvcAutoConfiguration解析" class="headerlink" title="2、ErrorMvcAutoConfiguration解析"></a>2、ErrorMvcAutoConfiguration解析</h4><ul>
<li>找到架包</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springerror%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901.png"></p>
<ul>
<li>找到web  –&gt;   servlet  —&gt;  error  —&gt;ErrorMvcAutoConfiguration(错误自动配置类)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springbooterror%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902.png" alt="springbooterror源码分析2"></p>
<ul>
<li><p>进入ErrorMvcAutoConfiguration</p>
<ul>
<li><p>ErrorMvcAutoConfiguration类上的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span>  <span class="comment">//标识是配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span>  <span class="comment">//web程序才会生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class&#125;)</span> </span><br><span class="line"><span class="comment">//当项目有Servlet  并且注入DispatcherServlet 的时候生效</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(&#123;WebMvcAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="comment">//在运行完WebMvcAutoConfiguration之前生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;ServerProperties.class, ResourceProperties.class, WebMvcProperties.class&#125;)</span></span><br><span class="line"><span class="comment">//这个配置类需要依赖ServerProperties(服务的配置属性)、ResourcePropertie(资源的配置属性)、WebMvcProperties(webmvc的配置属性)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>errorAttributes方法 获取默认异常信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="meta">@ConditionalOnMissingBean(value = &#123;ErrorAttributes.class&#125;,search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="comment">//在你项目中没找到自定义异常信息则生效，找到了则用自己的</span></span><br><span class="line"><span class="comment">//自己定义的类必须要实现ErrorAttributes</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> DefaultErrorAttributes <span class="title">errorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorAttributes();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>进入返回的对象通过debug在getErrorAttributes方法中断点即可查看到sprintboot返回的默认错误信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springbooterror%E6%9F%A5%E7%9C%8B%E9%94%99%E8%AF%AF%E7%8A%B6%E6%80%81%E7%A0%81.png"></p>
<p>在html页面可以直接使用查看错误信息 </p>
<p><strong>例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;状态码：+$&#123;status&#125;&quot;</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;错误信息：+$&#123;message&#125;&quot;</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;错误发生时间：+$&#123;timestamp&#125;&quot;</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;错误所有信息：+$&#123;trace&#125;&quot;</span>&gt;</span>500<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>basicErrorController方法 基本的错误控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = &#123;ErrorController.class&#125;,search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BasicErrorController <span class="title">basicErrorController</span><span class="params">(ErrorAttributes errorAttributes, ObjectProvider&lt;ErrorViewResolver&gt; errorViewResolvers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BasicErrorController(errorAttributes, <span class="keyword">this</span>.serverProperties.getError(), (List)errorViewResolvers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入BasicErrorController方法</p>
<p>BasicErrorController类上注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="comment">//标识这是个配置类</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="comment">//遇到错误辉访问server.error.path这个路径默认为/error，可以自定义</span></span><br></pre></td></tr></table></figure>

<p>在BasicErrorController类中有又俩个主要的方法，一个errorHtml方法（响应错误页面） 一个error（响应错误json数据）</p>
</li>
<li><p>errorPageCustomizer  错误页面定制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ErrorPageCustomizer <span class="title">errorPageCustomizer</span><span class="params">(DispatcherServletPath dispatcherServletPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ErrorPageCustomizer(<span class="keyword">this</span>.serverProperties, dispatcherServletPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入ErrorPageCustomizer方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry errorPageRegistry)</span> </span>&#123;</span><br><span class="line">    ErrorPage errorPage = <span class="keyword">new</span> ErrorPage(</span><br><span class="line">    <span class="keyword">this</span>.dispatcherServletPath.getRelativePath(<span class="keyword">this</span>.properties.getError().getPath()));</span><br><span class="line">    errorPageRegistry.addErrorPages(errorPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入getPath()方法即可看到path的值为/error，所以默认查询地址为/error</p>
</li>
<li><p>conventionErrorViewResolver  默认错误视图解析器 根据错误状态码完成页面转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DispatcherServlet.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(ErrorViewResolver.class)</span></span><br><span class="line"><span class="function">DefaultErrorViewResolver <span class="title">conventionErrorViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorViewResolver(<span class="keyword">this</span>.applicationContext, <span class="keyword">this</span>.resourceProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入DefaultErrorViewResolver类，即可看到为什么只有4xx.html跟5xx.html生效，因为springboot只定义了这俩个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">		Map&lt;Series, String&gt; views = <span class="keyword">new</span> EnumMap&lt;&gt;(Series.class);</span><br><span class="line">		views.put(Series.CLIENT_ERROR, <span class="string">&quot;4xx&quot;</span>);</span><br><span class="line">		views.put(Series.SERVER_ERROR, <span class="string">&quot;5xx&quot;</span>);</span><br><span class="line">		SERIES_VIEWS = Collections.unmodifiableMap(views);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>DefaultErrorViewResolver还有三个核心方法，若最后返回null,springboot则会自动渲染一个错误页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用resolve方法，将状态码跟状态信息传过去,寻找状态码页面，找不到则返回null</span></span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="comment">//判断是否找到状态码页面，没找到则找4xx,5xx页面</span></span><br><span class="line">    <span class="comment">//status.series()我理解为寻找状态码开头数字</span></span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        <span class="comment">//寻找4xx,5xx页面，找不到则返回null</span></span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到则返回找到的html文件，没找到则返回null,返回无后会有一个方法自动生成一个html页面</span></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在模板寻找</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//状态码跟error/拼接</span></span><br><span class="line">    String errorViewName = <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">    <span class="comment">//在模板（templates）寻找 状态码.xml或4xx.xml、5xx.html是否存在，不存在则返回无</span></span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//页面找到则返回页面值，跟错误状态码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没找到页面则去静态文件中查找</span></span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在静态文件寻找</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//循环4个静态文件</span></span><br><span class="line">    <span class="keyword">for</span> (String location : <span class="keyword">this</span>.resourceProperties.getStaticLocations()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">            resource = resource.createRelative(viewName + <span class="string">&quot;.html&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">                <span class="comment">//找到则返回找到的html文件</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> HtmlResourceView(resource), model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没找到则返回无</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
</li>
</ul>
<h4 id="3、错误页面运行原理"><a href="#3、错误页面运行原理" class="headerlink" title="3、错误页面运行原理"></a>3、错误页面运行原理</h4><p>1、浏览器或客户端发送请求，都会去DispatcherServlet类来进行处理，</p>
<p>2、如果报错了则会寻找错误解析器处理，如果没有错误解析器可以处理，则返回null,然后发送/error请求</p>
<p>3、由BasicErrorController接管，根据请求头判断是浏览器发送请求还是服务器发送请求，如果是服务器发送请求则会返回json数据，如果是浏览器发送请求则会</p>
<p>4、调用DefaultErrorViewResolver方法，这个方法首先会去根据错误状态码，</p>
<p>5、首先会根据对应的状态码去寻找页面，如果没找到则会找对应的4xx、5xx.html文件，如果还没有找到，则会调用render方法，进行页面拼接返回</p>
<h3 id="4、嵌入式servlet容器"><a href="#4、嵌入式servlet容器" class="headerlink" title="4、嵌入式servlet容器"></a>4、嵌入式servlet容器</h3><h4 id="1、tomcat配置属性"><a href="#1、tomcat配置属性" class="headerlink" title="1、tomcat配置属性"></a>1、tomcat配置属性</h4><p>找到ServerProperties.java，找到tomcat静态类就可以查看tomcat的一些配置属性以及默认值</p>
<h4 id="2、通过java代码配置sevlet容器"><a href="#2、通过java代码配置sevlet容器" class="headerlink" title="2、通过java代码配置sevlet容器"></a>2、通过java代码配置sevlet容器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt; <span class="title">webServerFactoryCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            factory.setPort(<span class="number">8082</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、spring-boot-servlet容器启动原理"><a href="#3、spring-boot-servlet容器启动原理" class="headerlink" title="3、spring boot servlet容器启动原理"></a>3、spring boot servlet容器启动原理</h4><p>1、ServletWebServerApplicationContext通过tomcat启动加载sping ioc容器</p>
<p>2、ServletWebServerApplicationContext中有个核心方法refresh，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.refresh();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var3) &#123;</span><br><span class="line">        WebServer webServer = <span class="keyword">this</span>.webServer;</span><br><span class="line">        <span class="keyword">if</span> (webServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            webServer.stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> var3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、他又调用了父类的refresh方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// 准备刷新</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 告诉子类刷新bean工厂.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备使用bean工厂</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//允许在上下文子类中处理bean工厂。</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用在上下文中注册为bean的工厂处理器。</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册bean处理器,可以拦截bean的创建。</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为此上下文初始化消息源。</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在此背景下初始化事件多播器。</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在特定的上下文子类中初始化其他特殊bean。</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查监听器bean并注册它们。</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实例化所有剩余(非懒加载)单例。</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最后一步:发布相应的事件</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//完成初始化，tomcat启动成功</span></span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、父类的refresh方法又调用了子类的onRefresh方法（也就是ServletWebServerApplicationContext中的onRefresh方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRefresh();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建web服务器</span></span><br><span class="line">  		<span class="keyword">this</span>.createWebServer();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var2) &#123;</span><br><span class="line">   		 <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;Unable to start web server&quot;</span>, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、进入createWebServer方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createWebServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    WebServer webServer = <span class="keyword">this</span>.webServer;</span><br><span class="line">    <span class="comment">//获取servlet上下文</span></span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="keyword">if</span> (webServer == <span class="keyword">null</span> &amp;&amp; servletContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取sping bean工厂</span></span><br><span class="line">        ServletWebServerFactory factory = <span class="keyword">this</span>.getWebServerFactory();</span><br><span class="line">        <span class="comment">//通过工厂来获取web服务器</span></span><br><span class="line">        <span class="keyword">this</span>.webServer = factory.getWebServer(<span class="keyword">new</span> ServletContextInitializer[]&#123;<span class="keyword">this</span>.getSelfInitializer()&#125;);</span><br><span class="line">        <span class="keyword">this</span>.getBeanFactory().registerSingleton(<span class="string">&quot;webServerGracefulShutdown&quot;</span>, <span class="keyword">new</span> WebServerGracefulShutdownLifecycle(<span class="keyword">this</span>.webServer));</span><br><span class="line">        <span class="keyword">this</span>.getBeanFactory().registerSingleton(<span class="string">&quot;webServerStartStop&quot;</span>, <span class="keyword">new</span> WebServerStartStopLifecycle(<span class="keyword">this</span>, <span class="keyword">this</span>.webServer));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.getSelfInitializer().onStartup(servletContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;Cannot initialize servlet context&quot;</span>, var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.initPropertySources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有三个spring bean 工厂</p>
<ul>
<li>TomcatServletWebServerFactory            Tomcat服务工厂（默认进）</li>
<li>JettyServletWebServerFactory                  Jetty服务工厂</li>
<li>UndertowServletWebServerFactory        Unertow服务工厂</li>
</ul>
<p>6、默认调用<strong>Tomcat</strong>，进入TomcatServletWebServerFactory里面的getWebServer方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServer <span class="title">getWebServer</span><span class="params">(ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.disableMBeanRegistry) &#123;</span><br><span class="line">        Registry.disableRegistry();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//new创建了一个tomcat对象</span></span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span>) ? <span class="keyword">this</span>.baseDirectory : createTempDir(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">    connector.setThrowOnFailure(<span class="keyword">true</span>);</span><br><span class="line">    tomcat.getService().addConnector(connector);</span><br><span class="line">    customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">    tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">    configureEngine(tomcat.getEngine());</span><br><span class="line">    <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line">    prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    <span class="keyword">return</span> getTomcatWebServer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、结束之后又调用了getTomcatWebServer(tomcat)方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TomcatWebServer <span class="title">getTomcatWebServer</span><span class="params">(Tomcat tomcat)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServer(tomcat, getPort() &gt;= <span class="number">0</span>, getShutdown());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8、getTomcatWebServer有new了一个TomcatWebServer对象的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatWebServer</span><span class="params">(Tomcat tomcat, <span class="keyword">boolean</span> autoStart, Shutdown shutdown)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(tomcat, <span class="string">&quot;Tomcat Server must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.tomcat = tomcat;</span><br><span class="line">    <span class="keyword">this</span>.autoStart = autoStart;</span><br><span class="line">    <span class="keyword">this</span>.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? <span class="keyword">new</span> GracefulShutdown(tomcat) : <span class="keyword">null</span>;</span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9、又调用了initialize()初始化方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> WebServerException </span>&#123;</span><br><span class="line">	logger.info(<span class="string">&quot;Tomcat initialized with port(s): &quot;</span> + getPortsDescription(<span class="keyword">false</span>));</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>.monitor) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			addInstanceIdToEngineName();</span><br><span class="line"></span><br><span class="line">			Context context = findContext();</span><br><span class="line">			context.addLifecycleListener((event) -&gt; &#123;</span><br><span class="line">				<span class="keyword">if</span> (context.equals(event.getSource()) &amp;&amp; Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">					<span class="comment">// Remove service connectors so that protocol binding doesn&#x27;t</span></span><br><span class="line">					<span class="comment">// happen when the service is started.</span></span><br><span class="line">					removeServiceConnectors();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">            <span class="comment">//启动tomcat服务器</span></span><br><span class="line">			<span class="comment">// Start the server to trigger initialization listeners</span></span><br><span class="line">			<span class="keyword">this</span>.tomcat.start();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// We can re-throw failure exception directly in the main thread</span></span><br><span class="line">			rethrowDeferredStartupExceptions();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				ContextBindings.bindClassLoader(context, context.getNamingToken(), getClass().getClassLoader());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (NamingException ex) &#123;</span><br><span class="line">				<span class="comment">// Naming is not enabled. Continue</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Unlike Jetty, all Tomcat threads are daemon threads. We create a</span></span><br><span class="line">			<span class="comment">// blocking non-daemon to stop immediate shutdown</span></span><br><span class="line">			startDaemonAwaitThread();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			stopSilently();</span><br><span class="line">			destroySilently();</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> WebServerException(<span class="string">&quot;Unable to start embedded Tomcat&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、sevlet-web服务工厂的自动配置"><a href="#4、sevlet-web服务工厂的自动配置" class="headerlink" title="4、sevlet web服务工厂的自动配置"></a>4、sevlet web服务工厂的自动配置</h4><p>去架包找到ServletWebServerFactoryAutoConfiguration（servlet web 服务工厂自动配置）</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%B7%A5%E5%8E%82%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.png"></p>
<ul>
<li>ServletWebServerFactoryAutoConfiguration类上的注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span><span class="comment">//标识这是个配置类，关闭单例模式</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><span class="comment">//配置类的顺序，优先级最高</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRequest.class)</span><span class="comment">//想要这个配置类生效必须要依赖ServletRequest</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><span class="comment">//当前环境必须是服务器环境</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span><span class="comment">//必须要激活ServerProperties环境</span></span><br><span class="line"><span class="meta">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class="line"><span class="meta">		ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class="line"><span class="meta">		ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class="line"><span class="meta">		ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span></span><br><span class="line"><span class="comment">//导入三个内置容器的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>默认的WebServerFactory配置类</p>
<ul>
<li><p>ServletWebServerFactoryConfiguration.EmbeddedTomcat 想要这个配置类生效想要满足以下条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//标识是个配置类，并且关闭单例模式</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</span></span><br><span class="line"><span class="comment">//必须要有Servlet、Tomcat、UpgradeProtocol 这些包bean才会生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="comment">//只能注册一个ServletWebServerFactory类的注解，配置多个，则只有第一次注册的生效</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TomcatServletWebServerFactory <span class="title">tomcatServletWebServerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;TomcatConnectorCustomizer&gt; connectorCustomizers,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;TomcatContextCustomizer&gt; contextCustomizers,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;TomcatProtocolHandlerCustomizer&lt;?&gt;&gt; protocolHandlerCustomizers)</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory();</span><br><span class="line">        factory.getTomcatConnectorCustomizers()</span><br><span class="line">            .addAll(connectorCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        factory.getTomcatContextCustomizers()</span><br><span class="line">            .addAll(contextCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        factory.getTomcatProtocolHandlerCustomizers()</span><br><span class="line">            .addAll(protocolHandlerCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ServletWebServerFactoryConfiguration.EmbeddedJetty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span><span class="comment">//标识是个配置类，并且关闭单例模式</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class, WebAppContext.class &#125;)</span></span><br><span class="line"><span class="comment">//必须要有Servlet、Server、Loader、WebAppContext 这些包bean才会生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="comment">//只能注册一个ServletWebServerFactory类的注解，配置多个，则只有第一次注册的生效</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JettyServletWebServerFactory <span class="title">JettyServletWebServerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;JettyServerCustomizer&gt; serverCustomizers)</span> </span>&#123;</span><br><span class="line">        JettyServletWebServerFactory factory = <span class="keyword">new</span> JettyServletWebServerFactory();</span><br><span class="line">        factory.getServerCustomizers().addAll(serverCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ServletWebServerFactoryConfiguration.EmbeddedUndertow</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span><span class="comment">//标识是个配置类，并且关闭单例模式</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span></span><br><span class="line"><span class="comment">//必须要有Servlet、Undertow、SslClientAuthMode 这些包bean才会生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="comment">//只能注册一个ServletWebServerFactory类的注解，配置多个，则只有第一次注册的生效</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">UndertowServletWebServerFactory <span class="title">undertowServletWebServerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;UndertowDeploymentInfoCustomizer&gt; deploymentInfoCustomizers,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;UndertowBuilderCustomizer&gt; builderCustomizers)</span> </span>&#123;</span><br><span class="line">        UndertowServletWebServerFactory factory = <span class="keyword">new</span> UndertowServletWebServerFactory();</span><br><span class="line">        factory.getDeploymentInfoCustomizers()</span><br><span class="line">            .addAll(deploymentInfoCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        factory.getBuilderCustomizers().addAll(builderCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">UndertowServletWebServerFactoryCustomizer <span class="title">undertowServletWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UndertowServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spirngboot默认导入了tomcat的包，Jetty跟Undertow的包未导入，所以默认运用的是tomcat</p>
<p>如果需要Jetty生效，需要导入架包，并且将tomcat架包排除 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependecy</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="5、Svlet-web服务工厂自动配置总结"><a href="#5、Svlet-web服务工厂自动配置总结" class="headerlink" title="5、Svlet web服务工厂自动配置总结"></a>5、Svlet web服务工厂自动配置总结</h4><p>1、ServletWebServerApplicationContext中有个核心方法refresh，</p>
<p>2、这个refresh方法又调用了父类的refresh方法调用了子类的onRefresh()方法，</p>
<p>3、子类的onRefresh()方法中创建了web服务器，</p>
<p>4、通过getWebServerFactory()方法来获取当前是什么服务工厂，有三个工厂 tomcat、Jetty、Undertow</p>
<p>5、默认为tomcat，因为springboot默认导入了tomcat的依赖，如果要进入别的方法，则需要导入依赖，并且排除tomcat依赖的导入，当条件满足后，这个工厂则会判断有没有其他工厂已经执行，如果有，则不初始化，如果没有则开始初始化，因为ConditionalOnMissingBean这个注解，</p>
<p>6、初始化后则会进入指定跟工厂的ServletWebServerFactory方法（因为默认进入的是tomcat所以就写tomcat的流程，其他的则是把tomcat改为另外来个即可），</p>
<p>7、调用getWebServer方法，结束的时候调用getTomcatWebServer方法，</p>
<p>8、getTomcatWebServer方法new一个TomcatWebServer对象，</p>
<p>9、构造方法结束的时候调用了initialize初始化方法，启动了tomcat服务器</p>
<h3 id="5、注册Servlet三大组件"><a href="#5、注册Servlet三大组件" class="headerlink" title="5、注册Servlet三大组件"></a>5、注册Servlet三大组件</h3><p>三大组件 Servlet（处理请求）、 Filter（过滤请求）、 Listener（监听tomcat,request等）</p>
<p>由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml</p>
<h4 id="1、配置一个配置类"><a href="#1、配置一个配置类" class="headerlink" title="1、配置一个配置类"></a>1、配置一个配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、配置Servlet处理请求"><a href="#2、配置Servlet处理请求" class="headerlink" title="2、配置Servlet处理请求"></a>2、配置Servlet处理请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestServlet.doPost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置类注册一个bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;Servlet&gt; <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean&lt;&gt; (<span class="keyword">new</span> TestServlet(),<span class="string">&quot;/test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="comment">//ServletRegistrationBean servletRegistrationBean=new ServletRegistrationBean();</span></span><br><span class="line">        <span class="comment">////servletRegistrationBean.setServlet(new TestServlet());</span></span><br><span class="line">        <span class="comment">//servletRegistrationBean.setUrlMappings(Arrays.asList(new String[]&#123;&quot;/text&quot;&#125;));</span></span><br><span class="line">        <span class="comment">//return  servletRegistrationBean;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、配置Filter（过滤请求）"><a href="#3、配置Filter（过滤请求）" class="headerlink" title="3、配置Filter（过滤请求）"></a>3、配置Filter（过滤请求）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器开始&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置类配置bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;Filter&gt; <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> TestFilter(),servletRegistrationBean());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，这个配置也有俩个方法可以完成</p>
<h4 id="4、配置Listener（监听tomcat-request等）"><a href="#4、配置Listener（监听tomcat-request等）" class="headerlink" title="4、配置Listener（监听tomcat,request等）"></a>4、配置Listener（监听tomcat,request等）</h4><p>Listener有四个接口</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6.png"></p>
<p>简单点的配置监听上下文与监听请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span>, <span class="title">ServletRequestListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;上下文初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置类注册一个bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;EventListener&gt; <span class="title">servletListenerRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> TestListener());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5、实现原理（未写）"><a href="#5、实现原理（未写）" class="headerlink" title="5、实现原理（未写）"></a>5、实现原理（未写）</h4><h4 id="6、实现原理总结（未写）"><a href="#6、实现原理总结（未写）" class="headerlink" title="6、实现原理总结（未写）"></a>6、实现原理总结（未写）</h4><h3 id="6、使用外置的Servlet容器"><a href="#6、使用外置的Servlet容器" class="headerlink" title="6、使用外置的Servlet容器"></a>6、使用外置的Servlet容器</h3><p>这个在快速创建springboot项目时，需要选择war包</p>
<p>需要导入web.xml</p>
<h4 id="1、导入web-xml"><a href="#1、导入web-xml" class="headerlink" title="1、导入web.xml"></a>1、导入web.xml</h4><p>1、使用ctrl+回车跳出项目结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%88%9B%E5%BB%BAweb.xml%E6%96%87%E4%BB%B61.png"></p>
<p>2、配置xml的路径与版本</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%88%9B%E5%BB%BAweb.xml%E6%96%87%E4%BB%B62.png"></p>
<p>3、查看下面那个是爆红，如果红了直接点击，保存结束</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%88%9B%E5%BB%BAweb.xml%E6%96%87%E4%BB%B63.png"></p>
<p>4、结束后web.xml创建成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%88%9B%E5%BB%BAweb.xml%E6%96%87%E4%BB%B64.png"></p>
<h4 id="2、使用外置Servlet原理"><a href="#2、使用外置Servlet原理" class="headerlink" title="2、使用外置Servlet原理"></a>2、使用外置Servlet原理</h4><ul>
<li>运用了servlet3.0新特性会将spring -web 下面的meta-inf下面的services里面的内容在启动的时候运行</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/guaoTAT/image/springboot%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8servlet%E5%8E%9F%E7%90%861.png" alt="springboot引入外部servlet原理1"></p>
<p>点进去这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes(WebApplicationInitializer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(<span class="meta">@Nullable</span> Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses, ServletContext servletContext)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        List&lt;WebApplicationInitializer&gt; initializers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (webAppInitializerClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; waiClass : webAppInitializerClasses) &#123;</span><br><span class="line">                <span class="comment">// Be defensive: Some servlet containers provide us with invalid classes,</span></span><br><span class="line">                <span class="comment">// no matter what @HandlesTypes says...</span></span><br><span class="line">                <span class="keyword">if</span> (!waiClass.isInterface() &amp;&amp; !Modifier.isAbstract(waiClass.getModifiers()) &amp;&amp;</span><br><span class="line">                    WebApplicationInitializer.class.isAssignableFrom(waiClass)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        initializers.add((WebApplicationInitializer)</span><br><span class="line">                                         ReflectionUtils.accessibleConstructor(waiClass).newInstance());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Failed to instantiate WebApplicationInitializer class&quot;</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在使用onStartup方法的时候，会找到servlet所有容器中实现WebApplicationInitializer这个接口的具体实现类</p>
</li>
<li><p>现在看项目中的ServletInitializer方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> application.sources(SpringbootJspApplication.class);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ServletInitializer方法继承了SpringBootServletInitializer类，SpringBootServletInitializer类又实现了WebApplicationInitializer接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>所以在启动的时候会将ServletInitializer会执行SpringBootServletInitializer的onStartup方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span><span class="comment">//参数为获取servlet上下文</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//获取日志记录器</span></span><br><span class="line">    <span class="keyword">this</span>.logger = LogFactory.getLog(getClass());</span><br><span class="line">    <span class="comment">//调用createRootApplicationContext方法创建root上下文</span></span><br><span class="line">    WebApplicationContext rootApplicationContext = createRootApplicationContext(servletContext);</span><br><span class="line">    <span class="keyword">if</span> (rootApplicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        servletContext.addListener(<span class="keyword">new</span> SpringBootContextLoaderListener(rootApplicationContext, servletContext));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">&quot;No ContextLoaderListener registered, as createRootApplicationContext() did not &quot;</span></span><br><span class="line">                          + <span class="string">&quot;return an application context&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>createRootApplicationContext方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建spring应用程序构建器</span></span><br><span class="line">    SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">    <span class="comment">//告示springboot这个类的的class对象的方法是哪个方法</span></span><br><span class="line">    builder.main(getClass());</span><br><span class="line">    <span class="comment">//获取已经存在的web上下文(spring ioc容器)</span></span><br><span class="line">    ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.info(<span class="string">&quot;Root context already created (using as parent).&quot;</span>);</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">        builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置springboot初始化器</span></span><br><span class="line">    builder.initializers(<span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">    <span class="comment">//告示spirngboot当前环境以什么形式来启动springboo上下文（xml/注解、web上下文的注解）</span></span><br><span class="line">    builder.contextClass(AnnotationConfigServletWebServerApplicationContext.class);</span><br><span class="line">    <span class="comment">//告示springboot我们的主配置类class对象是哪一个</span></span><br><span class="line">    builder = configure(builder);</span><br><span class="line">    <span class="comment">//初始化springboot的监听器</span></span><br><span class="line">    builder.listeners(<span class="keyword">new</span> WebEnvironmentPropertySourceInitializer(servletContext));</span><br><span class="line">    <span class="comment">//构造一个SpringApplication对象</span></span><br><span class="line">    SpringApplication application = builder.build();</span><br><span class="line">    <span class="keyword">if</span> (application.getAllSources().isEmpty()</span><br><span class="line">        &amp;&amp; MergedAnnotations.from(getClass(), SearchStrategy.TYPE_HIERARCHY).isPresent(Configuration.class)) &#123;</span><br><span class="line">        application.addPrimarySources(Collections.singleton(getClass()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置日志</span></span><br><span class="line">    Assert.state(!application.getAllSources().isEmpty(),</span><br><span class="line">                 <span class="string">&quot;No SpringApplication sources have been defined. Either override the &quot;</span></span><br><span class="line">                 + <span class="string">&quot;configure method or add an @Configuration annotation&quot;</span>);</span><br><span class="line">    <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">    <span class="comment">//判断是否是错误配置页面过滤器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">        application.addPrimarySources(Collections.singleton(ErrorPageFilterConfiguration.class));</span><br><span class="line">    &#125;</span><br><span class="line">    application.setRegisterShutdownHook(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//调用run方法开始交给spirngboot执行后续流程(初始化ioc容器，初始化springboot自动配置等)</span></span><br><span class="line">    <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">run</span><span class="params">(SpringApplication application)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (WebApplicationContext) application.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这个run方法又调用了SpringApplication的run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">	StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">	stopWatch.start();</span><br><span class="line">	ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">	configureHeadlessProperty();</span><br><span class="line">    <span class="comment">//获取监听器</span></span><br><span class="line">	SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">//监听器启动</span></span><br><span class="line">	listeners.starting();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">		ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">		configureIgnoreBeanInfo(environment);</span><br><span class="line">		Banner printedBanner = printBanner(environment);</span><br><span class="line">        <span class="comment">//开启创建spirng ioc容器</span></span><br><span class="line">		context = createApplicationContext();</span><br><span class="line">        <span class="comment">//准备上下文</span></span><br><span class="line">		prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">		<span class="comment">//准备刷新上下文，初始化单例对象</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">		afterRefresh(context, applicationArguments);</span><br><span class="line">		stopWatch.stop();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">			<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">		&#125;</span><br><span class="line">		listeners.started(context);</span><br><span class="line">		callRunners(context, applicationArguments);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		handleRunFailure(context, ex, listeners);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		listeners.running(context);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		handleRunFailure(context, ex, <span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>createApplicationContext()  //创建应用上下文对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line">    <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">&quot;Unable create a default ApplicationContext, please specify an ApplicationContextClass&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过class创建并返回一个上下文对象</span></span><br><span class="line">    <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>refreshContext(ConfigurableApplicationContext context)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            context.registerShutdownHook();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">            <span class="comment">// Not allowed in some environments.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    refresh((ApplicationContext) context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>refresh(ApplicationContext applicationContext)刷新上下文</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">    Assert.isInstanceOf(ConfigurableApplicationContext.class, applicationContext);</span><br><span class="line">    refresh((ConfigurableApplicationContext) applicationContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="12、spirngboot运行原理"><a href="#12、spirngboot运行原理" class="headerlink" title="12、spirngboot运行原理"></a>12、spirngboot运行原理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SprringbootCrudApplication</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(SprringbootCrudApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先这个run方法内的参数不能乱给，因为自动配置的时候会去找应用程序的包，</p>
<p>args必须要给，因为这个是用于有时候我们切换场景时候要用，如果不传这个参数，则会不起效果</p>
<ul>
<li><p>进入run方法</p>
<p>这是一个静态方法，调用了自己另外一个重载的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>run(new Class&lt;?&gt;[] { primarySource }, args);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>new了一个构造方法，进入这个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这个构造方法显时调用了另外一个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将资源加载器赋值</span></span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">//在main方法传对象的时候，不能为空，否则会报错PrimarySources must not be null </span></span><br><span class="line">    Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">//获取当前运行环境的类型</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
</li>
</ul>
<h2 id="13、自定义监听器"><a href="#13、自定义监听器" class="headerlink" title="13、自定义监听器"></a>13、自定义监听器</h2><p>在resoures下面创建META-INF下面创建spring.factories，因为springboot在启动的时候会自动去找</p>
<p>通过ApplicationContextInitializer来获取自定义监听器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextInitializer&#x3D;\</span><br><span class="line">com.znsd.springboot.springbootintalizertext.initialize.MyInitializer</span><br></pre></td></tr></table></figure>



<h2 id="14、mybatis-plus使用"><a href="#14、mybatis-plus使用" class="headerlink" title="14、mybatis-plus使用"></a>14、mybatis-plus使用</h2><p>mybatis-plus就是mybatis的封装，将单表中的一些查询封装起来</p>
<p>意味着我们只需要写多表的sql语句，大大的简化了代码</p>
<p>官方地址：</p>
<p><strong>使用：</strong></p>
<h3 id="1、maven依赖"><a href="#1、maven依赖" class="headerlink" title="1、maven依赖"></a>1、maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简化属性类依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、yml配置"><a href="#2、yml配置" class="headerlink" title="2、yml配置"></a>2、yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.25:3306/test?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;autoReconnect=true&amp;nullCatalogMeansCurrent=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">znsd_test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">&#x27;x&#x27;</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.znsd.api</span></span><br><span class="line">  <span class="attr">type-aliases-super-type:</span> <span class="string">java.lang.Object</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">lazy-loading-enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">multiple-result-sets-enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">use-generated-keys:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">default-statement-timeout:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">default-fetch-size:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mybatis-mappings/*.xml</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.znsd.springboot:</span> <span class="string">debug</span> <span class="comment"># 查看执行sql</span></span><br></pre></td></tr></table></figure>

<h3 id="3、添加配置类"><a href="#3、添加配置类" class="headerlink" title="3、添加配置类"></a>3、添加配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.znsd.springboot.springbootmybatisplus.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、dao层"><a href="#4、dao层" class="headerlink" title="4、dao层"></a>4、dao层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、server"><a href="#5、server" class="headerlink" title="5、server"></a>5、server</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、server实现"><a href="#6、server实现" class="headerlink" title="6、server实现"></a>6、server实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserDao</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>-SpringBoot</tag>
      </tags>
  </entry>
</search>
